<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simplezhao的博客</title>
  
  <subtitle>slow is smooth and smooth is fast</subtitle>
  <link href="https://blog.smart-lifestyle.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.smart-lifestyle.cn/"/>
  <updated>2022-05-05T14:53:03.075Z</updated>
  <id>https://blog.smart-lifestyle.cn/</id>
  
  <author>
    <name>simple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac m1下安装kafka for python</title>
    <link href="https://blog.smart-lifestyle.cn/posts/48c4/"/>
    <id>https://blog.smart-lifestyle.cn/posts/48c4/</id>
    <published>2022-05-05T22:44:25.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装<code>librdkafka</code></p><p>安装位置在<code>/opt/homebrew/Cellar/librdkafka/1.8.2/</code>，最后的数字因版本而异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install librdkafka</span><br></pre></td></tr></table></figure></li><li><p>安装<code>confluent_kafka</code></p><p><strong>1.8.2</strong> 根据实际版本调整位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C_INCLUDE_PATH=/opt/homebrew/Cellar/librdkafka/1.8.2/include LIBRARY_PATH=/opt/homebrew/Cellar/librdkafka/1.8.2/lib pip install confluent_kafka</span><br></pre></td></tr></table></figure></li></ol><p>参考：</p><p>[1] <a href="https://segmentfault.com/a/1190000040867082">mac m1 arm 安装 confluent-kafka 报错解决方案 - SegmentFault 思否</a></p><p>[2] <a href="https://github.com/confluentinc/confluent-kafka-python/issues/1025">Install failed in Apple Silicon · Issue #1025 · confluentinc/confluent-kafka-python (github.com)</a></p>]]></content>
    
    
    <summary type="html">在Mac m1电脑上如何正确安装kafka client for python</summary>
    
    
    
    <category term="kafka" scheme="https://blog.smart-lifestyle.cn/categories/kafka/"/>
    
    
    <category term="kafka" scheme="https://blog.smart-lifestyle.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>在code server中使用docker</title>
    <link href="https://blog.smart-lifestyle.cn/posts/e029/"/>
    <id>https://blog.smart-lifestyle.cn/posts/e029/</id>
    <published>2022-04-27T15:07:42.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇部署了code server，<a href="https://blog.smart-lifestyle.cn/posts/a6e3/">搞了一个浏览器版VS Code Server - simplezhao的博客 (smart-lifestyle.cn)</a></p><p>在code server部署完之后，安装docker插件，却无法连接docker，改怎么解决呢</p></blockquote><p>docker默认是以root用户运行的，如果你也是通过root身份登录的主机，应该不会有该问题，下面介绍的非root用户如何解决</p><p><strong>以下操作命令都是在Ubuntu系统下执行</strong></p><h2 id="安装docker插件"><a href="#安装docker插件" class="headerlink" title="安装docker插件"></a>安装docker插件</h2><blockquote><p>第一步是先安装docker，(*￣︶￣)</p></blockquote><p>首先你得在code server中安装docker插件，直接在插件中搜索即可</p><p><img src="https://oss.smart-lifestyle.cn/file/okqw8.png" alt="image-20220427153653431"></p><p>点击docker图标，各种提示Failed to connect</p><p><img src="https://oss.smart-lifestyle.cn/file/bckgw.png" alt="access failed"></p><h2 id="以rootless模式运行docker"><a href="#以rootless模式运行docker" class="headerlink" title="以rootless模式运行docker"></a>以rootless模式运行docker</h2><p>在docker插件上也介绍了，如何在vscode中使用docker</p><p><img src="https://oss.smart-lifestyle.cn/file/vb0bh.png" alt="image-20220427154201414"></p><p>打开<a href="https://docs.docker.com/engine/security/rootless/">链接</a>按照步骤执行</p><ol><li><p>安装<code>uidmap</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install uidmap</span><br></pre></td></tr></table></figure></li><li><p>安装<code>dbus-user-session</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y dbus-user-session</span><br></pre></td></tr></table></figure></li><li><p>将之前docker停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> --now docker.service docker.socket</span><br><span class="line"></span><br><span class="line">sudo rm /var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>使用当前non-root用户安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dockerd-rootless-setuptool.sh install</span><br><span class="line"></span><br><span class="line">systemctl --user start docker</span><br></pre></td></tr></table></figure></li><li><p>开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo loginctl enable-linger $(whoami)</span><br></pre></td></tr></table></figure></li><li><p>将docker host加入到环境变量中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前用户XDG_RUNTIME_DIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$XDG_RUNTIME_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下面两行加入到.bashrc或者.zshrc中，具体看用的哪种shell</span></span><br><span class="line"><span class="comment"># run/user/1000 为echo $XDG_RUNTIME_DIR的结果</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_HOST=unix:///run/user/1000/docker.sock</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>运行docker 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时就可以运行docker 命令</span></span><br><span class="line">docker run -d -p 6379:6379 redis:latest</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED       STATUS       PORTS                                       NAMES</span><br><span class="line">5e416fb0fa5d   redis:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 hours ago   Up 7 hours   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   gifted_diffie</span><br></pre></td></tr></table></figure></li></ol><h2 id="在code-server中生效docker操作"><a href="#在code-server中生效docker操作" class="headerlink" title="在code server中生效docker操作"></a>在code server中生效docker操作</h2><p>前面一路很顺利，但是发现在code server中还是不能用😓</p><p><img src="https://oss.smart-lifestyle.cn/file/etact.png" alt="image-20220427213459661"></p><p>而我们在之前的环境变量中已经配置了DOCKER_HOST = <code>export DOCKER_HOST=unix:///run/user/1000/docker.sock</code></p><p>经过测试发现，在vscode terminal和 自己电脑上使用iterm通过ssh连接服务器之后的结果竟然不一样</p><ul><li>echo  $XDG_RUNTIME_DIR</li></ul><p>​    在iterm上</p><p><img src="https://oss.smart-lifestyle.cn/file/7h9xk.png" alt="image-20220427213948405"></p><p>​    </p><p>​    在vscode terminal上</p><p><img src="https://oss.smart-lifestyle.cn/file/eyur9.png" alt="image-20220427214104155"></p><p><strong>在vscode terminal <code> $XDG_RUNTIME_DIR</code>为空</strong>，这里没有再深入去看什么原因，而我已在之前的设置中将<code>$XDG_RUNTIME_DIR</code>替换为实际的结果<code>run/user/1000</code></p><ul><li>DOCKER_HOST没有生效</li></ul><p>在vscode docker的上下文配置中，有两个contexts，一个default（使用当前DOCKER_HOST），另外一个是rootless</p><p><img src="https://oss.smart-lifestyle.cn/file/q3thf.png" alt="image-20220427214524692"></p><p>在code server中<code>$DOCKER_HOST</code>也是返回为空</p><p><img src="https://oss.smart-lifestyle.cn/file/3ehj3.png" alt="image-20220427214721962"></p><p>因为没有连接到正确的docker.sock上，所以一直出错</p><h3 id="在code-server上切换contexts为rootless"><a href="#在code-server上切换contexts为rootless" class="headerlink" title="在code server上切换contexts为rootless"></a>在code server上切换contexts为rootless</h3><p>在command palette中找到<code>Docker Contexts: Use</code></p><p><img src="https://oss.smart-lifestyle.cn/file/4gjvw.png" alt="image-20220427215039799"></p><p>将其调整为rootless</p><p><img src="https://oss.smart-lifestyle.cn/file/6hfz0.png" alt="image-20220426220112259"></p><p>然后就可以在code server中使用docker 了</p><p><img src="https://oss.smart-lifestyle.cn/file/uqlgn.png" alt="image-20220427215239438"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>除了上面提到的问题</p><p>$DOCKER_HOST、$XDG_RUNTIME_DIR在 code server terminal中为空</p><p>还有一个问题：</p><p>在code server terminal中为空无法使用<code>systemctl --user restart|start|status  docker.service</code>命令</p><p><img src="https://oss.smart-lifestyle.cn/file/fz5dv.png" alt="image-20220427215515635"></p><p>这个问题在<a href="https://docs.docker.com/engine/security/rootless/#troubleshooting">troubleshooting</a>中也提到了，但我没去解决，如果重启就在iterm中操作</p><p><img src="https://oss.smart-lifestyle.cn/file/8gpp2.png" alt="image-20220427215701871"></p><p>这两个问题等后面有时间再去解决吧</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.docker.com/engine/install/linux-postinstall/">Post-installation steps for Linux | Docker Documentation</a></p><p>[2] <a href="https://github.com/microsoft/vscode-docker/wiki/Troubleshooting">Troubleshooting · microsoft/vscode-docker Wiki (github.com)</a></p><p>[3] <a href="https://docs.docker.com/engine/security/rootless/#troubleshooting">Run the Docker daemon as a non-root user (Rootless mode) | Docker Documentation</a></p>]]></content>
    
    
    <summary type="html">配置docker运行模式为rootless，这样non-root用户也可以访问</summary>
    
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
    <category term="code server" scheme="https://blog.smart-lifestyle.cn/tags/code-server/"/>
    
  </entry>
  
  <entry>
    <title>搞了一个浏览器版VS Code Server</title>
    <link href="https://blog.smart-lifestyle.cn/posts/a6e3/"/>
    <id>https://blog.smart-lifestyle.cn/posts/a6e3/</id>
    <published>2022-04-22T14:54:12.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作用的Mac电脑是ARM芯片的，而目前部署的服务大部分还都是amd64架构的，手头上新购了几台轻量服务器，因此搞了一个在线版的vscode来方便开发，实际用过之后确实挺香(*￣︶￣)</p></blockquote><p><strong>本方案所有实现都是在腾讯云上，如果是其他云厂商，请参考对标服务</strong></p><p>下面介绍如何在轻量服务器上搭建一个基于浏览器的<a href="https://coder.com/docs/code-server/latest/guide">VS Code Server</a>，其实只是整理了官方文档</p><h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><p>本着能省就省同时兼顾安全的角度，部署使用了如下资源：</p><ul><li><p>腾讯云服务</p><ul><li><a href="https://cloud.tencent.com/product/lighthouse">轻量应用服务器(Ubuntu 20.04)</a></li><li><a href="https://cloud.tencent.com/document/product/877/18675">内网互联</a></li><li><a href="https://cloud.tencent.com/document/product/1154/39271">函数服务</a></li><li><a href="https://cloud.tencent.com/document/product/628">API网关</a></li><li><a href="https://cloud.tencent.com/document/product/1141/50310">容器镜像服务（个人版）</a></li></ul></li><li><p>软件部署</p><ul><li><a href="https://freessl.cn/">https证书</a>，提供https访问</li><li><a href="https://nginx.org/en/">Nginx</a>，对Code Server进行反向代理</li><li><a href="https://github.com/coder/code-server">Code Server</a>， 在线版VS Code</li><li><a href="https://oauth2-proxy.github.io/oauth2-proxy/">OAuth Proxy</a>，提供github OAuth认证</li></ul></li></ul><p>整体架构如下图所示</p><ol><li>将code server部署在轻量服务器中，使用nginx做反向代理，并启用https加密访问</li><li>在云函数中部署OAuth Proxy，并通过API网关对内网开放authorization接口</li><li>轻量服务器和云函数在不同的VPC内，为了实现内网访问，通过云联网打通两个VPC</li><li>最终用户在浏览器里输入url，然后通过github认证登录到Code Server上</li></ol><p><img src="https://oss.smart-lifestyle.cn/file/4uyym.png" alt="codeserver架构"></p><p>最终效果，通过浏览器访问，跟本地VS Code几乎没有任何区别</p><p><img src="https://oss.smart-lifestyle.cn/file/18nzr.png" alt="image-20220422214335880"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>下面分步骤介绍完整的部署过程，包括下面的步骤</p><ol><li>在轻量服务器中部署Code Server和Nginx</li><li>在云函数中部署OAuth2 Proxy，并在API网关中配置触发器</li><li>配置云联网，打通VPC</li><li>调试</li></ol><h3 id="在轻量服务器中部署Code-Server和Nginx"><a href="#在轻量服务器中部署Code-Server和Nginx" class="headerlink" title="在轻量服务器中部署Code Server和Nginx"></a>在轻量服务器中部署Code Server和Nginx</h3><h4 id="部署Code-Server"><a href="#部署Code-Server" class="headerlink" title="部署Code Server"></a>部署Code Server</h4><p>参考官方通过命令脚本的安装方式，<a href="https://coder.com/docs/code-server/latest/install#installsh">Install - code-server v4.3.0 docs (coder.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><blockquote><h3 id="Detection-reference"><a href="#Detection-reference" class="headerlink" title="Detection reference"></a>Detection reference</h3><ul><li>For Debian and Ubuntu, code-server will install the latest deb package.(如果是Ubuntu系统，code server会使用最新的deb包安装)</li><li>For Fedora, CentOS, RHEL and openSUSE, code-server will install the latest RPM package.</li></ul></blockquote><p>安装完成后，code server的配置文件在<code>$HOME/.config/code-server/config.yaml</code>，而插件等都会安装到<code>$HOME/.local/share/code-server</code>中</p><p>因为后面使用OAuth2 Proxy来做认证，所以在配置文件中将auth改为None，并且修改code server默认端口，且只能本机访问（后面会使用nginx代理转发）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:32000</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>启动code server，并设为开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h4><p>使用apt-get直接安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h5 id="增加https配置文件"><a href="#增加https配置文件" class="headerlink" title="增加https配置文件"></a>增加https配置文件</h5><p>此处参考：<a href="https://coder.com/docs/code-server/latest/guide#using-lets-encrypt-with-nginx">Usage - code-server v4.3.0 docs (coder.com)</a></p><p>新增<code> /etc/nginx/sites-available/code-server.https.conf</code>文件</p><p>使用nginx反向代理code server，此处不是最终完整配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    server_name code.smart-lifestyle.cn;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/full_chain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/private.key;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:32000/;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection upgrade;</span><br><span class="line">      proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><p>ssl_certificate /etc/nginx/ssl/full_chain.pem;</p></li><li><p>ssl_certificate_key /etc/nginx/ssl/private.key;</p></li></ul><p>分别为网站的公钥和私钥，可以在<a href="https://freessl.cn/">FreeSSL首页 - FreeSSL.cn一个提供免费HTTPS证书申请的网站</a>申请</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处才是加code-server配置加入到nginx配置中</span></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/code-server.https.conf /etc/nginx/sites-enabled/code-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>此时可以通过https://你的域名，来访问code server，但是因为是直接暴露在公网中，需要增加认证手段，来避免其他人可以直接访问</p><h3 id="在云函数中部署OAuth2-Proxy，并在API网关中配置触发器"><a href="#在云函数中部署OAuth2-Proxy，并在API网关中配置触发器" class="headerlink" title="在云函数中部署OAuth2 Proxy，并在API网关中配置触发器"></a>在云函数中部署OAuth2 Proxy，并在API网关中配置触发器</h3><h4 id="部署OAuth2-Proxy"><a href="#部署OAuth2-Proxy" class="headerlink" title="部署OAuth2 Proxy"></a>部署OAuth2 Proxy</h4><p>OAuth2 Proxy提供了多种OAuth2源，这里我选择了GitHub，OAuth2 Proxy使用go 语言开发，虽然云函数提供了go语言的支持，将OAuth2 Proxy最终部署应该还是需要一点点适配工作</p><p><img src="https://oss.smart-lifestyle.cn/file/kaawc.png" alt="image-20220423142804041"></p><p>云函数支持以容器镜像的形式部署服务，因此可以直接拉去OAuth2 Proxy的镜像来部署，需要注意的是，云函数默认监听端口为9000，且不能修改，因此需要将OAuth2 Proxy的监听端口也调整为9000</p><p><img src="https://oss.smart-lifestyle.cn/file/hkzvv.png" alt="image-20220423145027200"></p><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>如果使用容器镜像部署云函数，镜像来源只能选择腾讯云个人版或者企业版的镜像服务，因此需要将OAuth2 Proxy的镜像先拉到本地，然后推送到腾讯云的镜像服务中（个人版免费）</p><ol><li><p>从OAuth2 Proxy<a href="https://quay.io/repository/oauth2-proxy/oauth2-proxy?tab=tags&tag=latest">官方镜像仓库</a>拉去镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull quay.io/oauth2-proxy/oauth2-proxy:latest</span><br></pre></td></tr></table></figure></li><li><p>在本地打上tag，tag名为在腾讯云镜像服务创建的镜像的镜像地址，然后上传镜像，具体如何使用腾讯云镜像服务，可以参考官方文档：<a href="https://cloud.tencent.com/document/product/1141/50310">容器镜像服务 个人版操作指南 - 操作指南 - 文档中心 - 腾讯云 (tencent.com)</a></p></li><li><p>在github上创建一个application</p><p>在github Developer settings中新建一个OAuth APP</p><p><img src="https://oss.smart-lifestyle.cn/file/wme6e.png" alt="image-20220423204710201"></p><p>回调地址修改为你实际的回调地址：<a href="https://your-code-server-domain/oauth2/callback">https://your-code-server-domain/oauth2/callback</a></p><p>/oauth2/callback 需要在之前的nginx配置中增加一条代理记录，后面会介绍</p><p><img src="https://oss.smart-lifestyle.cn/file/mwadc.png" alt="image-20220423204935842"></p><p>创建完应用后，记录你的Client ID、Client Secret后面会使用</p></li><li><p>云函数创建一个函数服务</p><ul><li>选择使用容器镜像</li><li>基础配置选择Web函数</li><li>函数代码选择上一步选择的镜像</li></ul><p><img src="https://oss.smart-lifestyle.cn/file/swtfp.png" alt="image-20220423202037576"></p><p>在高级配置中，增加环境变量，来配置github 认证，需要配置的字段有：</p><ul><li><p>OAUTH2_PROXY_CLIENT_ID=<Your github app client id></p></li><li><p>OAUTH2_PROXY_CLIENT_SECRET=<Your github app client secret></p></li><li><p>OAUTH2_PROXY_COOKIE_SECRET=&lt;随机生成&gt;</p></li><li><p>OAUTH2_PROXY_EMAIL_DOMAINS=*</p></li><li><p>OAUTH2_PROXY_GITHUB_USERS=<your github name> 保证认证后只有你可以访问</p></li><li><p>OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:9000 # 这里是修改OAuth2 Proxy监听地址，需要改为9000</p></li><li><p>OAUTH2_PROXY_PROVIDER=github</p></li><li><p>OAUTH2_PROXY_REDIRECT_URL=<your redirect url in app settings></p></li></ul><p>详细配置请参考官方：<a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/oauth_provider#github-auth-provider">OAuth Provider Configuration | OAuth2 Proxy (oauth2-proxy.github.io)</a></p><p>下文介绍，在使用环境变量配置OAuth2 Proxy时，在文档的配置字段前加上OAUTH2_PROXY，同时连字符(-)改为下划线（_)</p><p><img src="https://oss.smart-lifestyle.cn/file/ldqul.png" alt="image-20220423210548845"></p><p><img src="https://oss.smart-lifestyle.cn/file/ywaip.png" alt="image-20220423205906590"></p><p>触发器先选择默认，后面需要删除重新建，默认生成的API网关触发配置，支持公网访问，而我只想让这个服务只能内网访问，既保证安全，<strong>有避免公网资源的浪费</strong></p><p>熟悉腾讯云API网关的话，可以先在API网关创建一个服务，然后再此处选择自定义触发器</p><p><img src="https://oss.smart-lifestyle.cn/file/cjgr1.png" alt="image-20220423202303118"></p><p><img src="https://oss.smart-lifestyle.cn/file/y49cb.png" alt="image-20220423203119102"></p></li></ol><h4 id="部署内网API服务"><a href="#部署内网API服务" class="headerlink" title="部署内网API服务"></a>部署内网API服务</h4><ol><li>为云函数创建一个内网访问的API网关触发器</li></ol><p>在API网关中，创建一个API网关服务</p><p><img src="https://oss.smart-lifestyle.cn/file/2x3rd.png" alt="image-20220423203527650"></p><ul><li>访问方式选择内网VPC</li><li>所属VPC选择跟OAuth2 Proxy服务同一个VPC</li></ul><p><img src="https://oss.smart-lifestyle.cn/file/i84hp.png" alt="image-20220423203658410"></p><ol start="2"><li><p>在云函数中，重新配置触发器</p><p>删除之前的触发器，新建触发器</p><p><img src="https://oss.smart-lifestyle.cn/file/399ju.png" alt="image-20220322230121860"></p><p>选择自定义触发器，并选择之前创建的API网关服务</p><p><img src="https://oss.smart-lifestyle.cn/file/t0m13.png" alt="image-20220322230157775"></p><p>配置完之后，可以查看到内网访问路径，在没有配置云联网之前，轻量服务器是无法访问到这个云函数服务</p><p><img src="https://oss.smart-lifestyle.cn/file/opgzl.png" alt="image-20220423213305703"></p></li></ol><h3 id="配置云联网打通VPC"><a href="#配置云联网打通VPC" class="headerlink" title="配置云联网打通VPC"></a>配置云联网打通VPC</h3><p>在轻量服务器的管理界面–内网互联中，选择服务器所在的区域，新建个内网互联</p><p><img src="https://oss.smart-lifestyle.cn/file/2h5s8.png" alt="image-20220423212226912"></p><p>在内网互联配置中，将轻量服务器VPC和云函数所在VPC关联进去</p><p><img src="https://oss.smart-lifestyle.cn/file/04jmq.png" alt="image-20220423212342714"></p><p>由于我的轻量服务器和云函数都在北京区域，因此两个VPC之间是内网访问，因此互相访问是免费的</p><p><img src="https://oss.smart-lifestyle.cn/file/8awk2.png" alt="image-20220423213011059"></p><p>登录轻量服务器，访问OAuth2 Proxy url，如果能返回html页面表明，服务成功运行，且可以内网访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:9003/release/</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/2xoco.png" alt="image-20220423213458827"></p><h3 id="配置nginx，增加auth认证"><a href="#配置nginx，增加auth认证" class="headerlink" title="配置nginx，增加auth认证"></a>配置nginx，增加auth认证</h3><p>最后我们在重新修改code-server.https.conf，新增auth部分功能，官方参考：<a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#configuring-for-use-with-the-nginx-auth_request-directive">Configuring for use with the Nginx <code>auth_request</code> directive</a></p><p>完整code-server.https.conf文件代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    server_name _;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/full_chain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/private.key;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location /oauth2/ &#123;</span><br><span class="line">      proxy_pass       http://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:8003;</span><br><span class="line">      proxy_set_header Host                    <span class="variable">$proxy_host</span>;</span><br><span class="line">      proxy_set_header X-Real-IP               <span class="variable">$remote_addr</span>;</span><br><span class="line">      proxy_set_header X-Scheme                <span class="variable">$scheme</span>;</span><br><span class="line">      proxy_set_header X-Auth-Request-Redirect <span class="variable">$request_uri</span>;</span><br><span class="line">      <span class="comment"># or, if you are handling multiple domains:</span></span><br><span class="line">      <span class="comment"># proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;</span></span><br><span class="line">    &#125;</span><br><span class="line">    location = /oauth2/auth &#123;</span><br><span class="line">      proxy_pass       http://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:8003;</span><br><span class="line">      proxy_set_header Host             <span class="variable">$proxy_host</span>;</span><br><span class="line">      proxy_set_header X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">      proxy_set_header X-Scheme         <span class="variable">$scheme</span>;</span><br><span class="line">      <span class="comment"># nginx auth_request includes headers but not body</span></span><br><span class="line">      proxy_set_header Content-Length   <span class="string">&quot;&quot;</span>;</span><br><span class="line">     proxy_pass_request_body           off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">     auth_request /oauth2/auth;</span><br><span class="line">    error_page 401 = /oauth2/sign_in;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass information via X-User and X-Email headers to backend,</span></span><br><span class="line">    <span class="comment"># requires running with --set-xauthrequest flag</span></span><br><span class="line">    auth_request_set <span class="variable">$user</span>   <span class="variable">$upstream_http_x_auth_request_user</span>;</span><br><span class="line">    auth_request_set <span class="variable">$email</span>  <span class="variable">$upstream_http_x_auth_request_email</span>;</span><br><span class="line">    proxy_set_header X-User  <span class="variable">$user</span>;</span><br><span class="line">    proxy_set_header X-Email <span class="variable">$email</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if you enabled --pass-access-token, this will pass the token to the backend</span></span><br><span class="line">    auth_request_set <span class="variable">$token</span>  <span class="variable">$upstream_http_x_auth_request_access_token</span>;</span><br><span class="line">    proxy_set_header X-Access-Token <span class="variable">$token</span>;</span><br><span class="line">      <span class="comment"># if you enabled --cookie-refresh, this is needed for it to work with auth_request</span></span><br><span class="line">    auth_request_set <span class="variable">$auth_cookie</span> <span class="variable">$upstream_http_set_cookie</span>;</span><br><span class="line">    add_header Set-Cookie <span class="variable">$auth_cookie</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When using the --set-authorization-header flag, some provider&#x27;s cookies can exceed the 4kb</span></span><br><span class="line">    <span class="comment"># limit and so the OAuth2 Proxy splits these into multiple parts.</span></span><br><span class="line">    <span class="comment"># Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,</span></span><br><span class="line">    <span class="comment"># so if your cookies are larger than 4kb, you will need to extract additional cookies manually.</span></span><br><span class="line">    auth_request_set <span class="variable">$auth_cookie_name_upstream_1</span> <span class="variable">$upstream_cookie_auth_cookie_name_1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Extract the Cookie attributes from the first Set-Cookie header and append them</span></span><br><span class="line">    <span class="comment"># to the second part ($upstream_cookie_* variables only contain the raw cookie content)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$auth_cookie</span> ~* <span class="string">&quot;(; .*)&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$auth_cookie_name_0</span> <span class="variable">$auth_cookie</span>;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$auth_cookie_name_1</span> <span class="string">&quot;auth_cookie_name_1=$auth_cookie_name_upstream_1<span class="variable">$1</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send both Set-Cookie headers now if there was a second part</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$auth_cookie_name_upstream_1</span>) &#123;</span><br><span class="line">        add_header Set-Cookie <span class="variable">$auth_cookie_name_0</span>;</span><br><span class="line">        add_header Set-Cookie <span class="variable">$auth_cookie_name_1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:32000/;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection upgrade;</span><br><span class="line">      proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成之后，重启nginx</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://oss.smart-lifestyle.cn/file/uv1hl.png" alt="image-20220423215409071"></p><p><img src="https://oss.smart-lifestyle.cn/file/utszp.png" alt="image-20220423215456692"></p><p><img src="https://oss.smart-lifestyle.cn/file/a6nh5.png" alt="image-20220423215521287"></p><p><img src="https://oss.smart-lifestyle.cn/file/der2y.png" alt="image-20220423215614112"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>随着自己逐渐向云原生方向发展，腾讯云在这方面做的还是不错目前正在充分的撸厂商的各种免费云产品，而不是像以前只撸虚机，然后搭建各种服务</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.github.com/cn/developers/apps/managing-oauth-apps/troubleshooting-authorization-request-errors">排查授权请求错误 - GitHub Docs</a></p><p>[2] <a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#environment-variables">Overview | OAuth2 Proxy (oauth2-proxy.github.io)</a></p><p>[3] <a href="https://coder.com/docs/code-server/latest/guide">Usage - code-server v4.3.0 docs (coder.com)</a></p><p>[4] <a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#configuring-for-use-with-the-nginx-auth_request-directive">Overview | OAuth2 Proxy (oauth2-proxy.github.io)</a></p>]]></content>
    
    
    <summary type="html">在腾讯轻量服务器上搭建vscode在线版code server，并使用github账号授权访问</summary>
    
    
    
    <category term="工具" scheme="https://blog.smart-lifestyle.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="code server" scheme="https://blog.smart-lifestyle.cn/tags/code-server/"/>
    
    <category term="oauth" scheme="https://blog.smart-lifestyle.cn/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>linux下配置v2ray客户端</title>
    <link href="https://blog.smart-lifestyle.cn/posts/73e5/"/>
    <id>https://blog.smart-lifestyle.cn/posts/73e5/</id>
    <published>2022-04-19T09:37:48.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>腾讯云服务器访问github出奇的慢，因此搭个梯子来加速访问github</p></blockquote><p><strong>本篇是客户端教程，不是服务端教程</strong></p><p><strong>服务器系统：Ubuntu 20.4</strong></p><p>访问<a href="https://github.com/v2fly/v2ray-core/releases">官网下载页面</a>，选择适配版本的安装包，我的系统是linux 64为系统，选择了v2ray-linux-64.zip</p><p><img src="https://oss.smart-lifestyle.cn/file/115zq.png" alt="image-20220419094326600"></p><ul><li>下载安装包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/v2fly/v2ray-core/releases/download/v4.44.0/v2ray-linux-64.zip</span><br></pre></td></tr></table></figure><p>服务商本身访问github有问题，可以先下载到本地，然后上传到服务器上</p><ul><li>解压目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uzip v2ray-linux-64.zip -d v2ray-linux</span><br></pre></td></tr></table></figure><ul><li>获取配置文件</li></ul><p>可以使用你已经有的config.json 将其上传到服务器上，下面的命令可以测试文件是否正确</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./v2ray -test config.json</span><br></pre></td></tr></table></figure><p>我这边在etc目录下创建了一个v2ray-linux文件夹，并将所有相关文件都放到这个文件夹里</p><p><img src="https://oss.smart-lifestyle.cn/file/g05rn.png" alt="image-20220419095826482"></p><ul><li>配置service文件</li></ul><p>创建v2ray.service文件，放到/usr/lib/systemd/system/v2ray.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=V2Ray Service</span><br><span class="line">Documentation=https://www.v2fly.org/</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/etc/v2ray-linux/v2ray -config /etc/v2ray-linux/config.json</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>启动service</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start</span><br></pre></td></tr></table></figure><ul><li>查看状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service v2ray status</span><br><span class="line">● v2ray.service - V2Ray Service</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/v2ray.service; disabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Mon 2022-04-18 21:49:55 CST; 12h ago</span><br><span class="line">       Docs: https://www.v2fly.org/</span><br><span class="line">   Main PID: 3047292 (v2ray)</span><br><span class="line">      Tasks: 10 (<span class="built_in">limit</span>: 8819)</span><br><span class="line">     Memory: 6.2M</span><br><span class="line">     CGroup: /system.slice/v2ray.service</span><br><span class="line">             └─3047292 /etc/v2ray-linux/v2ray -config /etc/v2ray-linux/config.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>终端启用代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://www.jianshu.com/p/dae87e4d7691">记录：Linux下 V2Ray 原生客户端配置 - 简书 (jianshu.com)</a></p><p>[2] <a href="https://github.com/v2fly/v2ray-core/releases">Releases · v2fly/v2ray-core (github.com)</a></p>]]></content>
    
    
    <summary type="html">如何在linux 下使用v2ray 客户端</summary>
    
    
    
    <category term="工具" scheme="https://blog.smart-lifestyle.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="v2ray" scheme="https://blog.smart-lifestyle.cn/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>RESTFul API设计规则</title>
    <link href="https://blog.smart-lifestyle.cn/posts/81a9/"/>
    <id>https://blog.smart-lifestyle.cn/posts/81a9/</id>
    <published>2021-11-30T15:21:05.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结一下restful api在设计时的一些规则</p></blockquote><p>首先应该满足，无论API内部如何实现，任何客户端（python、c#、C++等）都应该能够代用API，</p><p>引入版本管理，对于已发布的API，保持已使用的客户端不受影响</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>RESTful API设计的主要原则</p><ul><li>REST API围绕资源设计，资源是可由客户端访问的任何类型的对象、数据或服务</li><li>每一个资源都有一个标识符，即唯一标识该资源的URI</li><li>通过JSON作为数据交换格式</li><li>REST API使用同一接口（POST新增、GET获取、DELETE删除、PUT修改等）</li><li>REST API使用无状态模型（最好）</li></ul><h3 id="URI基于（复数）名词，且简洁"><a href="#URI基于（复数）名词，且简洁" class="headerlink" title="URI基于（复数）名词，且简洁"></a>URI基于（复数）名词，且简洁</h3><p>资源的URI基于名词而不是动词（对资源执行的操作），资源是一个集合，最好用名词的复数</p><ul><li>用名词不用动词</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 好</span><br><span class="line">https://d-wz.cc/orders</span><br><span class="line"># 不好</span><br><span class="line">https://d-wz.cc/create-order  </span><br></pre></td></tr></table></figure><ul><li>避免设计过长的资源URI</li></ul><p>避免请求复杂度避免超过<strong>集合/项目/集合</strong>的资源</p><p>比如查询某个客户某个订单的产品有哪些</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 请过过于复杂</span><br><span class="line">https://d-wz.cc/customers/2/orders/100/products</span><br></pre></td></tr></table></figure><p>拆分为2步</p><ol><li>先获取客户订单号列表</li><li>再获取订单号下面的产品列表</li><li>如果查询某个产品详细信息，可以再加一步</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第一步 </span><br><span class="line">https://d-wz.cc/customers/2/orders</span><br><span class="line"># 第二步</span><br><span class="line">https://d-wz.cc/orders/100/products</span><br></pre></td></tr></table></figure><h3 id="按照HTTP定义方法实现"><a href="#按照HTTP定义方法实现" class="headerlink" title="按照HTTP定义方法实现"></a>按照HTTP定义方法实现</h3><ol><li>根据HTTP方法定义API操作</li></ol><ul><li><strong>GET</strong> 检索位于指定 URI 处的资源。 响应消息的正文包含所请求资源的详细信息。</li><li><strong>POST</strong> 在指定的 URI 处创建新资源。 请求消息的正文将提供新资源的详细信息。 请注意，POST 还用于触发不实际创建资源的操作。</li><li><strong>PUT</strong> 在指定的 URI 处创建或替换资源。 请求消息的正文指定要创建或更新的资源。</li><li><strong>PATCH</strong> 对资源执行部分更新。 请求正文包含要应用到资源的一组更改。</li><li><strong>DELETE</strong> 删除位于指定 URI 处的资源</li></ul><p>特定请求的影响应取决于资源是集合还是单个子项。 下表总结了大多数 RESTful 实现使用电子商务示例采用的共同约定。 并非所有这些请求都可能会实现 — ，这取决于特定方案。</p><table><thead><tr><th align="left"><strong>资源</strong></th><th align="left"><strong>POST</strong></th><th align="left"><strong>GET</strong></th><th align="left"><strong>PUT</strong></th><th align="left"><strong>DELETE</strong></th></tr></thead><tbody><tr><td align="left">/customers</td><td align="left">创建新客户</td><td align="left">检索所有客户</td><td align="left">批量更新客户</td><td align="left">删除所有客户</td></tr><tr><td align="left">/customers/1</td><td align="left">错误</td><td align="left">检索客户 1 的详细信息</td><td align="left">如果客户 1 存在，则更新其详细信息</td><td align="left">删除客户 1</td></tr><tr><td align="left">/customers/1/orders</td><td align="left">创建客户 1 的新订单</td><td align="left">检索客户 1 的所有订单</td><td align="left">批量更新客户 1 的订单</td><td align="left">删除客户 1 的所有订单</td></tr></tbody></table><ol start="2"><li>使用HTPP标准规范实现返回码</li></ol><p>客户端发送给服务端的content-type，如果服务端不支持，返回415错误</p><p>客户端请求包含accept，如果服务端无法匹配，返回406错误</p><ul><li>get方法<ol><li>成功返回200， 找不到返回404</li></ol></li><li>post方法<pre><code>   1. 创建新资源返回201，新资源的URI包含在响应的Location标头中2. 如果处理但未创建新资源，返回2003. 客户端将无效数据放入到请求，服务端返回400</code></pre></li><li>delete方法<pre><code>  1. 删除成功返回204</code></pre><ol start="2"><li>资源不存在返回404</li></ol></li></ul><ol start="3"><li>异步操作中的规范</li></ol><p>异步操作，是请求发送到服务端后，服务端需要一段时间才能处理完成的，如果需要等待该操作完成后才向客户端发送响应，延迟太大，这时候需要考虑异步操作，首先返回状态码202，表示请求接受处理，但尚未完成，然后在返回内容中，包含一个链接，用户可以去查询请求的当前状态</p><p>第一步，先返回202状态法，并同时将后续查询状态URI放到Location中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>/api/status/12345</span><br></pre></td></tr></table></figure><p>客户端向状态终结点发送GET请求，响应中返回之前请求的状态</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;In progress&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;link&quot;</span>: &#123; <span class="attr">&quot;rel&quot;</span>:<span class="string">&quot;cancel&quot;</span>, <span class="attr">&quot;method&quot;</span>:<span class="string">&quot;delete&quot;</span>, <span class="attr">&quot;href&quot;</span>:<span class="string">&quot;/api/status/12345&quot;</span> &#125;</span></span><br><span class="line"><span class="json">&#125;</span></span><br></pre></td></tr></table></figure><p>如果异步操作创建了新资源，状态终结点返回状态码303，并包含一个location标头用于提供新资源的URI</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">303</span> See Other</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>/api/orders/12345</span><br></pre></td></tr></table></figure><ol start="4"><li><p>对于终结点带不带’/‘都应该支持</p><p>用一个URI以’/‘结尾或者不带’/‘服务端都应该支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面应该返回同样内容</span><br><span class="line">curl https://d-wz.cc/api/cats/</span><br><span class="line">curl https://d-wz.cc/api/cats</span><br></pre></td></tr></table></figure></li><li><p>401和403区别</p><ul><li><p>401 表示用户名或者密码错误，或者无法识别用户身份</p></li><li><p>403 表示能够识别用户身份，但是他没有权限去操作</p></li></ul></li></ol><h3 id="返回数据需要筛选和分页"><a href="#返回数据需要筛选和分页" class="headerlink" title="返回数据需要筛选和分页"></a>返回数据需要筛选和分页</h3><p>前端展示的数据往往是所有数据的一小部分，通过筛选和分页减少对服务端和客户端的压力，在GET请求中使用query方式，比如增加page表示第几页，page_size表示每页的数量，bool值表示状态等等</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span><span class="punctuation">: </span>/books?published=true&amp;page=2&amp;page_size=10</span><br></pre></td></tr></table></figure><h3 id="API设计时要考虑版本"><a href="#API设计时要考虑版本" class="headerlink" title="API设计时要考虑版本"></a>API设计时要考虑版本</h3><p>尽可能保证释放出去的API，客户在使用后不用修改接口</p><p>目前考虑两种方式做版本控制</p><ol><li>在URI中增加版本号，对于URI一致的，以前存在的URI按照以前一样继续运行，如果新版增加了新的返回字段，则通过增加版本号的方式管理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://adventure-works.com/v2/customers/3</span><br></pre></td></tr></table></figure><ol start="2"><li>查询字符串方式版本控制</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://adventure-works.com/customers/3?version=2</span><br></pre></td></tr></table></figure><p>注意：某些较旧的 Web 浏览器和 Web 代理不会缓存在 URI 中包含查询字符串的请求的响应。 这可能会降低使用 web API 的 web 应用程序的性能，并从这类 web 浏览器中运行。</p><p>URI 版本控制和查询字符串版本控制方案都是缓存友好的，因为同一 URI/查询字符串组合每次都指向相同的数据。</p><h3 id="API发布要有配套接口文档支持"><a href="#API发布要有配套接口文档支持" class="headerlink" title="API发布要有配套接口文档支持"></a>API发布要有配套接口文档支持</h3><p>比如使用swagger管理API文档，在API发布时，同样要发布接口文档，来方便用户了解如何调用你的API</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design">Web API 设计最佳做法 - Azure Architecture Center | Microsoft Docs</a></p><p>[2] <a href="https://abdulrwahab.medium.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f">API Architecture — Design Best Practices for REST APIs | by Abdul Wahab | Oct, 2021 | Medium</a></p><p>[3] <a href="https://docs.microsoft.com/zh-cn/azure/architecture/patterns/async-request-reply">异步Request-Reply模式 - Azure Architecture Center | Microsoft Docs</a></p><p>[4] <a href="https://mathieu.fenniak.net/the-api-checklist/">The Web API Checklist – 43 Things To Think About When Designing, Testing, and Releasing your API (fenniak.net)</a></p>]]></content>
    
    
    <summary type="html">你需要了解的RESTFul API设计规则</summary>
    
    
    
    <category term="web开发" scheme="https://blog.smart-lifestyle.cn/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="api" scheme="https://blog.smart-lifestyle.cn/tags/api/"/>
    
    <category term="web" scheme="https://blog.smart-lifestyle.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>在Azure Pipeline上编译React Native Android APP</title>
    <link href="https://blog.smart-lifestyle.cn/posts/bf91/"/>
    <id>https://blog.smart-lifestyle.cn/posts/bf91/</id>
    <published>2021-11-13T22:04:16.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍在Azure Pipeline上搭建Android 编译打包过程以及中间遇到的问题，最终将打包好的APP发布到微软APP Center中</p><p><img src="https://oss.smart-lifestyle.cn/file/3adoj.png" alt="image-20211114074340599"></p><h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p>流水线的Pipeline配置如下（实际使用的是Pipeline的经典模式，即图形化模式，下面配置跟实际稍微有区别）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Azure</span> <span class="string">Pipelines</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘envconfig.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘keystorefile.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘envconfig.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download keystore file&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">xxx.xxx.xxx.keystore</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download envconfig&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">.env.prod</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">NodeTool@0</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Node 14&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Yarn 1.22&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">1.22</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn add jetifier&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;add jetifier&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line">  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn  install&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn build&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;sh:assemble:android:prod&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CopyFiles@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Copy Files to: $(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">SourceFolder:</span> <span class="string">&#x27;$(system.defaultworkingdirectory)&#x27;</span></span><br><span class="line">    <span class="attr">Contents:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">TargetFolder:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifact: drop&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterTest@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Test with Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">prepareTests:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterDistribute@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Deploy **/*.apk to Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">serverEndpoint:</span> <span class="string">&#x27;service name&#x27;</span></span><br><span class="line">    <span class="attr">appSlug:</span> <span class="string">&#x27;org/appname&#x27;</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">symbolsIncludeParentDirectory:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">releaseNotesInput:</span> <span class="string">&#x27;new release&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="下载机密文件和配置文件"><a href="#下载机密文件和配置文件" class="headerlink" title="### 下载机密文件和配置文件"></a>### 下载机密文件和配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download keystore file&#x27;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">keystorefile</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">xxx.xxx.xxx.keystore</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download envconfig&#x27;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envconfig</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">.env.prod</span></span><br></pre></td></tr></table></figure><p>Azure DevOps Pipeline中提供了安全文件的下载，我们在环境中使用的keystore文件以及env文件是不能直接提交到代码中，第一是为了安全，如果泄漏后果很严重，第二是方便多个环境（开发、测试、生产）的配置</p><p>在实际使用中，通过<code>keystorefile.secureFilePath</code>和<code>envconfig.secureFilePath</code>来使用这两个文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="安装指定版本的node、yarn"><a href="#安装指定版本的node、yarn" class="headerlink" title="安装指定版本的node、yarn"></a>安装指定版本的node、yarn</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">NodeTool@0</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Node 14&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Yarn 1.22&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">1.22</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn add jetifier&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;add jetifier&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line">  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn  install&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><h3 id="编译apk"><a href="#编译apk" class="headerlink" title="编译apk"></a>编译apk</h3><p>这里实际执行sh:assemble:android:prod命令为：<code>cd android/ &amp;&amp; export ENVFILE=.env.beta &amp;&amp; ./gradlew assembleBetaRelease &amp;&amp; cd ..</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn build&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;sh:assemble:android:prod&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="分发到appcenter"><a href="#分发到appcenter" class="headerlink" title="分发到appcenter"></a>分发到appcenter</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifact: drop&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterTest@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Test with Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">prepareTests:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterDistribute@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Deploy **/*.apk to Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">serverEndpoint:</span> <span class="string">&#x27;service name&#x27;</span></span><br><span class="line">    <span class="attr">appSlug:</span> <span class="string">&#x27;org/appname&#x27;</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">symbolsIncludeParentDirectory:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">releaseNotesInput:</span> <span class="string">&#x27;new release&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>大部分问题在于引用环境变量，引用机密文件上，导致在编译时找不到一些内容而出错</p><h3 id="问题1-android-support-annotation-does-not-exist"><a href="#问题1-android-support-annotation-does-not-exist" class="headerlink" title="问题1 android.support.annotation does not exist"></a>问题1 <code>android.support.annotation does not exist</code></h3><p>安装jetifier</p><p><code>yarn add jetifier</code></p><p><code>npx jetify</code></p><h3 id="问题2-缓存node依赖"><a href="#问题2-缓存node依赖" class="headerlink" title="问题2 缓存node依赖"></a>问题2 缓存node依赖</h3><p>为了避免每次build时都重新下载node依赖，azure pipeline提供了管道缓存，查看<a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/release/caching?view=azure-devops">参考地址</a></p><p>但是由于时间问题没有调通</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="gradle-file-project-env-get-filename"><a href="#gradle-file-project-env-get-filename" class="headerlink" title="gradle file(project.env.get(filename))"></a>gradle file(project.env.get(filename))</h3><p>这里的filename只能是文件名，而且gradle会自动加上完整的android/app/filename，如果这里写的是其他路径的文件会找不到（即使写的绝对路径），因此通过软连接的形式，将文件链接到android/app文件夹下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/56667264/react-native-build-error-package-android-support-annotation-does-not-exist">react native build error: package android.support.annotation does not exist - Stack Overflow</a></p><p>[2] <a href="https://github.com/staff0rd/react-native-pipeline/blob/master/azure-pipelines-android.yml">react-native-pipeline/azure-pipelines-android.yml at master · staff0rd/react-native-pipeline (github.com)</a></p><p>[3] <a href="https://blog.logrocket.com/continuous-deployment-of-react-native-app-with-azure-devops/">Continuous deployment of React Native app with Azure DevOps - LogRocket Blog</a></p><p>[4] <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/release/caching?view=azure-devops">管道缓存 - Azure Pipelines | Microsoft Docs</a></p><p>[5] <a href="https://medium.com/@liam.e.andrew/continuous-integration-for-react-native-with-azure-pipelines-245d90948f6a">Continuous Integration for React Native with Azure Pipelines | by Liam Andrew | Medium</a></p><p>[6] <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/utility/download-secure-file?view=azure-devops">下载安全文件任务 - Azure Pipelines | Microsoft Docs</a></p><p>[7] <a href="https://github.com/luggit/react-native-config/issues/314">gradle.properties doesn’t process project.env.get(“_keystore_file”) · Issue #314 · luggit/react-native-config (github.com)</a></p>]]></content>
    
    
    <summary type="html">使用Azure DevOps中的Pipeline来编译基于RN的Android APP</summary>
    
    
    
    <category term="DevOps" scheme="https://blog.smart-lifestyle.cn/categories/DevOps/"/>
    
    
    <category term="DevOps" scheme="https://blog.smart-lifestyle.cn/tags/DevOps/"/>
    
    <category term="React Native" scheme="https://blog.smart-lifestyle.cn/tags/React-Native/"/>
    
    <category term="Pipeline" scheme="https://blog.smart-lifestyle.cn/tags/Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>Apple M1 node多版本切换</title>
    <link href="https://blog.smart-lifestyle.cn/posts/aa65/"/>
    <id>https://blog.smart-lifestyle.cn/posts/aa65/</id>
    <published>2021-10-11T16:35:53.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用nvm在Macbook M1下管理多个版本（架构）的node</p><p>目前Node V16已经原生支持Macbook M1，但是如果选择V16以下的版本，需要安装X86的版本</p><p><img src="https://oss.smart-lifestyle.cn/file/brnx9.png" alt="image-20211011164226288"></p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><h3 id="最新ARM版本V16"><a href="#最新ARM版本V16" class="headerlink" title="最新ARM版本V16+"></a>最新ARM版本V16+</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v16.6.0</span><br><span class="line">node -p process.arch</span><br><span class="line">arm64</span><br></pre></td></tr></table></figure><h3 id="安装X86版本"><a href="#安装X86版本" class="headerlink" title="安装X86版本"></a>安装X86版本</h3><h4 id="切换到x86环境"><a href="#切换到x86环境" class="headerlink" title="切换到x86环境"></a>切换到x86环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch -x86_64 zsh</span><br></pre></td></tr></table></figure><h4 id="查看当前环境"><a href="#查看当前环境" class="headerlink" title="查看当前环境"></a>查看当前环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arch</span><br><span class="line"><span class="comment"># i386</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装node-1"><a href="#安装node-1" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v14</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -p process.arch</span><br><span class="line">x64</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/nvm-sh/nvm#installing-and-updating">nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p><p>[2] <a href="https://www.jurnalanas.com/node-js-mac-m1/">macOS Big Sur: How to setup Node.js on Apple M1 Machine – Jurnal Anas</a></p>]]></content>
    
    
    <summary type="html">Apple M1下，如果管理多个版本的node</summary>
    
    
    
    <category term="node" scheme="https://blog.smart-lifestyle.cn/categories/node/"/>
    
    
    <category term="nvm" scheme="https://blog.smart-lifestyle.cn/tags/nvm/"/>
    
    <category term="node" scheme="https://blog.smart-lifestyle.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>浅谈python生成短随机数</title>
    <link href="https://blog.smart-lifestyle.cn/posts/6ae6/"/>
    <id>https://blog.smart-lifestyle.cn/posts/6ae6/</id>
    <published>2021-09-29T12:53:44.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要较短的随机数（比如8位），比如在生成url短链接，需要生成随机且唯一的8位字符作为新的url</p><p><img src="https://oss.smart-lifestyle.cn/file/9qfwc.png" alt="image-20210929130158602"></p><p>以下介绍几种生成short unique随机数的方法</p><h3 id="random-choices"><a href="#random-choices" class="headerlink" title="random.choices"></a>random.choices</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span>.join(random.choices(alphabet, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure><h3 id="uuid4"><a href="#uuid4" class="headerlink" title="uuid4"></a>uuid4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="built_in">str</span>(uuid4())[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure><h3 id="secrets-choice"><a href="#secrets-choice" class="headerlink" title="secrets.choice"></a>secrets.choice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">secrets.token_urlsafe(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="shortuuid"><a href="#shortuuid" class="headerlink" title="shortuuid"></a>shortuuid</h3><p>需要先安装第三方库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shortuuid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shortuuid</span><br><span class="line">su = shortuuid.ShortUUID(alphabet)</span><br><span class="line">su.random(length=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="NamedTemporaryFile"><a href="#NamedTemporaryFile" class="headerlink" title="NamedTemporaryFile"></a>NamedTemporaryFile</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line"></span><br><span class="line">temp = NamedTemporaryFile(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">temp.name[-<span class="number">8</span>:]</span><br></pre></td></tr></table></figure><h3 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h3><p>无论哪种方法，优先考虑这种方法的碰撞概率是多少，以下是对这几种方法在碰撞次数、效率上的测评</p><h4 id="random-choices-1"><a href="#random-choices-1" class="headerlink" title="random.choices"></a>random.choices</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="string">&quot;&quot;</span>.join(random.choices(alphabet, k=<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run counts: 10000000, total time: 12.96840283399979s, each time: 1.296840283399979e-06s, collisions=0</span><br></pre></td></tr></table></figure><h4 id="uuid4-1"><a href="#uuid4-1" class="headerlink" title="uuid4"></a>uuid4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="built_in">str</span>(uuid4())[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run counts: 10000000, total time: 20.264591582999856s, each time: 2.0264591582999855e-06s, collisions=11668</span><br></pre></td></tr></table></figure><h4 id="secrets-choice-1"><a href="#secrets-choice-1" class="headerlink" title="secrets.choice"></a>secrets.choice</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = secrets.token_urlsafe(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run counts: 10000000, total time: 9.400313791999906s, each time: 9.400313791999906e-07s, collisions=0</span><br></pre></td></tr></table></figure><h4 id="shortuuid-1"><a href="#shortuuid-1" class="headerlink" title="shortuuid"></a>shortuuid</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> shortuuid</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line">start = time.perf_counter()</span><br><span class="line">su = shortuuid.ShortUUID(alphabet)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = su.random(length=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run counts: 10000000, total time: 20.793132207999406s, each time: 2.0793132207999407e-06s, collisions=1</span><br></pre></td></tr></table></figure><h4 id="NamedTemporaryFile-1"><a href="#NamedTemporaryFile-1" class="headerlink" title="NamedTemporaryFile"></a>NamedTemporaryFile</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    temp = NamedTemporaryFile(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    code = temp.name[-<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>返回时间太长，手动终止</p><p><code>NamedTemporaryFile</code>内部方法用的<code>random.choices</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RandomNameSequence</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;An instance of _RandomNameSequence generates an endless</span></span><br><span class="line"><span class="string">    sequence of unpredictable strings which can safely be incorporated</span></span><br><span class="line"><span class="string">    into file names.  Each string is eight characters long.  Multiple</span></span><br><span class="line"><span class="string">    threads can safely use the same instance at the same time.</span></span><br><span class="line"><span class="string">    _RandomNameSequence is an iterator.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    characters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rng</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur_pid = _os.getpid()</span><br><span class="line">        <span class="keyword">if</span> cur_pid != <span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            self._rng = _Random()</span><br><span class="line">            self._rng_pid = cur_pid</span><br><span class="line">        <span class="keyword">return</span> self._rng</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(self.rng.choices(self.characters, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p>稍微修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomNameSequence</span>:</span></span><br><span class="line">    characters = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rng</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur_pid = os.getpid()</span><br><span class="line">        <span class="built_in">print</span>(cur_pid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="keyword">if</span> cur_pid != <span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            self._rng = Random()</span><br><span class="line">            self._rng_pid = cur_pid</span><br><span class="line">        <span class="keyword">return</span> self._rng</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(self.rng.choices(self.characters, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p>测试内容(这里将次数缩小了10倍，由于耗时太长)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">counts = <span class="number">1000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="built_in">next</span>(RandomNameSequence())</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run counts: 1000000, total time: 21.044718625s, each time: 2.1044718625000002e-05s, collisions=0</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li><p>UUID只包含小写字母和数字，因此它的碰撞次数变高</p></li><li><p>NamedTemporaryFile 虽然也用的random.choices，但是使用了迭代器的形式，速度变慢（有待进一步测试）</p></li><li><p>优选random.choices 和 secrets.choice的方式</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://stackoverflow.com/questions/13484726/safe-enough-8-character-short-unique-random-string/55890039#55890039">python - safe enough 8-character short unique random string - Stack Overflow</a></p><p>[2] <a href="https://github.com/python/cpython/blob/b3ab4344d11edd890916be3526b07362182fb172/Lib/tempfile.py#L128">cpython/tempfile.py at b3ab4344d11edd890916be3526b07362182fb172 · python/cpython (github.com)</a></p>]]></content>
    
    
    <summary type="html">介绍几种生成短随机数的方法</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="随机数" scheme="https://blog.smart-lifestyle.cn/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>在 Apple M1 python3.9上安装psycopg2</title>
    <link href="https://blog.smart-lifestyle.cn/posts/6e90/"/>
    <id>https://blog.smart-lifestyle.cn/posts/6e90/</id>
    <published>2021-09-28T16:36:04.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>在MacBook M1上使用 pip install psycopg2时，报如下错误</p><p><code>Error: pg_config executable not found</code></p><p><img src="https://oss.smart-lifestyle.cn/file/dcn67.png" alt="BA27CAD4-A8E8-4216-A7C6-BEB0B0DEADBC"></p><p>是因为目前pip源里目标没有ARM版本的psycopg2，需要进行手动编译才可以用</p><p><img src="https://oss.smart-lifestyle.cn/file/itzxs.png" alt="D0DACCD0-12AD-4CA6-B93B-1182C36F0D9A"></p><ul><li><p>安装postgresql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install postgresql</span><br></pre></td></tr></table></figure></li><li><p>再次执行pip install即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/psycopg/psycopg2/issues/1286">psycopg2-binary support for M1 chipset · Issue #1286 · psycopg/psycopg2 (github.com)</a></p>]]></content>
    
    
    <summary type="html">在Apple M1做python开发，需要重新编译psycopg2</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="psycopg2" scheme="https://blog.smart-lifestyle.cn/tags/psycopg2/"/>
    
  </entry>
  
  <entry>
    <title>python校验url的完整性</title>
    <link href="https://blog.smart-lifestyle.cn/posts/2c0e/"/>
    <id>https://blog.smart-lifestyle.cn/posts/2c0e/</id>
    <published>2021-09-28T10:55:30.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>在抓取链接之后，我们需要对链接进行清洗，把格式不正确的链接去除，以便后面数据抓取</p><ul><li><a href="https://www.baidu.com/">https://www.baidu.com</a> ✅</li><li>httpz://<a href="http://www.baidu.com/">www.baidu.com</a> ❌</li><li># ❌</li><li><a href="ftp://a.com/file/1111">ftp://a.com/file/1111</a> ✅ </li></ul><p>以下总结两种方式来判断url的完整性</p><h3 id="通过python-urlparse库来实现"><a href="#通过python-urlparse库来实现" class="headerlink" title="通过python urlparse库来实现"></a>通过python urlparse库来实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这种没有协议头的，无法返回协议头，以及网络位置，把实际的网络位置定义为了路径部分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;&#x27;</span>, netloc=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;www.baidu.com&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 正确识别到url协议，以及网络位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;https&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 一个 # 返回一个‘空’对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;&#x27;</span>, netloc=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是向这种格式正确，但是url协议头不对的，虽然能解析，但是不会提示错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;ssp://www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;ssp&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>urlparse的功能强大，支持多种协议格式的解析</p><p>下面的例子将用户名、密码、服务器地址、端口等全部解析出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data = urlparse(<span class="string">&#x27;wss://username:password@192.168.1.1:90/s/data#video1&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; data.username</span><br><span class="line"><span class="string">&#x27;username&#x27;</span></span><br><span class="line">&gt;&gt;&gt; data.password</span><br><span class="line"><span class="string">&#x27;password&#x27;</span></span><br><span class="line">&gt;&gt;&gt; data.port</span><br><span class="line">90</span><br><span class="line">&gt;&gt;&gt; data.hostname</span><br><span class="line"><span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line"><span class="comment"># netloc解析范围应该是//.../中间的内容</span></span><br><span class="line">&gt;&gt;&gt; data.netloc</span><br><span class="line"><span class="string">&#x27;username:password@192.168.1.1:90&#x27;</span></span><br></pre></td></tr></table></figure><p>如果是用来解析http(s)，可以参考下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">myurl = <span class="string">&#x27;https://smart-lifestyle.cn/404.html&#x27;</span></span><br><span class="line">ret = urlparse(myurl)</span><br><span class="line"><span class="keyword">if</span> ret.scheme <span class="keyword">in</span> (<span class="string">&#x27;https&#x27;</span>, <span class="string">&#x27;http&#x27;</span>) <span class="keyword">and</span> ret.netloc:</span><br><span class="line">  fetch_data(url)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;URL is not vaild&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="通过正则表达匹配来实现"><a href="#通过正则表达匹配来实现" class="headerlink" title="通过正则表达匹配来实现"></a>通过正则表达匹配来实现</h3><p>也可以使用正则表达式实现自己的解析功能，比如我们只判断http和https的url格式，可以这么做</p><p>这里参考了<a href="https://github.com/django/django/blob/main/django/core/validators.py#L74">Django</a>的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ipv4_re = <span class="string">r&#x27;(?:0|25[0-5]|2[0-4]\d|1\d?\d?|[1-9]\d?)(?:\.(?:0|25[0-5]|2[0-4]\d|1\d?\d?|[1-9]\d?))&#123;3&#125;&#x27;</span></span><br><span class="line">ipv6_re = <span class="string">r&#x27;\[[0-9a-f:.]+\]&#x27;</span></span><br><span class="line">ul = <span class="string">&#x27;\u00a1-\uffff&#x27;</span></span><br><span class="line">domain_re = <span class="string">r&#x27;(?:\.(?!-)[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9-]&#123;1,63&#125;(?&lt;!-))*&#x27;</span></span><br><span class="line">tld_re = (</span><br><span class="line">        <span class="string">r&#x27;\.&#x27;</span>                                <span class="comment"># dot</span></span><br><span class="line">        <span class="string">r&#x27;(?!-)&#x27;</span>                             <span class="comment"># can&#x27;t start with a dash</span></span><br><span class="line">        <span class="string">r&#x27;(?:[a-z&#x27;</span> + ul + <span class="string">&#x27;-]&#123;2,63&#125;&#x27;</span>         <span class="comment"># domain label</span></span><br><span class="line">        <span class="string">r&#x27;|xn--[a-z0-9]&#123;1,59&#125;)&#x27;</span>              <span class="comment"># or punycode label</span></span><br><span class="line">        <span class="string">r&#x27;(?&lt;!-)&#x27;</span>                            <span class="comment"># can&#x27;t end with a dash</span></span><br><span class="line">        <span class="string">r&#x27;\.?&#x27;</span>                               <span class="comment"># may have a trailing dot</span></span><br><span class="line">    )</span><br><span class="line">hostname_re = <span class="string">r&#x27;[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9](?:[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9-]&#123;0,61&#125;[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9])?&#x27;</span></span><br><span class="line">host_re = <span class="string">&#x27;(&#x27;</span> + hostname_re + domain_re + tld_re + <span class="string">&#x27;|localhost)&#x27;</span></span><br><span class="line">regex = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">r&#x27;^(?:[a-z0-9.+-]*)://&#x27;</span>  <span class="comment"># scheme is validated separately</span></span><br><span class="line">        <span class="string">r&#x27;(?:[^\s:@/]+(?::[^\s:@/]*)?@)?&#x27;</span>  <span class="comment"># user:pass authentication</span></span><br><span class="line">        <span class="string">r&#x27;(?:&#x27;</span> + ipv4_re + <span class="string">&#x27;|&#x27;</span> + ipv6_re + <span class="string">&#x27;|&#x27;</span> + host_re + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="string">r&#x27;(?::\d&#123;1,5&#125;)?&#x27;</span>  <span class="comment"># port</span></span><br><span class="line">        <span class="string">r&#x27;(?:[/?#][^\s]*)?&#x27;</span>  <span class="comment"># resource path</span></span><br><span class="line">        <span class="string">r&#x27;\Z&#x27;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url1 = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    url2 = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">    url3 = <span class="string">&#x27;ht:/www.baidu.com&#x27;</span></span><br><span class="line">    url4 = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(regex.match(url1))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url2))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url3))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url4))</span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;re.Match object; span=(0, 21), match=<span class="string">&#x27;https://www.baidu.com&#x27;</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(0, 20), match=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span><br><span class="line">None</span><br><span class="line">None</span><br><span class="line">[Finished <span class="keyword">in</span> 78ms]</span><br></pre></td></tr></table></figure><p>在Django的代码里，对于url协议类型的判断它没有集成到这个正则匹配中，而是先判断url协议，再解析格式，这样他可以灵活定义支持哪些url协议</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">schemes = [<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>, <span class="string">&#x27;ftp&#x27;</span>, <span class="string">&#x27;ftps&#x27;</span>]</span><br><span class="line"><span class="comment"># Check if the scheme is valid.</span></span><br><span class="line">scheme = value.split(<span class="string">&#x27;://&#x27;</span>)[<span class="number">0</span>].lower()</span><br><span class="line"><span class="keyword">if</span> scheme <span class="keyword">not</span> <span class="keyword">in</span> self.schemes:</span><br><span class="line">    <span class="keyword">raise</span> ValidationError(self.message, code=self.code, params=&#123;<span class="string">&#x27;value&#x27;</span>: value&#125;)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://docs.python.org/3.0/library/urllib.parse.html">urllib.parse — Parse URLs into components — Python v3.0.1 documentation</a></p><p>[2] <a href="https://github.com/django/django/blob/main/django/core/validators.py#L74">django/validators.py at main · django/django (github.com)</a></p>]]></content>
    
    
    <summary type="html">校验url是否完整，比如http(s)://www.baidu.com</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="urlparse" scheme="https://blog.smart-lifestyle.cn/tags/urlparse/"/>
    
    <category term="正则表达" scheme="https://blog.smart-lifestyle.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/"/>
    
  </entry>
  
  <entry>
    <title>mac下git status中文乱码</title>
    <link href="https://blog.smart-lifestyle.cn/posts/a13/"/>
    <id>https://blog.smart-lifestyle.cn/posts/a13/</id>
    <published>2021-09-22T09:18:47.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>文件名字是中文时，mac下执行git status命令查看状态时，会显示一堆unicode编码的字符，不便于查看，因为默认情况下对于大于0x80的文件路径字符会进行编码，可以将<code>core.quotePath</code>设置为false，来取消强制编码</p><p><img src="https://oss.smart-lifestyle.cn/file/ck0gv.png" alt="image-20210922093322918"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/zym74.png" alt="image-20210922093348556"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://git-scm.com/docs/git-config">Git - git-config Documentation (git-scm.com)</a></p><p>[2] <a href="https://www.cnblogs.com/ayseeing/p/4268655.html">mac下git中文乱码 - 破男孩 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">在mac命令行下中文乱码的问题</summary>
    
    
    
    <category term="工具" scheme="https://blog.smart-lifestyle.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://blog.smart-lifestyle.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>node查看process架构</title>
    <link href="https://blog.smart-lifestyle.cn/posts/163c/"/>
    <id>https://blog.smart-lifestyle.cn/posts/163c/</id>
    <published>2021-09-22T08:59:52.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>现在node的新版本已经支持MacBook M1，即ARM版本的node，但是有时候需要老版本的node，目前我使用nvm可以切换node的版本， 查看当前node是x64还是ARM版本，可以通过下面的命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -p <span class="string">&quot;process.arch&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/uw2au.png" alt="image-20210922090704217"></p>]]></content>
    
    
    <summary type="html">在MacBook M1架构下使用了多版本的node，通过node -p &quot;process.arch&quot;查看当前node的编译架构</summary>
    
    
    
    <category term="node" scheme="https://blog.smart-lifestyle.cn/categories/node/"/>
    
    
    <category term="前端" scheme="https://blog.smart-lifestyle.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="node" scheme="https://blog.smart-lifestyle.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>github actions + serverless + hexo 搭建博客</title>
    <link href="https://blog.smart-lifestyle.cn/posts/186f/"/>
    <id>https://blog.smart-lifestyle.cn/posts/186f/</id>
    <published>2021-09-10T23:26:08.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2021年9月21日：新增404页面的展示</p><p>20201年9月10日：基本功能</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从最开始的ECS（阿里云云服务器）到后来的轻量应用服务器，都是在伴随着新用户打折的优惠上，续费下去，但是最近轻量应用服务器器到期了，在没有大优惠的情况下一年的费用需要600多软妹币，于是开始动手将博客部署到serverless服务上，基本上对于我这种访问量极低的博主来说，费用基本接近于0</p><p><img src="https://oss.smart-lifestyle.cn/file/2z2j0.png" alt="image-20210911093216962"></p><h2 id="serverless的选择"><a href="#serverless的选择" class="headerlink" title="serverless的选择"></a>serverless的选择</h2><p>经过对比，选择了腾讯云的<a href="https://console.cloud.tencent.com/sls">Serverless应用</a>，本身博客的内容都是静态文件，而且腾讯也是将静态网站托管到它的对象存储服务上。虽然也可以直接在对象存储直接托管，但是腾讯云的Serverless应用在部署上提供了代码托管方式，检测到代码分支上的变动，会自动触发构建</p><p><img src="https://oss.smart-lifestyle.cn/file/by7fr.png" alt="image-20210911095143015"></p><p>下面开干！</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="开通serverless应用，建站"><a href="#开通serverless应用，建站" class="headerlink" title="开通serverless应用，建站"></a>开通serverless应用，建站</h3><p>新建应用</p><p><img src="https://oss.smart-lifestyle.cn/file/bifuy.png" alt="image-20210911100249575"></p><p>选择快速部署一个Website静态网站</p><p><img src="https://oss.smart-lifestyle.cn/file/1i7ek.png" alt="image-20210911100406421"></p><p>开启跨域访问配置（如果你的网站访问第三方资源）</p><p><img src="https://oss.smart-lifestyle.cn/file/4q9e7.png" alt="image-20210911100923927"></p><p>其他按照流程点击下一步执行就可以</p><p>完成之后，点击访问地址可以看到一个简单的Demo页面。同时也在对象储存中创建了一个跟网址前缀一样的存储桶（这个地址就是对象存储静态网站功能提供的）</p><p><img src="https://oss.smart-lifestyle.cn/file/xsnza.png" alt="image-20210911101411755"></p><h3 id="绑定域名和证书"><a href="#绑定域名和证书" class="headerlink" title="绑定域名和证书"></a>绑定域名和证书</h3><p>这里先不着急去部署我们的网站内容，先去绑定我们自己的域名以及https证书，要不然你的博客只能通过腾讯对象存储提供的一个四级域名去访问</p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>绑定域名之前第一是你必须有自己的域名，各个云厂商基本都提供域名注册服务，这里注册过程不再介绍，第二是域名需要备案，否则也无法绑定成功</p><p><img src="https://oss.smart-lifestyle.cn/file/7tuxq.png" alt="image-20210911102552375"></p><p>在对象存储服务中，找到你博客对应的桶</p><p><img src="https://oss.smart-lifestyle.cn/file/5a2pl.png" alt="image-20210911102232485"></p><p>点击进去之后，选择域名与传输管理中的自定义源站域名</p><p><img src="https://oss.smart-lifestyle.cn/file/66q6f.png" alt="image-20210911102349968"></p><p>在自定义源站域名中添加域名</p><p><img src="https://oss.smart-lifestyle.cn/file/p9c2k.png" alt="image-20210911102725447"></p><p>同时，你也需要在你域名服务商那里增加一项CNAME解析</p><p><img src="https://oss.smart-lifestyle.cn/file/fbz1o.png" alt="image-20210911103016315"></p><p>这是你通过http://自定义域名可以访问到你的网站</p><h4 id="绑定证书"><a href="#绑定证书" class="headerlink" title="绑定证书"></a>绑定证书</h4><p>如果你不需要让用户通过https访问你的博客，那可以忽略本节，但是强烈建议开启https，毕竟安全又免费，可以在这个<a href="https://freessl.cn/">网站</a>上申请免费的证书。拿到证书（公钥和私钥）之后， 点击绑定证书，如果你不是在腾讯云申请的证书，选择自有证书，将公钥、私钥粘贴进去就可以。腾讯云证书直接在证书列表选择就可以</p><p><img src="https://oss.smart-lifestyle.cn/file/yasz4.png" alt="image-20210911103552585"></p><p>以上操作完成之后，如果你通过https://你的博客域名，访问还是显示的没有证书，因为默认情况下，还是将https的访问重新定向回了http，我们需要修改储存桶的配置才可以使用https</p><p>在静态网站配置中，使能强制HTTPS，默认没有使能</p><p><img src="https://oss.smart-lifestyle.cn/file/xg2x7.png" alt="image-20210911104131084"></p><p>此时再通过https://你的博客域名就可以访问到你的博客（可能需要手动清除一下缓存，或者开启一个浏览器隐私窗口）</p><h2 id="部署hexo博客"><a href="#部署hexo博客" class="headerlink" title="部署hexo博客"></a>部署hexo博客</h2><p>大致流程为：使用github管理源码（md文件），并通过github actions将hexo内容编译为静态文件，并推送到新的分支gh_pages，在腾讯云Serverless应用那里，会监测gh_pages，自动构建</p><p><img src="https://oss.smart-lifestyle.cn/file/2vses.png" alt="流程"></p><h3 id="github-actions实现"><a href="#github-actions实现" class="headerlink" title="github actions实现"></a>github actions实现</h3><p>新建一个workflow</p><p><img src="https://oss.smart-lifestyle.cn/file/zb5z8.png" alt="image-20210911120703454"></p><p>具体实现如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">and</span> <span class="string">publish</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the workflow will run</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">node</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm ci</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">tatic</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">robots.txt</span> <span class="string">to</span> <span class="string">public</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cp</span> <span class="string">robots.txt</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">public</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REMOTE_REPO:</span> <span class="string">https://$&#123;&#123;</span> <span class="string">secrets.GIT_TOKEN</span> <span class="string">&#125;&#125;@github.com/$&#123;&#123;</span> <span class="string">secrets.GIT_REPOSITORY</span> <span class="string">&#125;&#125;.git</span></span><br><span class="line">          <span class="attr">REMOTE_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public &amp;&amp; git init &amp;&amp; git add .</span></span><br><span class="line"><span class="string">          git config user.name &quot;$&#123;&#123; secrets.GIT_USERNAME &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config user.email &quot;$&#123;&#123; secrets.GIT_USEREMAIL &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          echo -n &#x27;Files to Commit:&#x27; &amp;&amp; ls -l | wc -l</span></span><br><span class="line"><span class="string">          git commit -m &quot;github actions build at $(TZ=ANY-8 date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">          git push --force $REMOTE_REPO master:$REMOTE_BRANCH &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo build successfully, now you can redeploy your website</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      </span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>steps中包括如下actions</p><ol><li><p>actions/checkout@v2 </p><p>获取master分支代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure></li><li><p>actions/setup-node@v2</p><p>安装node，版本为12.x</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">node</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>npm install -g hexo-cli</p><p>安装hexo cli</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure></li><li><p>actions/cache@v1 | npm ci</p><p>安装npm依赖包，并使能缓存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">ci</span></span><br></pre></td></tr></table></figure></li><li><p>hexo clean | hexo g</p><p>清空并部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">tatic</span> <span class="string">files</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         hexo clean</span></span><br><span class="line"><span class="string">         hexo g</span></span><br></pre></td></tr></table></figure></li><li><p>cp robots.txt ./public</p><p>将自定义限制爬虫文件复制到public即生成的静态文件的文件夹中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">robots.txt</span> <span class="string">to</span> <span class="string">public</span> <span class="string">directory</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">cp</span> <span class="string">robots.txt</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure></li><li><p>将代码推送到gh-pages分支</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">public</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REMOTE_REPO:</span> <span class="string">https://$&#123;&#123;</span> <span class="string">secrets.GIT_TOKEN</span> <span class="string">&#125;&#125;@github.com/$&#123;&#123;</span> <span class="string">secrets.GIT_REPOSITORY</span> <span class="string">&#125;&#125;.git</span></span><br><span class="line">          <span class="attr">REMOTE_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public &amp;&amp; git init &amp;&amp; git add .</span></span><br><span class="line"><span class="string">          git config user.name &quot;$&#123;&#123; secrets.GIT_USERNAME &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config user.email &quot;$&#123;&#123; secrets.GIT_USEREMAIL &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          echo -n &#x27;Files to Commit:&#x27; &amp;&amp; ls -l | wc -l</span></span><br><span class="line"><span class="string">          git commit -m &quot;github actions build at $(TZ=ANY-8 date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">          git push --force $REMOTE_REPO master:$REMOTE_BRANCH &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">build</span> <span class="string">successfully,</span> <span class="string">now</span> <span class="string">you</span> <span class="string">can</span> <span class="string">redeploy</span> <span class="string">your</span> <span class="string">website</span></span><br></pre></td></tr></table></figure><p>这里面涉及到的secret变量可以在，代码仓库secrets中添加</p><p><img src="https://oss.smart-lifestyle.cn/file/buzmw.png" alt="image-20210911121933711"></p><p>​    </p><p>补充：</p><p><code>$(TZ=ANY-8 date +&#39;%Y-%m-%d %H:%M:%S&#39;)</code> github action默认时区为UTC时间，这是TZ=ANY-8将时区变为UCT8时间</p><p>​    </p></li></ol><h3 id="在Serverless中配置代码托管"><a href="#在Serverless中配置代码托管" class="headerlink" title="在Serverless中配置代码托管"></a>在Serverless中配置代码托管</h3><p>在开发部署中选择代码托管，选择github（需要授权代码源），然后选择blog仓库的gh-pages分支，选择自动触发构建</p><p><img src="https://oss.smart-lifestyle.cn/file/x1n8d.png" alt="image-20210911122509404"></p><p>这样我们的工作流就配置完了</p><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><ol><li><p>在hexo中增加404.html，qq404.html文件，放在source文件夹下面</p><p><img src="https://oss.smart-lifestyle.cn/file/j193w.png" alt="image-20210922000046337"></p><p>为什么是两个404文件？qq404里面放的是腾讯公益404页面，但是我想在这个页面上增加一个返回我的主页的按钮，需要通过iframe嵌套这个腾讯404页面，代码如下。</p><p>qq404.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;https://blog.smart-lifestyle.cn/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>404.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#222&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo 5.4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;180x180&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;32x32&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;16x16&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon-16x16.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;mask-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#222&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.button</span> &#123;<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>; <span class="attribute">border-radius</span>: <span class="number">4px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">background-color</span>: <span class="number">#222</span>; <span class="attribute">color</span>: <span class="number">#eee</span>; &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>simplezhao的博客 - 专注于物联网架构和产品<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.href=&#x27;https://blog.smart-lifestyle.cn&#x27;&quot;</span>&gt;</span>回到我的主页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;./qq404.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在hexo _config.yml中修改skip_render，自动从source文件夹下查找，所有不要加source</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="number">404.</span><span class="string">html</span>, <span class="string">qq404.html</span>, <span class="string">&#x27;*.html&#x27;</span>, <span class="string">robots.txt</span>]</span><br></pre></td></tr></table></figure></li><li><p>在腾讯对象存储，保存网页的桶中找到静态网站的配置，更改错误文档为404.html</p><p><img src="https://oss.smart-lifestyle.cn/file/uv767.png" alt="image-20210922001015308"></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个流程配置完之后，我们在本地写完博客，提交到github之后，就可以按照流水线自动更新在线博客网站。</p><p><img src="https://oss.smart-lifestyle.cn/file/0jhjn.png" alt="image-20210911124903269"></p><p>一点感悟：</p><p>腾讯云的Serverless应用整合了自家的各种服务，比如对象存储的网站托管、而代码托管使用的coding来获取授权</p><p><img src="https://oss.smart-lifestyle.cn/file/mub2b.png" alt="image-20210911003110757"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/marketplace/actions/hexo-action">Hexo Action · Actions · GitHub Marketplace</a></p><p>[2] <a href="https://github.com/BryanSchuetz/jekyll-deploy-gh-pages/blob/master/deploy/entrypoint.sh">jekyll-deploy-gh-pages/entrypoint.sh at master · BryanSchuetz/jekyll-deploy-gh-pages (github.com)</a></p><p>[3] <a href="https://github.com/NickSchimek/deploy_jamstack_action/blob/main/deploy.sh">deploy_jamstack_action/deploy.sh at main · NickSchimek/deploy_jamstack_action (github.com)</a></p><p>[4] <a href="https://zhuanlan.zhihu.com/p/161969042">使用 GitHub Actions 自动部署 Hexo 博客到 GitHub Pages - 知乎 (zhihu.com)</a></p><p>[5] <a href="https://unix.stackexchange.com/questions/104088/why-does-tz-utc-8-produce-dates-that-are-utc8">timezone - Why does TZ=UTC-8 produce dates that are UTC+8? - Unix &amp; Linux Stack Exchange</a></p><p>[6] <a href="https://freessl.cn/">FreeSSL首页 - FreeSSL.cn一个提供免费HTTPS证书申请的网站</a></p><p>[7] <a href="https://hexo.io/docs/configuration#Directory">Configuration | Hexo</a></p><p>[8] <a href="https://iitii.github.io/2019/02/15/1/">Hexo跳过指定文件的渲染 | Hello Memo (iitii.github.io)</a></p>]]></content>
    
    
    <summary type="html">通过github actions将hexo博客编译后生成静态文件，然后serverless自动获取分支代码部署网站</summary>
    
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/categories/serverless/"/>
    
    
    <category term="hexo" scheme="https://blog.smart-lifestyle.cn/tags/hexo/"/>
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>在apple M1上构建x86_64 Docker镜像</title>
    <link href="https://blog.smart-lifestyle.cn/posts/de6/"/>
    <id>https://blog.smart-lifestyle.cn/posts/de6/</id>
    <published>2021-09-05T13:40:26.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>默认通过<code>docker build</code>方式构建的镜像时arm64的版本，可以通过<code>docker inspect IMAGE_ID</code>查看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># docker image inspect <span class="number">0382</span>b9b17bdb</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;Architecture&quot;</span>: <span class="string">&quot;arm64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Variant&quot;</span>: <span class="string">&quot;v8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Size&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">        <span class="attr">&quot;VirtualSize&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的镜像时没有办法在Intel x86/64的容器服务中运行的，我们可以选择基于arm版本服务器的容器服务，更好的选择是在M1上编译 x86架构的容器镜像</p><p>Docker Desktop for Mac M1中集成了一个buildx的工具，可以方便我们编译各种跨平台的容器镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker buildx ls</span><br><span class="line"></span><br><span class="line">desktop-linux desktop-linux   running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br><span class="line">default *       docker</span><br><span class="line">  default       default         running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br></pre></td></tr></table></figure><p>使用docker buildx build来构建X86/64 docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64 . -t xxx</span><br></pre></td></tr></table></figure><p>之后就可按照正常的docker tag、docker push进行操作</p><p>更多的命令可以参考官方文档</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.jaimyn.dev/how-to-build-multi-architecture-docker-images-on-an-m1-mac/">How to build x86 (and others!) Docker images on an M1 Mac – Jaimyn’s Blog</a></p><p>[2] <a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md">buildx/buildx_build.md at master · docker/buildx (github.com)</a></p><p>[3] <a href="https://docs.docker.com/buildx/working-with-buildx/">Docker Buildx | Docker Documentation</a></p>]]></content>
    
    
    <summary type="html">在apple M1设备上使用docker buildx build构建x86_64 的镜像</summary>
    
    
    
    <category term="Devops" scheme="https://blog.smart-lifestyle.cn/categories/Devops/"/>
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
    <category term="Apple M1" scheme="https://blog.smart-lifestyle.cn/tags/Apple-M1/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu更改主机名</title>
    <link href="https://blog.smart-lifestyle.cn/posts/62e8/"/>
    <id>https://blog.smart-lifestyle.cn/posts/62e8/</id>
    <published>2021-07-01T22:17:51.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<ul><li>增加或者修改<code>/etc/hostname</code>，添加新的主机名</li><li>修改<code>/etc/hosts</code>，在127.0.0.1中添加新的主机名</li><li>如果是在云上运行vm实例，需要修改上面的<code>/etc/cloud/cloud.cfg</code>，否则重启机器后，hostname会变为默认值😭；找到<code>preserve_hostname</code>，将其值改为<code>true</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.myfreax.com/how-to-change-hostname-on-ubuntu-20-04/">如何在Ubuntu 20.04上更改主机名 (myfreax.com)</a></p>]]></content>
    
    
    <summary type="html">修改公有云上linux VM主机名</summary>
    
    
    
    <category term="运维" scheme="https://blog.smart-lifestyle.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="ubuntu" scheme="https://blog.smart-lifestyle.cn/tags/ubuntu/"/>
    
    <category term="运维" scheme="https://blog.smart-lifestyle.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>linux shell参数传递</title>
    <link href="https://blog.smart-lifestyle.cn/posts/fab/"/>
    <id>https://blog.smart-lifestyle.cn/posts/fab/</id>
    <published>2021-07-01T21:10:52.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>$#</th><th>参数数量</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>$n</td><td>表示第n个参数，n为0时表示运行的脚本名</td></tr><tr><td>$@</td><td>“$1” “$2” “$3”…. 传递的多个参数</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;total params: $#&quot;</span><br><span class="line">echo &quot;filename: $0&quot;</span><br><span class="line">echo &quot;param1: $1&quot;</span><br><span class="line">echo &quot;param2: $2&quot;</span><br><span class="line">echo &quot;param3: $3&quot;</span><br><span class="line">echo &quot;==============&quot;</span><br><span class="line">for i in &quot;$@&quot;; do</span><br><span class="line">    echo &quot;param: $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total params: 2</span><br><span class="line">filename: ./test.sh</span><br><span class="line">param1: x1</span><br><span class="line">param2: x2</span><br><span class="line">param3:</span><br><span class="line">==============</span><br><span class="line">param: x1</span><br><span class="line">param: x2</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">Shell 传递参数 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <summary type="html">在shell脚本中获取执行时，传递的参数</summary>
    
    
    
    <category term="linux" scheme="https://blog.smart-lifestyle.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.smart-lifestyle.cn/tags/linux/"/>
    
    <category term="shell" scheme="https://blog.smart-lifestyle.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>SQL连接字符串中密码包含特殊字符</title>
    <link href="https://blog.smart-lifestyle.cn/posts/1538/"/>
    <id>https://blog.smart-lifestyle.cn/posts/1538/</id>
    <published>2021-07-01T16:59:35.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>生产环境中，数据库的密码会包含特殊字符，如果包含了<code>@</code>等符号，会被create_engine识别错误。</p><p>可以对密码进行url编码，使用<code>urllib.parse.quote_plus</code></p><blockquote><p>As the URL is like any other URL, <strong>special characters such as those that may be used in the password need to be URL encoded to be parsed correctly.</strong>. Below is an example of a URL that includes the password <code>&quot;kx%jj5/g&quot;</code>, where the percent sign and slash characters are represented as <code>%25</code> and <code>%2F</code>, respectively:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">username = <span class="string">&#x27;scoot&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;@#@%/g&#x27;</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&#x27;postgresql://<span class="subst">&#123;username&#125;</span>:<span class="subst">&#123;urllib.parse.quote_plus(password)&#125;</span>@localhost:5432/mydatabase&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.sqlalchemy.org/en/14/core/engines.html">Engine Configuration — SQLAlchemy 1.4 Documentation</a></p>]]></content>
    
    
    <summary type="html">SQLAlchemy连接字符串中密码包含特殊字符，可以进行url编码</summary>
    
    
    
    <category term="SQLAlchemy" scheme="https://blog.smart-lifestyle.cn/categories/SQLAlchemy/"/>
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/tags/SQL/"/>
    
    <category term="SQLAlchemy" scheme="https://blog.smart-lifestyle.cn/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>python文件名操作</title>
    <link href="https://blog.smart-lifestyle.cn/posts/bea3/"/>
    <id>https://blog.smart-lifestyle.cn/posts/bea3/</id>
    <published>2021-06-30T13:41:58.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>在进行文件上传或者文件转换时，需要进行文件上传（读取完整的本地文件路径），文件保存（仅文件名），格式转换（不包含后缀的文件名以及后缀名）</p><p>使用到python库有：</p><ul><li><p>os.path.splitext()</p><p>分离文件名和文件后缀，以最后一个’.’来获取文件后缀</p></li><li><p>os.path.split()</p><p>分离文件路径和文件名</p></li></ul><ol><li>os.path.splitext()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> splitext</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose&#x27;</span>, <span class="string">&#x27;.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入是一个不包含路径的隐藏文件格式，后缀返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;.bashrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;.bashrc&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>os.path.split()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> split</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik&#x27;</span>, <span class="string">&#x27;docker-compose.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入为一个不含路径的以.开头的文件，路径返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;.bascrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;.bascrc&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/3/library/os.path.html">os.path — Common pathname manipulations — Python 3.9.6 documentation</a></p><p>[2] <a href="https://blog.csdn.net/lilongsy/article/details/99853925">Python获取文件路径、文件名和扩展名_小龙在线-CSDN博客_python 获取路径文件名</a></p>]]></content>
    
    
    <summary type="html">获取文件路径、文件名、文件后缀</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="file" scheme="https://blog.smart-lifestyle.cn/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>修改SQL Server连接字符串</title>
    <link href="https://blog.smart-lifestyle.cn/posts/3178/"/>
    <id>https://blog.smart-lifestyle.cn/posts/3178/</id>
    <published>2021-06-30T11:13:50.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>com.microsoft.sql server.jdbc.sqlserverException:驱动程序无法使用安全套接字层（SSL）加密建立到SQL Server的安全连接</p></blockquote><p>在高级设置中trustServerCertificate改为true即可</p><p><img src="https://oss.smart-lifestyle.cn/file/cs6v8.png" alt="image-20210630111813541"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.baooytra.com/knowledge/questions/56246/modifying-sql-server-connection-string.html?smartspace=fme-desktop-getting-started_2">修改SQL Server连接字符串-FME社区 - 亚搏在线 (baooytra.com)</a></p>]]></content>
    
    
    <summary type="html">在DataGrip中解决SQL Server连接报“驱动程序无法使用安全套接字层（SSL）加密建立到SQL Server的安全连接”</summary>
    
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/tags/SQL/"/>
    
    <category term="sqlserverException" scheme="https://blog.smart-lifestyle.cn/tags/sqlserverException/"/>
    
  </entry>
  
  <entry>
    <title>函数计算中python依赖包打包</title>
    <link href="https://blog.smart-lifestyle.cn/posts/990c/"/>
    <id>https://blog.smart-lifestyle.cn/posts/990c/</id>
    <published>2021-06-30T10:09:58.000Z</published>
    <updated>2022-05-05T14:53:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>以下操作使用于华为云的<a href="https://support.huaweicloud.com/functiongraph/">functiongraph</a>和腾讯云的<a href="https://cloud.tencent.com/document/product/583/9199">serverless</a></p><p><em>！有些包需要编译，因此建议在centos7中进行操作</em></p><h3 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h3><ol><li>Centos7 + python3.6环境 + zip</li><li>requirements.txt</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><p>安装依赖到本地文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">mkdir new_dir</span><br><span class="line"><span class="comment"># python依赖包安装到指定目录, -t将所有依赖安装到new_dir目录</span></span><br><span class="line">pip install -r requirements-prod.txt -t  new_dir/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>打包成zip包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到安装目录文件夹里</span></span><br><span class="line"><span class="built_in">cd</span> new_dir</span><br><span class="line"><span class="comment"># 压缩为zip包(打包的为里面的文件，不是new_dir这个目录)</span></span><br><span class="line">zip -rq package_name.1.1.zip *</span><br></pre></td></tr></table></figure></li><li><p>上传</p><p>根据各个云的要求，将zip包上传，如果zip包太大，一般都要求先上传到对象存储中</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/583/9702">云函数 部署函数 - 操作指南 - 文档中心 - 腾讯云 (tencent.com)</a></p><p>[2] <a href="https://support.huaweicloud.com/functiongraph_faq/functiongraph_03_0343.html">如何制作函数依赖包？_函数工作流 FunctionGraph_常见问题_通用问题_华为云 (huaweicloud.com)</a></p>]]></content>
    
    
    <summary type="html">如何在函数计算中为python打包依赖包</summary>
    
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/categories/serverless/"/>
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/tags/serverless/"/>
    
    <category term="function" scheme="https://blog.smart-lifestyle.cn/tags/function/"/>
    
  </entry>
  
</feed>
