<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simple&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.smart-lifestyle.cn/"/>
  <updated>2021-03-31T16:26:25.050Z</updated>
  <id>https://blog.smart-lifestyle.cn/</id>
  
  <author>
    <name>simple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git abc tutorial</title>
    <link href="https://blog.smart-lifestyle.cn/posts/de34/"/>
    <id>https://blog.smart-lifestyle.cn/posts/de34/</id>
    <published>2021-03-31T14:19:56.000Z</published>
    <updated>2021-03-31T16:26:25.050Z</updated>
    
    <content type="html"><![CDATA[<h1>git-abc</h1><p>下面介绍经常用到且最基本的git 命令</p><h2 id="仓库管理">仓库管理</h2><h3 id="创建本地仓库">创建本地仓库</h3><ul><li><code>git init</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir git-abc</span><br><span class="line"><span class="built_in">cd</span> git-abc</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/qm2vb.png" alt="image-20210331222402099"></p><h3 id="添加远程分支">添加远程分支</h3><ul><li><code>git remote add &lt;shortname&gt; &lt;url&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/simplezhao/git-abc.git</span><br></pre></td></tr></table></figure><h3 id="抓取远程代码">抓取远程代码</h3><ul><li><code>git fetch &lt;remote&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/48gpy.png" alt="image-20210331223237496"></p><h3 id="查看某个远程仓库">查看某个远程仓库</h3><ul><li><code>git remote show &lt;remote&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/50dkt.png" alt="image-20210331223628444"></p><h3 id="同步远程分支">同步远程分支</h3><ul><li><code>git checkout -b &lt;branch&gt; &lt;remote&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b main origin/main</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/vkntn.png" alt="image-20210331224921389"></p><h2 id="代码管理">代码管理</h2><h3 id="查看当前分支状态">查看当前分支状态</h3><ul><li><code>git status</code></li></ul><ol><li>修改readme.md文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>提示文件被修改</p><p><img src="https://oss.smart-lifestyle.cn/file/jjthz.png" alt="image-20210331225856222"></p><ol start="2"><li>新增一个readme_en.md文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>提示有未跟踪的文件</p><p><img src="https://oss.smart-lifestyle.cn/file/ttydm.png" alt="image-20210331230055526"></p><h3 id="添加文件">添加文件</h3><ul><li><p><code>git add .</code> 添加所有文件</p></li><li><p><code>git add &lt;file&gt;</code>添加指定文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>添加成功后，显示准备提交的文件</p><p><img src="https://oss.smart-lifestyle.cn/file/2m0ge.png" alt="image-20210331230400289"></p><h3 id="提交文件">提交文件</h3><ul><li><code>git commit -a</code> 在默认编辑器内增加本次提交内容</li><li><code>git commit -m &lt;message&gt;</code>简短提交</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"update readme file and add new readme for english version"</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/xkx4s.png" alt="image-20210331230900239"></p><h3 id="推送到远程分支">推送到远程分支</h3><ul><li><code>git push &lt;shortname&gt; &lt;branch&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/136q4.png" alt="image-20210331231029318"></p><h3 id="查看提交记录">查看提交记录</h3><ul><li><code>git log</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/wvarp.png" alt="image-20210331231130554"></p><h2 id="代码合并">代码合并</h2><p>多人开发同一个项目，需要共同维护同一个代码库，假如每个人负责独立的模块，不会涉及到代码冲突</p><p>某次提交时，提示如下问题</p><p><img src="https://oss.smart-lifestyle.cn/file/d62zw.png" alt="image-20210331232246543"></p><p>这是因为远程分支要优先本地的分支，需要先执行git pull，然后在执行git push命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>执行pull时会提示Merge信息</p><p><img src="https://oss.smart-lifestyle.cn/file/xq0ww.png" alt="image-20210331232418971"></p><p>完成并退出编辑后，提示pull信息</p><p><img src="https://oss.smart-lifestyle.cn/file/ct9wp.png" alt="image-20210331232514825"></p><p>再次执行git push origin main，显示提交成功</p><p><img src="https://oss.smart-lifestyle.cn/file/lwto3.png" alt="image-20210331232632195"></p><h2 id="分支管理">分支管理</h2><h3 id="创建新的分支">创建新的分支</h3><ul><li><code>git branch &lt;branch&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch hotfix</span><br><span class="line">git checkout hotfix</span><br></pre></td></tr></table></figure><h3 id="分支合并">分支合并</h3><p>在上一步操作，因为系统出现bug，紧急创建一个分支，然后在这个分支上进行修复，修改测试验证完毕后，从hotfix分支合并到main分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge hotfix</span><br></pre></td></tr></table></figure><p><img src="https://oss.smart-lifestyle.cn/file/8q60h.png" alt="image-20210331235235214"></p><h3 id="分支删除">分支删除</h3><ul><li><code>git branch -d &lt;branch&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d hotfix</span><br></pre></td></tr></table></figure><h3 id="打标签">打标签</h3><ul><li><p><code>git tag</code></p></li><li><p><code>git tag -a &lt;version&gt; -m &lt;message&gt;</code></p></li></ul><p>通过<code>git tag</code>查看仓库内已经存在的标签列表</p><h4 id="创建标签">创建标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a <span class="string">'1.0'</span> -m <span class="string">"first version"</span></span><br></pre></td></tr></table></figure><p>也可以使用轻量级标签</p><p><code>git tag 1.0-a</code></p><h4 id="共享标签">共享标签</h4><p>默认情况下 git push命令不会把标签传送到远程仓库，必须显式地推送标签到服务器，类似于推送代码</p><p><code>git push &lt;shortname&gt; &lt;tagname&gt;</code></p><p>如果想一次推送多个标签，可以使用如下命令</p><p><code>git push &lt;shortname&gt; --tags</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin 1.0</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p>推送指定标签</p><p><img src="https://oss.smart-lifestyle.cn/file/o6cju.png" alt="image-20210401001342160"></p><p>推送所有标签</p><p><img src="https://oss.smart-lifestyle.cn/file/fyqxl.png" alt="image-20210401001405265"></p><h2 id="git-配置">git 配置</h2><p>使用<code>git config -l </code>查看当前仓库配置</p><h3 id="配置全局信息">配置全局信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><h3 id="配置当前仓库信息">配置当前仓库信息</h3><p>和全局区别在于去掉–global标记</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"yourname"</span></span><br><span class="line">git config user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] <a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Book: Pro Git</a></p>]]></content>
    
    <summary type="html">
    
      最常用且最基本的git用法
    
    </summary>
    
    
      <category term="git" scheme="https://blog.smart-lifestyle.cn/categories/git/"/>
    
    
      <category term="git" scheme="https://blog.smart-lifestyle.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>python web--flask jsonify unicode</title>
    <link href="https://blog.smart-lifestyle.cn/posts/9b/"/>
    <id>https://blog.smart-lifestyle.cn/posts/9b/</id>
    <published>2021-03-31T08:10:09.000Z</published>
    <updated>2021-03-31T08:16:22.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>类似于json.dumps中ensure_ascii的配置，在flask中也有类似配置，来避免jsonify时，返回unicode编码字符</p></blockquote><p>在flask config中加入<code>app.config['JSON_AS_ASCII'] = False</code>来避免jsonify对非ascii字符进行unicode编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(app_config)</span><br><span class="line">app.config.from_mapping(</span><br><span class="line">    SQLALCHEMY_DATABASE_URI=<span class="string">f"postgresql+psycopg2://<span class="subst">&#123;app_config.DB_USER&#125;</span>:<span class="subst">&#123;app_config.DB_PASSWORD&#125;</span>"</span></span><br><span class="line">                            <span class="string">f"@<span class="subst">&#123;app_config.DB_HOST&#125;</span>:<span class="subst">&#123;app_config.DB_PORT&#125;</span>/<span class="subst">&#123;app_config.DB_NAME&#125;</span>"</span>,</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># SQLALCHEMY_ECHO=True</span></span><br><span class="line">)</span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] [<a href="https://stackoverflow.com/questions/37531067/how-to-prevent-unicode-representation-for-latin1-characters" target="_blank" rel="noopener">How to prevent Unicode representation for Latin1 characters?</a>]</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;类似于json.dumps中ensure_ascii的配置，在flask中也有类似配置，来避免jsonify时，返回unicode编码字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在flask config中加入&lt;code&gt;app.config[&#39;JSON_AS_ASCII&#39;] = False&lt;/code&gt;来避免jsonify对非ascii字符进行unicode编码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.config.from_object(app_config)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.config.from_mapping(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SQLALCHEMY_DATABASE_URI=&lt;span class=&quot;string&quot;&gt;f&quot;postgresql+psycopg2://&lt;span class=&quot;subst&quot;&gt;&amp;#123;app_config.DB_USER&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;&amp;#123;app_config.DB_PASSWORD&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;string&quot;&gt;f&quot;@&lt;span class=&quot;subst&quot;&gt;&amp;#123;app_config.DB_HOST&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;&amp;#123;app_config.DB_PORT&amp;#125;&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;&amp;#123;app_config.DB_NAME&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SQLALCHEMY_TRACK_MODIFICATIONS=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# SQLALCHEMY_ECHO=True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.config[&lt;span class=&quot;string&quot;&gt;&#39;JSON_AS_ASCII&#39;&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;[1] [&lt;a href=&quot;https://stackoverflow.com/questions/37531067/how-to-prevent-unicode-representation-for-latin1-characters&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to prevent Unicode representation for Latin1 characters?&lt;/a&gt;]&lt;/p&gt;
    
    </summary>
    
    
      <category term="flask" scheme="https://blog.smart-lifestyle.cn/categories/flask/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="flask" scheme="https://blog.smart-lifestyle.cn/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>python json.dumps unicode</title>
    <link href="https://blog.smart-lifestyle.cn/posts/b1/"/>
    <id>https://blog.smart-lifestyle.cn/posts/b1/</id>
    <published>2021-03-31T07:54:04.000Z</published>
    <updated>2021-03-31T08:06:36.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在dumps/dump中使用ensure_ascii=False，来手动编码为UTF8格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 输出为Unicode编码，不便于可视化</span></span><br><span class="line">&gt; json.dumps(<span class="string">"我爱China🇨🇳"</span>)</span><br><span class="line"><span class="string">'"\\u6211\\u7231China\\ud83c\\udde8\\ud83c\\uddf3"'</span></span><br><span class="line"></span><br><span class="line">&gt; json.dumps(<span class="string">"我爱China🇨🇳"</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="string">'"我爱China🇨🇳"'</span></span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] <a href="https://stackoverflow.com/questions/18337407/saving-utf-8-texts-with-json-dumps-as-utf8-not-as-u-escape-sequence" target="_blank" rel="noopener">json dumps unicode</a></p>]]></content>
    
    <summary type="html">
    
      处理json dumps时中文显示unicode编码
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="json" scheme="https://blog.smart-lifestyle.cn/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>kombu.exceptions.EncodeError XXXX is not JSON serializable</title>
    <link href="https://blog.smart-lifestyle.cn/posts/3277/"/>
    <id>https://blog.smart-lifestyle.cn/posts/3277/</id>
    <published>2021-03-31T06:02:05.000Z</published>
    <updated>2021-03-31T06:51:44.068Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录在使用celery时，任务函数参数序列化问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@celery_app.task(name="create_subscription")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_subscription_file</span><span class="params">(req: SubscriptionRequest)</span>:</span></span><br><span class="line"></span><br><span class="line">    req = SubscriptionRequest(**kwargs)</span><br><span class="line">    subscription_count = req.count</span><br><span class="line">    run_times = math.ceil(subscription_count / <span class="number">200</span>)</span><br><span class="line">    results = &#123;</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"validDateTime"</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionRequest</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    bearer_token: str = <span class="literal">None</span></span><br><span class="line">    validDateTime: datetime = <span class="literal">None</span></span><br><span class="line">    validPeriodTime: int = <span class="number">12</span></span><br><span class="line">    count: int = <span class="number">200</span></span><br><span class="line">    deviceTypeId: int = <span class="number">2</span></span><br><span class="line">    subscriptionLevelId: int = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_json</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.json(exclude=&#123;<span class="string">'bearer_token'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator('validDateTime')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_default_date</span><span class="params">(cls, v)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            v = get_default_valid_datetime()</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.json()</span><br></pre></td></tr></table></figure><p>在实际项目中，准备使用pydantic作为参数校验，因此在传递给celery task时，传递了一个class Instance；接着在任务调度时报错：</p><p><code>kombu.exceptions.EncodeError: SubscriptionRequest is not JSON serializable</code></p><p>默认情况下，celery 使用JSON进行序列化数据，因此根本原因在于默认情况下class实例无法被json序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; json.dumps(SubscriptionRequest)</span><br><span class="line">TypeError: Object of type SubscriptionRequest <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br></pre></td></tr></table></figure><p>json.dumps有一个参数default，在python docs文档中描述如下</p><blockquote><p>当 <em>default</em> 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。如果没有被指定，则会直接引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。</p></blockquote><p>我们可以借助default函数来为class实例创建一个方法实现对其json序列化。</p><p>这里没有对类进行改造，而是优化函数的入参</p><p>最后改成，先传递参数到task，然后在task内对所有参数进行pydantic 校验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@celery_app.task(name="create_subscription")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_subscription_file</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="comment"># 对kv参数使用pydantic校验</span></span><br><span class="line">    req = SubscriptionRequest(**kwargs)</span><br><span class="line">    subscription_count = req.count</span><br><span class="line">    run_times = math.ceil(subscription_count / <span class="number">200</span>)</span><br><span class="line">    results = &#123;</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"validDateTime"</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] <a href="https://stackoverflow.com/questions/10252010/serializing-class-instance-to-json" target="_blank" rel="noopener">class serialize</a></p><p>[2] <a href="https://github.com/celery/celery/issues/5922" target="_blank" rel="noopener">github issue</a></p>]]></content>
    
    <summary type="html">
    
      celery序列化问题
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="celery" scheme="https://blog.smart-lifestyle.cn/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python基础篇--function</title>
    <link href="https://blog.smart-lifestyle.cn/posts/2f69/"/>
    <id>https://blog.smart-lifestyle.cn/posts/2f69/</id>
    <published>2021-03-29T15:30:20.000Z</published>
    <updated>2021-03-30T14:31:21.893Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="function" scheme="https://blog.smart-lifestyle.cn/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>python基础篇--Exception</title>
    <link href="https://blog.smart-lifestyle.cn/posts/f1e8/"/>
    <id>https://blog.smart-lifestyle.cn/posts/f1e8/</id>
    <published>2021-03-29T15:30:00.000Z</published>
    <updated>2021-03-31T02:58:04.560Z</updated>
    
    <content type="html"><![CDATA[<p>以下总结一下python的异常处理</p><h2 id="基类">基类</h2><h3 id="BaseException">BaseException</h3><blockquote><p>所有内置异常的基类。 它不应该被用户自定义类直接继承 (这种情况请使用 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a>)。 如果在此类的实例上调用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a>，则会返回实例的参数表示，或者当没有参数时返回空字符串</p></blockquote><h3 id="Exception">Exception</h3><blockquote><p>所有内置的非系统退出类异常都派生自此类。 所有用户自定义异常也应当派生自此类</p></blockquote><h3 id="ArithmeticError">ArithmeticError</h3><blockquote><p>此基类用于派生针对各种算术类错误而引发的内置异常: <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OverflowError" target="_blank" rel="noopener"><code>OverflowError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener"><code>ZeroDivisionError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#FloatingPointError" target="_blank" rel="noopener"><code>FloatingPointError</code></a></p></blockquote><h3 id="BufferError">BufferError</h3><blockquote><p>当与 <a href="https://docs.python.org/zh-cn/3/c-api/buffer.html#bufferobjects" target="_blank" rel="noopener">缓冲区</a> 相关的操作无法执行时将被引发</p></blockquote><h3 id="LookupError">LookupError</h3><blockquote><p>此基类用于派生当映射或序列所使用的键或索引无效时引发的异常: <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#IndexError" target="_blank" rel="noopener"><code>IndexError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。 这可以通过 <a href="https://docs.python.org/zh-cn/3/library/codecs.html#codecs.lookup" target="_blank" rel="noopener"><code>codecs.lookup()</code></a> 来直接引发</p></blockquote><h3 id="具体异常">具体异常</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure><h2 id="具体用法">具体用法</h2><p>典型的异常处理结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">except</span> YourException <span class="keyword">as</span> e:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  (your code)</span><br></pre></td></tr></table></figure><ul><li>finally 语句 无论是否有异常都会执行，另外如果finally中有return语句，那么始终返回finally中的return语句</li><li>else  语句在没有异常时执行</li><li>except 可以同时填写多个Exception</li></ul><h3 id="处理多个异常">处理多个异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n1, n2)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> pow(n1, n2) / n2</span><br><span class="line">    <span class="keyword">except</span> (TypeError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">&gt; test(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获到 ZeroDivisionError</span></span><br><span class="line">&gt; test(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">float division by zero</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获到TypeError</span></span><br><span class="line">&gt; test(<span class="string">'0'</span>, <span class="number">0</span>)</span><br><span class="line">must be real number, <span class="keyword">not</span> str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有捕获到，程序异常触发ValueError</span></span><br><span class="line">&gt; test(<span class="number">-1</span>, <span class="number">0.1</span>)</span><br><span class="line">ValueError: math domain error</span><br></pre></td></tr></table></figure><h3 id="捕获所有异常">捕获所有异常</h3><p>使用<code>except Exception as e:</code>来捕获其他所有异常（注：这个将会捕获除了 <code>SystemExit</code> 、 <code>KeyboardInterrupt</code> 和 <code>GeneratorExit</code> 之外的所有异常）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n1, n2)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> pow(n1, n2) / n2</span><br><span class="line">    <span class="keyword">except</span> (TypeError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      print(<span class="string">'Exception: '</span>, e)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 如果不确定异常类型，可以写Exception，捕获通用Exception   </span></span><br><span class="line">&gt; test(<span class="number">-1</span>, <span class="number">0.1</span>)</span><br><span class="line">Exception:  math domain error</span><br></pre></td></tr></table></figure><h3 id="创建自定义异常">创建自定义异常</h3><p>自定义异常，继承于<code>Exception</code> 或者其他任何一个已存在的异常类型，假如在处理流，需要涉及到网络流、文件流、内存流，那么可以涉及到如下异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWorkStreamError</span><span class="params">(StreamError)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStreamError</span><span class="params">(StreamError)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStreamError</span><span class="params">(StreamError)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>需要用到时，可以按照Exception方式，传递参数即可，Exception将所有传递的参数以元组的形式，存在<code>args</code>里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'name error'</span>, <span class="string">'IO error'</span>, <span class="string">'EOF error'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e.args)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'name error'</span>, <span class="string">'IO error'</span>, <span class="string">'EOF error'</span>)</span><br></pre></td></tr></table></figure><p>如果要重写<code>__init__()</code>方法，需要确保所有参数都给赋值到父类<code>Exception.__init__()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, status)</span>:</span></span><br><span class="line">    super().__init__(message, status)</span><br><span class="line">    self.msg = message</span><br><span class="line">    self.sta = status</span><br></pre></td></tr></table></figure><h3 id="捕获异常后抛出另外异常">捕获异常后抛出另外异常</h3><p>使用<code>raise Error from e</code>来形成异常链，可以看到下面的信息：</p><p>The above exception was the direct cause of the following exception</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'EOF'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'need str'</span>) <span class="keyword">from</span> e</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误信息</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-80-e2122a02c1f3&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2     raise ValueError(<span class="string">'EOF'</span>)</span><br><span class="line">      3 except Exception as e:</span><br><span class="line"></span><br><span class="line">ValueError: EOF</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-80-e2122a02c1f3&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2     raise ValueError(<span class="string">'EOF'</span>)</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">'need str'</span>) from e</span><br><span class="line">      5     <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure><p>如果没有使用<code>from e</code>，认为同时发生了两个Exception</p><p>During handling of the above exception, another exception occurred</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'need str'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-93-7ae0db540006&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-93-7ae0db540006&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">'need str'</span>)</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure><p>如果要忽略掉异常链，可以使用<code>raise from None</code>, 只最后的异常抛出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'need str'</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-94-3858a6e7a744&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">'need str'</span>) from None</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure><h3 id="重新抛出被捕获的异常">重新抛出被捕获的异常</h3><p>如果想将异常重新被上一级捕获，可以在except中单独加一个<code>raise</code>语句，这样可以在异常中记录日志等操作后将异常传播出去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># other code</span></span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-95-1519a0755ccc&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">      4     raise</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><h2 id="性能">性能</h2><p>引入异常处理，会带来一定的性能损耗，对于对性能有要求的程序，应该对可预测的结果做逻辑处理，而不是全部用异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">       st = time.perf_counter()</span><br><span class="line">       func(*args, **kwargs)</span><br><span class="line">       end = time.perf_counter()</span><br><span class="line">       print(<span class="string">f'using <span class="subst">&#123;end - st&#125;</span>s'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> / num</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> / num</span><br><span class="line">      </span><br><span class="line">&gt; div1(<span class="number">0</span>)</span><br><span class="line">using <span class="number">4.4405460357666016e-06</span>s</span><br><span class="line"></span><br><span class="line">&gt; div2(<span class="number">0</span>)</span><br><span class="line">using <span class="number">1.341104507446289e-06</span>s</span><br></pre></td></tr></table></figure><p>也许会有人说，既然用python了，还在乎那点性能，我想说python性能调优也是一种追求</p><h2 id="参考">参考</h2><p>[1] <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener">python内置异常</a></p><p>[2] <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">python cookbook</a></p>]]></content>
    
    <summary type="html">
    
      如何使用python的异常处理
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="exception" scheme="https://blog.smart-lifestyle.cn/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>github actions初试牛刀</title>
    <link href="https://blog.smart-lifestyle.cn/posts/9f77/"/>
    <id>https://blog.smart-lifestyle.cn/posts/9f77/</id>
    <published>2021-03-26T05:59:27.666Z</published>
    <updated>2021-03-26T06:43:18.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近将hex博客部署由手动执行，改为通过github actions自动部署，这里做下记录</p></blockquote><h3 id="自动部署原理">自动部署原理</h3><p>使用github actions功能，将hexo生成的静态文件在每次提交代码时，通过scp将文件上传到服务器</p><h3 id="使用步骤">使用步骤</h3><p><img src="https://oss.smart-lifestyle.cn/file/jl6ye.png" alt="image-20210326140634778"></p><p>在git仓库新增actions，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. </span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called "build"</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">Add</span> <span class="string">other</span> <span class="string">actions</span> <span class="string">to</span> <span class="string">build,</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">test,</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">your</span> <span class="string">project.</span></span><br><span class="line">          <span class="string">ls</span></span><br><span class="line">          <span class="string">pwd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">file</span> <span class="string">via</span> <span class="string">ssh</span> <span class="string">password</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/scp-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">source:</span> <span class="string">"public/*,!public/robots.txt"</span></span><br><span class="line">          <span class="attr">target:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET_DIR</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>说明</p><ul><li><p>on 触发条件</p><ul><li>push 推送目标仓库</li><li>pull_request 合并分支仓库</li></ul></li><li><p>steps 步骤</p><ul><li>uses: actions/checkout@v2 获取代码</li><li>uses: appleboy/scp-action@master 使用第三方库，通过scp 传输文件<ul><li>host: $</li><li>username: $</li><li>password: $</li><li>port: $</li><li>source: “public/*,!public/robots.txt”</li><li>target: $</li></ul></li></ul></li></ul><p>上面的secrets信息在github上进行配置</p><p><img src="https://oss.smart-lifestyle.cn/file/oydi5.png" alt="image-20210326141554880"></p><p>每当push代码到仓库master分支时，会进行执行actions，进行博客部署</p><p><img src="https://oss.smart-lifestyle.cn/file/jbae5.png" alt="image-20210326141938875"></p><h3 id="不足">不足</h3><ol><li>目前没有通过github actions生成静态文件，也就是推送之前需要手动执行hexo g，这个在进一步研究之后再尝试</li><li>github 本身可以添加Deploy keys，为了安全，scp应该避免使用密码进行操作，也在研究明白之后再尝试</li><li>由于问题1，尤为hexo g会重新生成静态文件，每次push的时候会有大量带提交文件。。。</li></ol><h3 id="参考">参考</h3><p>[1] <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程</a></p><p>[2] <a href="https://github.com/appleboy/scp-action" target="_blank" rel="noopener">🚀 SCP for GitHub Actions</a></p><p>[3] <a href="https://dev.to/miangame/how-to-automate-a-deploy-in-a-vps-with-github-actions-via-ssh-101e" target="_blank" rel="noopener">How to automate a deploy in a VPS with GitHub actions via SSH</a></p>]]></content>
    
    <summary type="html">
    
      通过github actions部署hexo博客
    
    </summary>
    
    
      <category term="部署" scheme="https://blog.smart-lifestyle.cn/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="github actions" scheme="https://blog.smart-lifestyle.cn/tags/github-actions/"/>
    
      <category term="hexo" scheme="https://blog.smart-lifestyle.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>python基础 -- time与datetime常见用法</title>
    <link href="https://blog.smart-lifestyle.cn/posts/3a95/"/>
    <id>https://blog.smart-lifestyle.cn/posts/3a95/</id>
    <published>2021-03-25T13:31:20.790Z</published>
    <updated>2021-03-29T08:45:32.021Z</updated>
    
    <content type="html"><![CDATA[<p>在HTTP API接口，以及跟数据库交互时经常用到时间戳（时间），这里整理python中常见的time、datetime用法，以及之间的相互转化方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br></pre></td></tr></table></figure><h2 id="time基本用法">time基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前unix时间戳，返回值为float</span></span><br><span class="line">&gt; time.time()</span><br><span class="line"><span class="number">1615178606.6729627</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本地时间（struct time）</span></span><br><span class="line">&gt; time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">8</span>, tm_hour=<span class="number">12</span>, tm_min=<span class="number">47</span>, tm_sec=<span class="number">12</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">67</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取UTC时间（struct time）</span></span><br><span class="line">&gt; time.gmtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">8</span>, tm_hour=<span class="number">4</span>, tm_min=<span class="number">47</span>, tm_sec=<span class="number">25</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">67</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取毫秒级Unix 时间戳 int</span></span><br><span class="line">&gt; int(time.time()*<span class="number">1000</span>)</span><br><span class="line"><span class="number">1615178896227</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取秒级Unix 时间戳 int</span></span><br><span class="line">&gt; int(time.time())</span><br><span class="line"><span class="number">1615178924</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix 时间戳（int/float）转化为 struct time</span></span><br><span class="line">&gt; time.localtime(time.time())</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">21</span>, tm_min=<span class="number">44</span>, tm_sec=<span class="number">6</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">84</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># strcut time 转化为 Unix时间戳（float）</span></span><br><span class="line"><span class="comment"># 主要mktime的参数应该是localtime，不能是UTCtime</span></span><br><span class="line">&gt; time.mktime(time.localtime())</span><br><span class="line"><span class="number">1616680137.0</span></span><br></pre></td></tr></table></figure><h2 id="datetime基本用法">datetime基本用法</h2><ul><li>datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li></ul><p><em>注意：秒后面是微秒，不是毫秒</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前时刻的datetime</span></span><br><span class="line">&gt; datetime.now()</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">21</span>, <span class="number">59</span>, <span class="number">29</span>, <span class="number">534163</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时刻的UTC datetime</span></span><br><span class="line">&gt; datetime.utcnow()</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">803165</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时刻的Unix 时间戳, 参数为 datetime</span></span><br><span class="line">&gt; datatime.timestamp(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">803165</span>))</span><br><span class="line"><span class="number">1616651979.803165</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新datetime,replace(year, month, day, hour, minute, second, microsecond...)</span></span><br><span class="line">&gt; datetime.now().replace(year=<span class="number">2022</span>)</span><br><span class="line">datetime.datetime(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">21</span>, <span class="number">59</span>, <span class="number">29</span>, <span class="number">534163</span>)</span><br></pre></td></tr></table></figure><h3 id="iosformat用法">iosformat用法</h3><ul><li>isoformat(sep=‘T’, timespec=‘auto’)</li></ul><p>默认情况下，如果微秒存在，则输出微秒，如果微秒为0，则微秒会被忽略，而不是输出0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不修改默认参数时，返回格式化字符串</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">803165</span>))</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.803165'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持两个参数，sep， timespec</span></span><br><span class="line"><span class="comment"># sep 默认为'T'，即用T做分隔符</span></span><br><span class="line"><span class="comment"># timespec默认为'auto', 可以为'hours', 'seconds', 'milliseconds', 'microseconds'</span></span><br><span class="line"><span class="comment"># 输出带微秒</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1</span>))</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.000001'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 微秒被忽略</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">0</span>))</span><br><span class="line"><span class="string">'2021-03-25T13:59:39'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果timespec为milliseconds，小于1ms会输出000</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">2</span>), timespec=<span class="string">'milliseconds'</span>)</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于0时，也会输出000</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>), timespec=<span class="string">'milliseconds'</span>)</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以空格作为分隔符</span></span><br><span class="line">&gt; datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1000</span>), timespec=<span class="string">'milliseconds'</span>, sep=<span class="string">' '</span>)</span><br><span class="line"><span class="string">'2021-03-25 13:59:39.001'</span></span><br></pre></td></tr></table></figure><h3 id="timedelta">timedelta</h3><ul><li>datetime.timedelta(days, seconds, microseconds, minutes, hours, weeks)</li></ul><p>两个datetime直接的时间间隔</p><blockquote><p>只有 <em>days</em>,<em>seconds</em> 和 <em>microseconds</em> 会存储在内部，即python内部以 <em>days</em>,<em>seconds</em> 和 <em>microseconds</em> 三个单位作为存储的基本单位。参数单位转换规则如下：</p><ul><li>1毫秒会转换成1000微秒。</li><li>1分钟会转换成60秒。</li><li>1小时会转换成3600秒。</li><li>1星期会转换成7天。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比当前时刻少1天5分钟</span></span><br><span class="line">&gt; datetime.now() + timedelta(days=<span class="number">-1</span>, minutes=<span class="number">-5</span>)</span><br><span class="line">&gt; datetime.now() - timedelta(days=<span class="number">1</span>, minutes=<span class="number">5</span>)</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">557550</span>)</span><br></pre></td></tr></table></figure><h3 id="timezone-astimezone">timezone/astimezone</h3><p>将UTC时间转化为本地时间</p><blockquote><p>假如数据库存储的时间戳都是UTC时间，如果客户端获取到后，转化为本地时间，可以借助timezone和astimezone</p><p>简单可以使用timedelta(hours=±8)进行北京时间和UTC时间转换</p></blockquote><p>具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个UTC时间</span></span><br><span class="line">&gt; date = datetime.utcnow()</span><br><span class="line">&gt; date</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">240199</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有趣的时，如果此时获取tzinfo，不是utc，而是None</span></span><br><span class="line">&gt; date.tzinfo</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因此先给它赋值一个UTC timezone</span></span><br><span class="line">&gt; new = date.replace(tzinfo=timezone.utc)</span><br><span class="line">&gt; new</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">240199</span>, tzinfo=datetime.timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># astimezone 接受一个tz参数，默认为None，为None时，转化为本地时间</span></span><br><span class="line"><span class="comment"># 28800 = 8h * 3600</span></span><br><span class="line">&gt; new.astimezone()</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">240199</span>, tzinfo=datetime.timezone(datetime.timedelta(seconds=<span class="number">28800</span>), <span class="string">'CST'</span>))</span><br></pre></td></tr></table></figure><p>本地时间转化为utc时间</p><blockquote><p>写入到数据库时，需要将实际转化为UTC时间</p><p>方法一：通过astimezone转换，<a href="http://%E6%AD%A4%E6%97%B6tz=timezone.info" target="_blank" rel="noopener">此时tz=timezone.info</a></p><p>方法二：借助于fromtimestamp/utcfromtimestamp转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一个本地时间</span></span><br><span class="line">&gt; localdate = datetime.now()</span><br><span class="line">&gt; localdate</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">974434</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1，给datetime加上时区信息，然后通过astimezone转换</span></span><br><span class="line">&gt; new_localdate = localdate.replace(tzinfo=timezone(timedelta(seconds=<span class="number">28800</span>)))</span><br><span class="line">&gt; new_localdate</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">974434</span>, tzinfo=datetime.timezone(datetime.timedelta(seconds=<span class="number">28800</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转化时区</span></span><br><span class="line">&gt; utc_date = new_localdate.astimezone(tz=timezone.utc)</span><br><span class="line">&gt; utc_date</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">974434</span>, tzinfo=datetime.timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2，借助于timestamp转换</span></span><br><span class="line">&gt; timestamp = localdate.timestamp()</span><br><span class="line">&gt; utc_date = datetime.utcfromtimestamp(timestamp)</span><br><span class="line">&gt; utc_date</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">974434</span>)</span><br><span class="line"><span class="comment"># 或者使用fromtimestamp 加上时区参数</span></span><br><span class="line">&gt; utc_date = datetime.fromtimestamp(timestamp, tz=timezone.utc)</span><br><span class="line">&gt; utc_date</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">33</span>, <span class="number">974434</span>, tzinfo=datetime.timezone.utc)</span><br></pre></td></tr></table></figure><h2 id="str与datetime互转">str与datetime互转</h2><ul><li><p>datetime.strptime(string, format) 将字符串时间转为datetime</p></li><li><p>datetime.strftime(format) 将datetime转化为字符串时间</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str --&gt; datetime</span></span><br><span class="line"><span class="comment"># '2021-03-25T13:59:39.001'</span></span><br><span class="line">&gt; datetime_str = datetime.isoformat(datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1000</span>), timespec=<span class="string">'milliseconds'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># %f 用于格式化微秒</span></span><br><span class="line">&gt; datetime.strptime(datetime_str, <span class="string">"%Y-%m-%dT%H:%M:%S.%f"</span>)</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime --&gt; str</span></span><br><span class="line"><span class="comment"># 推荐第一种用上面提到的isoformat</span></span><br><span class="line"><span class="comment"># 第二种使用strftime</span></span><br><span class="line">&gt; datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1000</span>).strftime(format=<span class="string">"%Y-%m-%dT%H:%M:%S.%f"</span>)</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.001000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将微秒输出为000</span></span><br><span class="line">&gt; datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">59</span>, <span class="number">39</span>, <span class="number">1000</span>).strftime(format=<span class="string">"%Y-%m-%dT%H:%M:%S.000"</span>)</span><br><span class="line"><span class="string">'2021-03-25T13:59:39.000'</span></span><br></pre></td></tr></table></figure><h2 id="str与time互转">str与time互转</h2><ul><li><p>time.strftime(format[,t]) 将time换位为字符串时间，如果t(time)未提供，则使用locatime()获取当前时间</p></li><li><p>time.strptime(string[,format]) 将字符串时间转换为 struct time</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local time</span></span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2021, tm_mon=3, tm_mday=25, tm_hour=23, tm_min=12, tm_sec=10, tm_wday=3, tm_yday=84, tm_isdst=0)</span></span><br><span class="line">&gt; now = time.localtime()</span><br><span class="line"></span><br><span class="line"><span class="comment"># time --&gt; str</span></span><br><span class="line"><span class="comment"># 转化为字符串时间, 不支持微秒</span></span><br><span class="line">&gt; time.strftime( <span class="string">"%Y-%m-%dT%H:%M:%S"</span>, now)</span><br><span class="line"><span class="string">'2021-03-25T23:12:10'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str --&gt; time</span></span><br><span class="line"><span class="comment"># 将字符串时间转换为 struct time</span></span><br><span class="line">&gt; time.strptime(time.strftime( <span class="string">"%Y-%m-%dT%H:%M:%S"</span>, now), <span class="string">"%Y-%m-%dT%H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">23</span>, tm_min=<span class="number">12</span>, tm_sec=<span class="number">10</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">84</span>, tm_isdst=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="time与datetime互转">time与datetime互转</h2><ul><li><p>datetime.timetuple(datetime) 将datetime转化为 struct time</p></li><li><p>datetime.fromtimestamp(unix时间戳) 将unix时间戳转化为datetime</p></li><li><p>datetime.timestamp() 将datetime转化为unix 时间戳</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time --&gt; datetime</span></span><br><span class="line"><span class="comment"># 第一种 unix 时间戳 转化为 datetime</span></span><br><span class="line">&gt; datetime.fromtimestamp(time.time())</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">548042</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种 struct time转化为 datetime</span></span><br><span class="line">&gt; datetime.fromtimestamp(time.mktime(time.localtime()))</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">23</span>, <span class="number">30</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime --&gt; time</span></span><br><span class="line"><span class="comment"># 第一种使用timetuple</span></span><br><span class="line">&gt; datetime.timetuple(datetime.now())</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">23</span>, tm_min=<span class="number">33</span>, tm_sec=<span class="number">9</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">84</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种使用Unix时间戳</span></span><br><span class="line">&gt; time.localtime(datetime.timestamp(datetime.now()))</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">23</span>, tm_min=<span class="number">34</span>, tm_sec=<span class="number">6</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">84</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1>参考</h1><p>[1] <a href="https://pythontic.com/datetime/datetime/isoformat" target="_blank" rel="noopener">Isoformat() Method Of Datetime Class In Python</a></p><p>[2] <a href="https://docs.python.org/zh-cn/3.7/library/datetime.html" target="_blank" rel="noopener">datetime — 基本的日期和时间类型</a></p><p>[3] <a href="https://docs.python.org/zh-cn/3/library/time.html" target="_blank" rel="noopener">time — 时间的访问和转换</a></p><p>[4] <a href="https://docs.python.org/zh-cn/3.7/library/datetime.html#strftime-and-strptime-behavior" target="_blank" rel="noopener">strftime() 和 strptime()的行为</a></p><p>[5] <a href="https://stackoverflow.com/questions/4563272/convert-a-python-utc-datetime-to-a-local-datetime-using-only-python-standard-lib/13287083#13287083" target="_blank" rel="noopener">Convert a python UTC datetime to a local datetime</a></p>]]></content>
    
    <summary type="html">
    
      str、time、datetime之间的转换
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python web -- pydantic基础用法-1</title>
    <link href="https://blog.smart-lifestyle.cn/posts/e075/"/>
    <id>https://blog.smart-lifestyle.cn/posts/e075/</id>
    <published>2021-03-03T14:39:18.126Z</published>
    <updated>2021-03-29T15:37:09.214Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用pydantic校验输入参数，可以省去后续函数体内的校验，并可以作为一个通用的校验器方便其他方法调用，做的入参校验与入参调用的解耦</p><p>著名的FastAPI框架，也是使用的pydantic作为http请求中参数的校验</p></blockquote><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># need python3.6+</span></span><br><span class="line">pip install pydantic -i https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h3 id="基本模型用法">基本模型用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model.py</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, validator</span><br><span class="line"><span class="comment"># 创建一个模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionRequest</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    bearer_token: str = <span class="literal">None</span></span><br><span class="line">    validDateTime: str = <span class="literal">None</span></span><br><span class="line">    validPeriodTime: int = <span class="number">12</span></span><br><span class="line">    count: int = <span class="number">200</span></span><br><span class="line">    deviceTypeId: int = <span class="number">2</span></span><br><span class="line">    subscriptionLevelId: int = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得json格式内容，不返还bearer_token</span></span><br><span class="line">    <span class="comment"># def data_json(self):</span></span><br><span class="line">    <span class="comment">#    return self.json(exclude=&#123;'bearer_token'&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 校验参数</span></span><br><span class="line">    <span class="comment"># @validator('validDateTime')</span></span><br><span class="line">    <span class="comment"># def create_default_date(cls, v):</span></span><br><span class="line">    <span class="comment">#    if v is None:</span></span><br><span class="line">    <span class="comment">#        v = get_default_valid_datetime().strftime("%Y-%m-%dT23:59:59.000Z")</span></span><br><span class="line">    <span class="comment">#    return v</span></span><br></pre></td></tr></table></figure><p>因为给模型中每个字段都设置了默认值，在没有传入参数时也不会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> model <span class="keyword">import</span> SubscriptionRequest</span><br><span class="line">&gt;&gt; m = SubscriptionRequest()</span><br><span class="line">&gt;&gt; print(m)</span><br><span class="line">bearer_token=<span class="literal">None</span> validDateTime=<span class="literal">None</span> validPeriodTime=<span class="number">12</span> count=<span class="number">200</span> deviceTypeId=<span class="number">2</span> subscriptionLevelId=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>现在将模型文件中一些参数默认值去掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model.py</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, validator</span><br><span class="line"><span class="comment"># 创建一个模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionRequest</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    bearer_token: str</span><br><span class="line">    validDateTime: str</span><br><span class="line">    validPeriodTime: int = <span class="number">12</span></span><br><span class="line">    count: int = <span class="number">200</span></span><br><span class="line">    deviceTypeId: int = <span class="number">2</span></span><br><span class="line">    subscriptionLevelId: int = <span class="number">2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>继续执行，将会提示参数缺失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> model <span class="keyword">import</span> SubscriptionRequest</span><br><span class="line">&gt;&gt; m = SubscriptionRequest()</span><br><span class="line">&gt;&gt; print(m)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/simple/workspace/Columbus/admin_tools/serializer.py"</span>, line <span class="number">60</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    m = SubscriptionRequest()</span><br><span class="line">  File <span class="string">"pydantic/main.py"</span>, line <span class="number">391</span>, <span class="keyword">in</span> pydantic.main.BaseModel.__init__</span><br><span class="line">pydantic.error_wrappers.ValidationError: <span class="number">2</span> validation errors <span class="keyword">for</span> SubscriptionRequest</span><br><span class="line">bearer_token</span><br><span class="line">  field required (type=value_error.missing)</span><br><span class="line">validDateTime</span><br><span class="line">  field required (type=value_error.missing)</span><br></pre></td></tr></table></figure><p>正常用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; data= &#123;</span><br><span class="line"><span class="meta">... </span>       <span class="string">'bearer_token'</span>: <span class="string">'1234567=='</span>,</span><br><span class="line"><span class="meta">... </span>       <span class="string">'validDateTime'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="meta">... </span>       <span class="string">'validPeriodTime'</span>: <span class="number">12</span>,</span><br><span class="line"><span class="meta">... </span>       <span class="string">'count'</span>: <span class="number">12</span>,</span><br><span class="line"><span class="meta">... </span>       <span class="string">'deviceTypeId'</span>: <span class="number">2</span>,</span><br><span class="line"><span class="meta">... </span>       <span class="string">'subscriptionLevelId'</span>: <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>   &#125;</span><br><span class="line">&gt;&gt; m = SubscriptionRequest(**data)</span><br><span class="line">&gt;&gt; print(m)</span><br><span class="line">bearer_token=<span class="string">'1234567=='</span> validDateTime=<span class="string">'2022-09-01T23:59:59.000Z'</span> validPeriodTime=<span class="number">12</span> count=<span class="number">12</span> deviceTypeId=<span class="number">2</span> subscriptionLevelId=<span class="number">2</span></span><br><span class="line"><span class="comment"># 输出json格式</span></span><br><span class="line">&gt;&gt; m.json()</span><br><span class="line">&#123;<span class="string">"bearer_token"</span>: <span class="string">"1234567=="</span>, <span class="string">"validDateTime"</span>: <span class="string">"2022-09-01T23:59:59.000Z"</span>, <span class="string">"validPeriodTime"</span>: <span class="number">12</span>, <span class="string">"count"</span>: <span class="number">12</span>, <span class="string">"deviceTypeId"</span>: <span class="number">2</span>, <span class="string">"subscriptionLevelId"</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>在上面返回json结果中，除了bearer_token，其他都是要赋值给body json，因此想在json输出中去除</p><p><code>bearer_token</code></p><p>在模型类中增加如下方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获得json格式内容，不返还bearer_token</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">data_json</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.json(exclude=&#123;<span class="string">'bearer_token'</span>&#125;)</span><br></pre></td></tr></table></figure><p>同样如果想对输入的参数做具体校验，validDateTime如果为None，就为它赋值一个时间戳</p><p>在模型类中增加一个validator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#校验参数</span></span><br><span class="line"><span class="meta">     @validator('validDateTime')</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">create_default_date</span><span class="params">(cls, v)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            v = get_default_valid_datetime().strftime(<span class="string">"%Y-%m-%dT23:59:59.000Z"</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_default_valid_datetime</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    默认有效期时间为当前时间+1年半</span></span><br><span class="line"><span class="string">    :return: 时间戳字符串</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    diff = <span class="number">365</span> + int(<span class="number">365</span>/<span class="number">2</span>)</span><br><span class="line">    valid_datetime = datetime.utcnow() + timedelta(days=diff)</span><br><span class="line">    <span class="comment"># return valid_datetime.strftime("%Y-%m-%dT23:59:59.000Z")</span></span><br><span class="line">    <span class="keyword">return</span> valid_datetime</span><br></pre></td></tr></table></figure><p>需要注意的是validator装饰的为类函数，函数的第一个参数为cls，不是self，另外这个函数还有其他参数</p><ul><li><p>v 为当前参数的值</p></li><li><p>values为当前传递到模型所有参数的字典集合，比如通过values[‘count’] 来获取count的值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@validator('validDateTime')</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">create_default_date</span><span class="params">(cls, v, values, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>另外如果校验的参数没有传递，而是有一个默认值，不会调用校验方法</strong></p><h3 id="参考">参考</h3><p>[1] <a href="https://pydantic-docs.helpmanual.io/usage/validators/" target="_blank" rel="noopener">pydantic validators</a></p><p>[2] <a href="https://pydantic-docs.helpmanual.io/usage/exporting_models/#json_encoders" target="_blank" rel="noopener">export json</a></p><p>[3] <a href="https://pydantic-docs.helpmanual.io/install/" target="_blank" rel="noopener">install</a></p><p>[4] <a href="https://pydantic-docs.helpmanual.io/usage/models/" target="_blank" rel="noopener">basic models</a></p>]]></content>
    
    <summary type="html">
    
      使用pydantic对入参校验
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="pydantic" scheme="https://blog.smart-lifestyle.cn/tags/pydantic/"/>
    
  </entry>
  
  <entry>
    <title>python基础 -- python与excel-1</title>
    <link href="https://blog.smart-lifestyle.cn/posts/df7e/"/>
    <id>https://blog.smart-lifestyle.cn/posts/df7e/</id>
    <published>2021-03-02T05:20:11.240Z</published>
    <updated>2021-03-30T14:33:16.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用openpyxl对excel文件进行读写</p><p><a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html" target="_blank" rel="noopener">官方指导文档</a></p></blockquote><h2 id="准备">准备</h2><h3 id="excel基本术语">excel基本术语</h3><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>Spreadsheet or Workbook</td><td>excel文件</td></tr><tr><td>Worksheet or Sheet</td><td>表，一个workbook/spreadsheet可以有多个sheet</td></tr><tr><td>Column</td><td>表格列A…Z…</td></tr><tr><td>Row</td><td>表格行1…10…</td></tr><tr><td>Cell</td><td>单元格A1…A2…</td></tr></tbody></table><h3 id="安装openpyxl">安装openpyxl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl -i https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h2 id="基本操作">基本操作</h2><h3 id="新建workbook">新建workbook</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line">wb = Workbook()</span><br></pre></td></tr></table></figure><h3 id="加载已经存在的工作簿">加载已经存在的工作簿</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">'File Name'</span>)</span><br></pre></td></tr></table></figure><h3 id="选择sheet">选择sheet</h3><p>默认Workbook创建时，会有一个sheet，通过<code>ws = wb.active</code> 选择并使用它</p><p>存在多个sheet时，可以通过<code>ws = wb[Sheet Name]</code> 选择所有操作的sheet，也可以通过以下操作选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前所有sheetname</span></span><br><span class="line">sheetlist = wb.sheetnames</span><br><span class="line"><span class="comment"># &gt;&gt; ['1st Sheet', '标签内容信息- Basic', '标签内容信息 -Standard', 'Readme', 'Add your sheets and content...']</span></span><br><span class="line">ws = wb[sheetlist[<span class="number">2</span>]] <span class="comment"># 或者</span></span><br><span class="line">ws.active = <span class="number">2</span></span><br><span class="line">ws = wb.active</span><br><span class="line"><span class="comment"># 查看当前sheet名字</span></span><br><span class="line">ws.title</span><br><span class="line">&gt;&gt; 标签内容信息- Basic</span><br></pre></td></tr></table></figure><p><code>ws = wb[Sheet Name]</code> 方法没有改变当前活跃的表格名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wb.active</span><br><span class="line">&gt;&gt; &lt;Worksheet <span class="string">"标签内容信息- Basic"</span>&gt;</span><br><span class="line">ws = wb[<span class="string">'标签内容信息 -Standard'</span>]</span><br><span class="line">wb.active <span class="comment"># 还是运来的单元格</span></span><br><span class="line">&gt;&gt; &lt;Worksheet <span class="string">"标签内容信息- Basic"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="新建sheet">新建sheet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认插在最后位置</span></span><br><span class="line">ws = wb.create_sheet(<span class="string">'Sheet Name'</span>)</span><br><span class="line"><span class="comment"># 也可以在sheet name参数后增加一个参数，表示创建位置</span></span><br><span class="line">ws = wb.create_sheet(<span class="string">'Sheet Name'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="修改sheet-tittle">修改sheet tittle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.title = New Title</span><br></pre></td></tr></table></figure><h3 id="写入单元格">写入单元格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ws[<span class="string">'A1'</span>] = <span class="string">'Name'</span></span><br><span class="line">ws[<span class="string">'B1'</span>] = <span class="string">'Age'</span></span><br><span class="line">ws[<span class="string">'C1'</span>] = <span class="string">'score'</span></span><br><span class="line">ws[<span class="string">'A2'</span>] = <span class="string">'张三'</span></span><br><span class="line">ws[<span class="string">'B2'</span>] = <span class="number">18</span></span><br><span class="line">ws[<span class="string">'C3'</span>] = <span class="number">95</span></span><br></pre></td></tr></table></figure><h3 id="查看单元格内容">查看单元格内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws[<span class="string">'A2'</span>].value</span><br><span class="line">&gt;&gt; <span class="string">'张三'</span></span><br></pre></td></tr></table></figure><h3 id="保存文件-工作簿">保存文件/工作簿</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果filename已经存在，会没有确认的修改这个文件</span></span><br><span class="line">wb.save(filename)</span><br></pre></td></tr></table></figure><h3 id="关闭工作簿">关闭工作簿</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可能没有用？</span></span><br><span class="line">wb.close()</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] <a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html" target="_blank" rel="noopener">官方文档</a></p><p>[2] <a href="https://stackoverflow.com/questions/41556378/openpyxl-set-active-sheet/50117733" target="_blank" rel="noopener">选择sheet</a></p><p>[3] <a href="https://realpython.com/openpyxl-excel-spreadsheets-python/" target="_blank" rel="noopener">realpython openpyxl guide</a></p>]]></content>
    
    <summary type="html">
    
      使用openpyxl对excel读写操作
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="excel" scheme="https://blog.smart-lifestyle.cn/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>shell变量与环境变量</title>
    <link href="https://blog.smart-lifestyle.cn/posts/77ae/"/>
    <id>https://blog.smart-lifestyle.cn/posts/77ae/</id>
    <published>2021-02-27T02:14:32.000Z</published>
    <updated>2021-02-27T14:18:53.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Shell 变量只在主shell有效，子进程无效，环境变量在主shell和子进程都有效，可以通过export命令将shell变量变为环境变量</p><p>使用set命令查看shell变量</p><p>使用printenv命令查看环境变量</p></blockquote><a id="more"></a><h2 id="背景">背景</h2><p>在python工程中，想通过环境变量获取参数值，并赋值给python变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">f"PID: <span class="subst">&#123;os.getpid()&#125;</span>, PPID: <span class="subst">&#123;os.getppid()&#125;</span>"</span>)</span><br><span class="line">host = os.getenv(<span class="string">'REDIS_HOST'</span>)</span><br><span class="line">port = os.getenv(<span class="string">'REDIS_PORT'</span>)</span><br><span class="line">password = os.getenv(<span class="string">'REDIS_PASSWORD'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;password&#125;</span>@<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>而参数值放在一个env文件里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REDIS_HOST=example.com</span><br><span class="line">REDIS_PORT=5432</span><br><span class="line">REDIS_PASSWORD=123456</span><br></pre></td></tr></table></figure><p>通过执行<code>source .env</code> 后在终端查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$REDIS_HOST</span> <span class="variable">$REDIS_PORT</span> <span class="variable">$REDIS_PASSWORD</span></span><br><span class="line">&gt; example.com 5432 123456</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前shell pid</span></span><br><span class="line"><span class="built_in">echo</span> $$</span><br><span class="line">&gt; 22650</span><br><span class="line"><span class="comment"># 运行python 文件</span></span><br><span class="line">python variables.py</span><br><span class="line">&gt; PID: 23034, PPID: 22650</span><br><span class="line">&gt; None@None:None</span><br></pre></td></tr></table></figure><p>发现python并未获取到存在shell环境变量中的值，python运行的父进程号为当前shell的进程号，而当时python运行是在子进程中运行</p><p>以上的<code>souce .env</code>操作是将变量存入到shell变量中，但未在环境变量中</p><h2 id="shell变量和环境变量">shell变量和环境变量</h2><p>For <a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unix8.html" target="_blank" rel="noopener">Standard UNIX variables</a> , says:</p><blockquote><p>Standard UNIX variables are split into two categories, environment variables and shell variables. In broad terms, shell variables apply only to the current instance of the shell and are used to set short-term working conditions; environment variables have a farther reaching significance, and those set at login are valid for the duration of the session. By convention, environment variables have UPPER CASE and shell variables have lower case names.</p><p>标准UNIX变量分为两类：环境变量和shell变量，shell变量仅在当前shell（主进程）有效，环境变量可以在子进程有效，通常环境变量为大写，shell变量为小写</p></blockquote><p>For <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_05_03" target="_blank" rel="noopener">POSIX-compatible shells</a> (including Bash), the standard says:</p><blockquote><p><strong>2.5.3 Shell Variables</strong><br>Variables shall be initialized from the environment <em>[…]</em> If a variable is initialized from the environment, it shall be marked for export immediately; see the export special built-in. New variables can be defined and initialized with variable assignments, <em>[etc.]</em></p><p>如果shell变量要转化为环境变量，执行export 命令</p></blockquote><h3 id="查看shell变量和环境变量">查看shell变量和环境变量</h3><ul><li>查看shell变量使用<code>set</code>命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="comment"># 截取部分</span></span><br><span class="line">&gt; ...</span><br><span class="line">&gt; status=0</span><br><span class="line">&gt; termcap</span><br><span class="line">&gt; terminfo</span><br><span class="line">&gt; userdirs</span><br><span class="line">&gt; usergroups</span><br><span class="line">&gt; watch=(  )</span><br><span class="line">&gt; widgets</span><br><span class="line">&gt; zle_bracketed_paste=( $<span class="string">'\C-[[?2004h'</span> $<span class="string">'\C-[[?2004l'</span> )</span><br><span class="line">&gt; zsh_eval_context=( toplevel )</span><br><span class="line">&gt; zsh_scheduled_events</span><br><span class="line">&gt; ...</span><br></pre></td></tr></table></figure><p>另外可以通过set/unset 来设置/删除shell变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">  Display, <span class="built_in">set</span> or <span class="built_in">unset</span> values of shell attributes and positional parameters.</span><br><span class="line"></span><br><span class="line">  - Display the names and values of shell variables:</span><br><span class="line">    <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">  - Mark variables that are modified or created <span class="keyword">for</span> <span class="built_in">export</span>:</span><br><span class="line">    <span class="built_in">set</span> -a</span><br><span class="line"></span><br><span class="line">  - Notify of job termination immediately:</span><br><span class="line">    <span class="built_in">set</span> -b</span><br><span class="line"></span><br><span class="line">  - Set various options, e.g. <span class="built_in">enable</span> vi style line editing:</span><br><span class="line">    <span class="built_in">set</span> -o vi</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span></span><br><span class="line"></span><br><span class="line">  Remove shell variables or <span class="built_in">functions</span>.</span><br><span class="line"></span><br><span class="line">  - Remove the variable foo, or <span class="keyword">if</span> the variable doesn<span class="string">'t exist, remove the function foo:</span></span><br><span class="line"><span class="string">    unset foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - Remove the variables foo and bar:</span></span><br><span class="line"><span class="string">    unset -v foo bar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - Remove the function my_func:</span></span><br><span class="line"><span class="string">    unset -f my_func</span></span><br></pre></td></tr></table></figure><ul><li>查看环境变量使用env或者printenv</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">printenv</span><br><span class="line">&gt; VIRTUALENVWRAPPER_WORKON_CD=1</span><br><span class="line">&gt; VIRTUALENVWRAPPER_SCRIPT=/opt/anaconda3/bin/virtualenvwrapper.sh</span><br><span class="line">&gt; WORKON_HOME=/Users/simple/.virtualenvs</span><br><span class="line">&gt; VIRTUALENVWRAPPER_HOOK_DIR=/Users/simple/.virtualenvs</span><br><span class="line">&gt; ANDROID_HOME=/Users/simple/Library/Android/sdk</span><br><span class="line">&gt; _=/usr/bin/printenv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">env</span><br><span class="line"></span><br><span class="line">  Show the environment or run a program <span class="keyword">in</span> a modified environment.</span><br><span class="line"></span><br><span class="line">  - Show the environment:</span><br><span class="line">    env</span><br><span class="line"></span><br><span class="line">  - Run a program. Often used <span class="keyword">in</span> scripts after the shebang (<span class="comment">#!) for looking up the path to the program:</span></span><br><span class="line">    env program</span><br><span class="line"></span><br><span class="line">  - Clear the environment and run a program:</span><br><span class="line">    env -i program</span><br><span class="line"></span><br><span class="line">  - Remove variable from the environment and run a program:</span><br><span class="line">    env -u variable program</span><br><span class="line"></span><br><span class="line">  - Set a variable and run a program:</span><br><span class="line">    env variable=value program</span><br><span class="line"></span><br><span class="line">  - Set multiple variables and run a program:</span><br><span class="line">    env variable1=value variable2=value variable3=value program</span><br></pre></td></tr></table></figure><h2 id="解决">解决</h2><p>方法就比较明显了</p><p>第一种，修改.env文件，加入export，然后执行<code>source .env</code>，最后运行python命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> REDIS_HOST=example.com</span><br><span class="line"><span class="built_in">export</span> REDIS_PORT=5432</span><br><span class="line"><span class="built_in">export</span> REDIS_PASSWORD=123456</span><br></pre></td></tr></table></figure><p>第二种，在运行python 命令前面加上env操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env REDIS_HOST=example.com REDIS_PORT=5432 REDIS_PASSWORD=123456 python variables.py</span><br><span class="line">&gt; PID: 23517, PPID: 22650</span><br><span class="line">&gt; 123456@example.com:5432</span><br></pre></td></tr></table></figure><h2 id="Tips">Tips</h2><p>在shell中获取当前进程ID，父进程ID以及UID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"PID of this script: $$"</span></span><br><span class="line">&gt; 22650</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PPID of this script: <span class="variable">$PPID</span>"</span></span><br><span class="line">&gt; 22649</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UID of this script: <span class="variable">$UID</span>"</span></span><br><span class="line">&gt; 501</span><br></pre></td></tr></table></figure><p>在python脚本中获取当前进程ID以及父进程ID</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">f"PID: <span class="subst">&#123;os.getpid()&#125;</span>, PPID: <span class="subst">&#123;os.getppid()&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>[1] <a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unix8.html" target="_blank" rel="noopener">UNIX Tutorial Eight</a></p><p>[2] <a href="https://stackoverflow.com/questions/3341372/difference-between-shell-and-environment-variables" target="_blank" rel="noopener">difference-between-shell-and-environment-variables</a></p><p>[3] <a href="https://unix.stackexchange.com/questions/364655/shell-variable-vs-environment-variable-which-one-is-preferred-if-both-have-the" target="_blank" rel="noopener">shell-variable-vs-environment-variable-which-one-is-preferred-if-both-have-the-same-name</a></p><p>[4] <a href="https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/" target="_blank" rel="noopener">How to Set and List Environment Variables in Linux</a></p>]]></content>
    
    <summary type="html">
    
      shell变量与环境变量的区别
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.smart-lifestyle.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="https://blog.smart-lifestyle.cn/tags/linux/"/>
    
      <category term="shell" scheme="https://blog.smart-lifestyle.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://blog.smart-lifestyle.cn/posts/938d/"/>
    <id>https://blog.smart-lifestyle.cn/posts/938d/</id>
    <published>2021-02-19T06:21:51.560Z</published>
    <updated>2021-02-19T06:21:51.560Z</updated>
    
    <content type="html"><![CDATA[<p>用于测试SEO</p>]]></content>
    
    <summary type="html">
    
      这是一篇测试文档
    
    </summary>
    
    
      <category term="test" scheme="https://blog.smart-lifestyle.cn/categories/test/"/>
    
    
      <category term="SEO" scheme="https://blog.smart-lifestyle.cn/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://blog.smart-lifestyle.cn/posts/aaa7/"/>
    <id>https://blog.smart-lifestyle.cn/posts/aaa7/</id>
    <published>2021-01-16T06:39:20.391Z</published>
    <updated>2021-01-16T06:39:20.391Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：</p><ol><li><a href="https://github.com/python-poetry/poetry" target="_blank" rel="noopener">https://github.com/python-poetry/poetry</a></li><li><a href="https://zhuanlan.zhihu.com/p/110721747" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/110721747</a></li><li><a href="https://blog.csdn.net/daihaoxin/article/details/109262807" target="_blank" rel="noopener">https://blog.csdn.net/daihaoxin/article/details/109262807</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/python-poetry/poetry&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/python-
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="dependency" scheme="https://blog.smart-lifestyle.cn/tags/dependency/"/>
    
  </entry>
  
  <entry>
    <title>Python Type Checking</title>
    <link href="https://blog.smart-lifestyle.cn/posts/acc1/"/>
    <id>https://blog.smart-lifestyle.cn/posts/acc1/</id>
    <published>2020-12-06T14:48:54.139Z</published>
    <updated>2020-12-06T14:48:54.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：</p><ol><li><p><a href="https://testdriven.io/blog/python-type-checking/" target="_blank" rel="noopener">https://testdriven.io/blog/python-type-checking/</a></p></li><li><p><a href="https://testdriven.io/blog/python-code-quality/#running-code-quality-tools" target="_blank" rel="noopener">https://testdriven.io/blog/python-code-quality/#running-code-quality-tools</a></p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://testdriven.io/blog/python-type-checking/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://testd
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python library package</title>
    <link href="https://blog.smart-lifestyle.cn/posts/205e/"/>
    <id>https://blog.smart-lifestyle.cn/posts/205e/</id>
    <published>2020-12-06T14:40:36.325Z</published>
    <updated>2020-12-06T14:40:36.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视觉">视觉</h2><ol><li></li></ol><img src="https://oss.smart-lifestyle.cn/blog/cc19h.jpg" /><blockquote><p>[<a href="https://github.com/bokeh/bokeh" target="_blank" rel="noopener">https://github.com/bokeh/bokeh</a>][1]<br>Bokeh is an interactive visualization library for modern web browsers. It provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large or streaming datasets. Bokeh can help anyone who would like to quickly and easily make interactive plots, dashboards, and data applications.</p></blockquote><p>![][image-2]![][image-3]![][image-4]![][image-5]</p><h3 id="install">install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bokeh</span><br></pre></td></tr></table></figure><h2 id="生产力">生产力</h2><ol><li><img src="https://oss.smart-lifestyle.cn/file/r7d0g.jpg" alt=""></li></ol><blockquote><p>[<a href="https://github.com/PyCQA/isort" target="_blank" rel="noopener">https://github.com/PyCQA/isort</a>][2]<br>isort your imports, so you don’t have to.<br>isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. It provides a command line utility, Python library and plugins for various editors to quickly sort all your imports. It requires Python 3.6+ to run but supports formatting Python 2 code too.</p></blockquote><h3 id="install-2">install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install isort</span><br></pre></td></tr></table></figure><h3 id="use">use</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isort file.py</span><br></pre></td></tr></table></figure><ol start="2"><li><img src="https://oss.smart-lifestyle.cn/file/4dv6l.jpg" alt=""></li></ol><blockquote><p>[<a href="https://github.com/pypyr/pypyr" target="_blank" rel="noopener">https://github.com/pypyr/pypyr</a>][3]<br>pypyr is a free &amp; open-source task-runner that lets you define and run sequential steps in a pipeline.</p></blockquote><h3 id="install-3">install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pypyr</span><br></pre></td></tr></table></figure><h2 id="框架">框架</h2><h3 id="事件驱动，观察者模式">事件驱动，观察者模式</h3><ol><li>RxPY v3.0</li></ol><blockquote><p>[<a href="https://github.com/ReactiveX/RxPY" target="_blank" rel="noopener">https://github.com/ReactiveX/RxPY</a>][4]<br>A library for composing asynchronous and event-based programs using observable collections and query operator functions in Python</p></blockquote><h3 id="install-4">install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install rx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;视觉&quot;&gt;视觉&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://oss.smart-lifestyle.cn/blog/cc19h.jpg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;[&lt;a href=&quot;https://github.com/bokeh/bokeh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bokeh/bokeh&lt;/a&gt;][1]&lt;br&gt;
Bokeh is an interactive visualization library for modern web browsers. It provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large or streaming datasets. Bokeh can help anyone who would like to quickly and easily make interactive plots, dashboards, and data applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![][image-2]![][image-3]![][image-4]![][image-5]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python library" scheme="https://blog.smart-lifestyle.cn/tags/python-library/"/>
    
  </entry>
  
  <entry>
    <title>docker部署记录</title>
    <link href="https://blog.smart-lifestyle.cn/posts/c5ac/"/>
    <id>https://blog.smart-lifestyle.cn/posts/c5ac/</id>
    <published>2020-12-06T14:29:56.852Z</published>
    <updated>2020-12-06T14:29:56.852Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="">x</a> 磁盘初始化</li><li><a href="">x</a> 修改系统时区为UTC+8</li><li><a href="">x</a> 部署docker环境，修改docker安装位置</li><li><a href="">x</a> 优化docker环境，适配china</li><li><a href="">x</a> 修改代码配置文件，适配测试环境和生产环境</li><li><a href="">x</a> 代码merge到master分支</li><li><a href="">x</a> 安装docker镜像</li><li><a href="">x</a> 从git获取代码，部署</li><li><a href=""> </a> 配置https</li><li><a href=""> </a> 测试</li></ul><blockquote><p>本文记录在Azure 上部署docker应用的过程</p></blockquote><h2 id="磁盘初始化">磁盘初始化</h2><p>Azure提供的磁盘为系统盘+数据盘，数据盘的大小在新建虚拟机的时候可以选，默认数据盘是未挂载到系统上的，需要手动挂载，挂载数据盘可以参考：<br><a href="https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk" target="_blank" rel="noopener">https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过dh -h命令查看当前系统磁盘的大小和使用情况，目前没有数据盘</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           796M  676K  795M   1% /run</span><br><span class="line">/dev/sda1        29G  1.5G   28G   5% /</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda15      105M  3.6M  101M   4% /boot/efi</span><br><span class="line">/dev/sdb1        16G   45M   15G   1% /mnt</span><br><span class="line">tmpfs           796M     0  796M   0% /run/user/1000</span><br><span class="line">........</span><br><span class="line"><span class="comment"># 操作完之后， df -h，最后一行已经挂在到/datadrive上</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           796M  680K  795M   1% /run</span><br><span class="line">/dev/sda1        29G  1.5G   28G   5% /</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda15      105M  3.6M  101M   4% /boot/efi</span><br><span class="line">/dev/sdb1        16G   45M   15G   1% /mnt</span><br><span class="line">tmpfs           796M     0  796M   0% /run/user/1000</span><br><span class="line">/dev/sdc1       196G   61M  186G   1% /datadrive</span><br></pre></td></tr></table></figure><p><strong>之后的所有文件操作都是在/datadrive下</strong><br>默认datadrive的权限为root权限，修改所有者为当前用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R cniabservice:cniabservice /datadrive/</span><br></pre></td></tr></table></figure><h2 id="修改系统时区">修改系统时区</h2><p>Azure提供的linux默认时区为UTC，需要改为中国UTC+8时区<br>简单操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p><strong>!docker 内时区默认也为UTC，跟主机并不同步，需要修改为UTC+8，下面会说明，不在这里介绍</strong></p><h2 id="安装docker">安装docker</h2><h3 id="1-使用Ubuntu-源进行安装">1. 使用Ubuntu 源进行安装</h3><p>参考 <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg-agent \</span><br><span class="line">software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo apt-get install docker-compose</span><br></pre></td></tr></table></figure><p><strong>apt-get是从国外网站下载，可能速度会非常慢</strong>，可以下载deb离线包：<br><a href="https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/" target="_blank" rel="noopener" title="针对于ubuntu 18.04">https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/</a></p><blockquote><p>Go to <a href="https://download.docker.com/linux/ubuntu/dists/" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/dists/</a>, choose your Ubuntu version, browse to pool/stable/, choose amd64, armhf, arm64, ppc64el, or s390x, and download the .deb file for the Docker Engine - Community version you want to install.<br>使用dpkg -i *.deb 安装顺序为：</p></blockquote><ol><li><a href="http://containerd.io" target="_blank" rel="noopener">containerd.io</a></li><li>docker-ce</li><li>docker-ce-cli</li><li>最后 apt-get install docker-compose</li></ol><p>docker默认root权限操作，将当前用户加入root组，免每次操作输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you would like to use Docker as a non-root user, you should now consider adding your user to the “docker” group with something like:</span></span><br><span class="line">sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure><h3 id="2-修改docker镜像存储等存储位置">2. 修改docker镜像存储等存储位置</h3><p>默认存储位置在系统盘，要将其迁移至数据盘<br>在控制台输入docker info，查看当前docker 存储位置<br><img src="https://oss.smart-lifestyle.cn/blog/qx062.jpg" alt=""><br>在/etc/docker/下新建daemon.json文件, graph为存储位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://1x2ypu6h.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="attr">"hosts"</span>:[</span><br><span class="line">    <span class="string">"tcp://0.0.0.0:2375"</span>,</span><br><span class="line">    <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"graph"</span>: <span class="string">"/datadrive/dockerdata"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker，sudo service docker restart，再次docker info查看配置<br><img src="https://oss.smart-lifestyle.cn/blog/7rvdj.jpg" alt=""><br><strong>修改成功！</strong></p><h2 id="从代码仓库获取代码">从代码仓库获取代码</h2><h3 id="1-pull-request-to-Master">1. pull request to Master</h3><p>遇到问题，没有权限进行合并操作，只有审批功能，修改如下地方<br><img src="https://oss.smart-lifestyle.cn/blog/98qaq.jpg" alt=""></p><h3 id="2-在远程服务器使用git-clone获取代码">2. 在远程服务器使用git clone获取代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用如下用户名密码</span></span><br><span class="line"><span class="comment"># 用户名：jenkins 密码：***************</span></span><br><span class="line">git <span class="built_in">clone</span> https://dev.azure.com/ds-rnd/*************</span><br></pre></td></tr></table></figure><h2 id="环境配置">环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir redisdb</span><br><span class="line">mkdir mysqldb</span><br><span class="line">mkdir ssl_key</span><br><span class="line">mkdir conf</span><br><span class="line"><span class="comment"># 修改nginx.conf文件</span></span><br><span class="line">mkdir -p static/.well-known</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1.0.0"</span> \&gt; version</span><br></pre></td></tr></table></figure><h3 id="1-构建docker">1. 构建docker</h3><p>在工程根目录下执行 docker-compose up 进行首次编译镜像和启动容器</p><h3 id="2-初始化数据库">2. 初始化数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建abbdrive数据库</span></span><br><span class="line">python manage.py makemigrations abbdrivemodel</span><br><span class="line">python manage.py migrate</span><br><span class="line">执行</span><br><span class="line">http://g*************.cloudapp.chinacloudapi.cn/**********</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 磁盘初始化&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 修改系统时区为UTC+8&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 部署docker环境，修改docker安装位置&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 优化docker环境，适配china&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 修改代码配置文件，适配测试环境和生产环境&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 代码merge到master分支&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 安装docker镜像&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;x&lt;/a&gt; 从git获取代码，部署&lt;/li&gt;
&lt;li&gt;&lt;a href&gt; &lt;/a&gt; 配置https&lt;/li&gt;
&lt;li&gt;&lt;a href&gt; &lt;/a&gt; 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本文记录在Azure 上部署docker应用的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;磁盘初始化&quot;&gt;磁盘初始化&lt;/h2&gt;
&lt;p&gt;Azure提供的磁盘为系统盘+数据盘，数据盘的大小在新建虚拟机的时候可以选，默认数据盘是未挂载到系统上的，需要手动挂载，挂载数据盘可以参考：&lt;br&gt;
&lt;a href=&quot;https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过dh -h命令查看当前系统磁盘的大小和使用情况，目前没有数据盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Filesystem      Size  Used Avail Use% Mounted on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udev            3.9G     0  3.9G   0% /dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           796M  676K  795M   1% /run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda1        29G  1.5G   28G   5% /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           3.9G     0  3.9G   0% /dev/shm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           5.0M     0  5.0M   0% /run/lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda15      105M  3.6M  101M   4% /boot/efi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sdb1        16G   45M   15G   1% /mnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           796M     0  796M   0% /run/user/1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 操作完之后， df -h，最后一行已经挂在到/datadrive上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Filesystem      Size  Used Avail Use% Mounted on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udev            3.9G     0  3.9G   0% /dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           796M  680K  795M   1% /run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda1        29G  1.5G   28G   5% /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           3.9G     0  3.9G   0% /dev/shm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           5.0M     0  5.0M   0% /run/lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda15      105M  3.6M  101M   4% /boot/efi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sdb1        16G   45M   15G   1% /mnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           796M     0  796M   0% /run/user/1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sdc1       196G   61M  186G   1% /datadrive&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.smart-lifestyle.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>git commit规范</title>
    <link href="https://blog.smart-lifestyle.cn/posts/76bd/"/>
    <id>https://blog.smart-lifestyle.cn/posts/76bd/</id>
    <published>2020-11-24T08:59:59.158Z</published>
    <updated>2020-11-24T08:59:59.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>提交git 时，如何能将提交的信息写清晰明了，避免不规范的代码提交</p><p>git 每次提交都需要写commit message，否则就不允许提交，一般来说，commit message应该清晰明了，说明本次提交的目的，具体做了什么操作，但是在日常开发中，大家的commit message千奇百怪，中英文混合使用，fix bug等各种笼统的message司空见怪，规范git commit message很重要</p></blockquote><p>比较流行的规范整理如下。</p><h2 id="commit-message-格式">commit message 格式</h2><p>建议每行不超过100个字符</p><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><ul><li><p>type(必须)</p><p>用于说明git commit的类别，只允许使用下面的标识。</p><p>feat: 新功能（feature）</p><p>fix: 修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG</p><p>docs: 文档（document）</p><p>style: 格式（不影响代码运行的变动, 比如删除多余的空行）</p><p>refactor: 重构（即不是新增功能，也不是修改bug的代码运动）</p><p>perf: 优化相关，比如提升性能、体验</p><p>test: 增加测试</p><p>chore: 构建过程或者辅助工具的变动</p><p>revert: 回滚到上一个版本，需要在body中写上从哪一个版本revert的</p><p>merge: 代码合并</p><p>sync: 同步主线或者分布的bug</p></li><li><p>scope（可选）</p><p>scope用于说明影响的范围，比如数据层、控制层、视图层等等，视项目的不同而不同</p><p>如果修改影响了不止一个socope，你可以使用*代替</p></li><li><p>subject（必须）</p><p>subject是commit目的的简短描述，不超过50字符。</p><p>建议使用中文。</p><p>结尾不加句号或者其他标点符号</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 举例</span></span><br><span class="line">docs(api): 接口说明完善</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feat($</span><span class="bash">browser): onUrlChange event (popstate/hashchange/polling)</span></span><br><span class="line"></span><br><span class="line">Added new event to $browser:</span><br><span class="line">- forward popstate event if available</span><br><span class="line">- forward hashchange event if popstate not available</span><br><span class="line">- do polling when neither popstate nor hashchange available</span><br><span class="line"></span><br><span class="line">Breaks $browser.onHashChange, which was removed (use onUrlChange instead)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">fix($</span><span class="bash">compile): couple of unit tests <span class="keyword">for</span> IE9</span></span><br><span class="line"></span><br><span class="line">Older IEs serialize html uppercased, but IE9 does not...</span><br><span class="line">Would be better to expect case insensitive, unfortunately jasmine does</span><br><span class="line">not allow to user regexps for throw expectations.</span><br><span class="line"></span><br><span class="line">Closes #392</span><br><span class="line">Breaks foo.bar api, foo.baz should be used instead</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feat($</span><span class="bash">compile): simplify isolate scope bindings</span></span><br><span class="line"></span><br><span class="line">Changed the isolate scope binding options to:</span><br><span class="line">  - @attr - attribute binding (including interpolation)</span><br><span class="line">  - =model - by-directional model binding</span><br><span class="line">  - &amp;expr - expression execution binding</span><br><span class="line"></span><br><span class="line">This change simplifies the terminology as well as</span><br><span class="line">number of choices available to the developer. It</span><br><span class="line">also supports local name aliasing from the parent.</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed and</span><br><span class="line">the inject option for the directive controller injection was removed.</span><br><span class="line"></span><br><span class="line">To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">Before:</span><br><span class="line"></span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: 'attribute',</span><br><span class="line">  myBind: 'bind',</span><br><span class="line">  myExpression: 'expression',</span><br><span class="line">  myEval: 'evaluate',</span><br><span class="line">  myAccessor: 'accessor'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">After:</span><br><span class="line"></span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: '@',</span><br><span class="line">  myBind: '@',</span><br><span class="line">  myExpression: '&amp;',</span><br><span class="line">  // myEval - usually not useful, but in cases where the expression is assignable, you can use '='</span><br><span class="line">  myAccessor: '=' // in directive's template change myAccessor() to myAccessor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">The removed `inject` wasn't generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure><h3 id="使用git-commit-规范的好处">使用git commit 规范的好处</h3><ol><li>便于追溯提交历史进行追溯</li><li>一旦约束了commit message，就不能再一股脑的把各种各样的改动都放在一个git commit里面</li><li>便于自动化输出change log(<a href="http://CHANGELOG.md" target="_blank" rel="noopener">CHANGELOG.md</a>)</li></ol><p>[1] <a href="https://developer.aliyun.com/article/770277?accounttraceid=d4154093542c440aa51196b76d1ccbe3eyfz" target="_blank" rel="noopener">https://developer.aliyun.com/article/770277?accounttraceid=d4154093542c440aa51196b76d1ccbe3eyfz</a></p><p>[2] <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;提交git 时，如何能将提交的信息写清晰明了，避免不规范的代码提交&lt;/p&gt;
&lt;p&gt;git 每次提交都需要写commit message，否则就不允许提交，一般来说，commit message应该清晰明了，说明本次提交的目的，具体做了什么操作，但是在日常开发中，大家的commit message千奇百怪，中英文混合使用，fix bug等各种笼统的message司空见怪，规范git commit message很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比较流行的规范整理如下。&lt;/p&gt;
&lt;h2 id=&quot;commit-message-格式&quot;&gt;commit message 格式&lt;/h2&gt;
&lt;p&gt;建议每行不超过100个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://blog.smart-lifestyle.cn/categories/git/"/>
    
    
      <category term="git commit" scheme="https://blog.smart-lifestyle.cn/tags/git-commit/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore模式匹配</title>
    <link href="https://blog.smart-lifestyle.cn/posts/4da0/"/>
    <id>https://blog.smart-lifestyle.cn/posts/4da0/</id>
    <published>2020-11-20T05:26:11.066Z</published>
    <updated>2020-11-20T05:26:11.066Z</updated>
    
    <content type="html"><![CDATA[<ul><li>匹配模式前使用 <code>/</code> 表示根目录<br>/filename 表示匹配根目录下的文件filename</li><li>匹配模式后使用 <code>/</code> 代表是目录（不是文件）<br>dirname/ 表示匹配的是dirname文件夹</li><li>匹配模式前加 <code>！</code> 表示取反</li><li><code>*</code> 代表任意个字符<br>db*.json 表示匹配以db开头的json文件</li><li><code>?</code> 匹配任意一个字符<br>db?.json 表示以db开头并且文件名为三个字符的json文件</li><li><code>**</code> 匹配任意级目录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;匹配模式前使用 &lt;code&gt;/&lt;/code&gt; 表示根目录&lt;br&gt;
/filename 表示匹配根目录下的文件filename&lt;/li&gt;
&lt;li&gt;匹配模式后使用 &lt;code&gt;/&lt;/code&gt; 代表是目录（不是文件）&lt;br&gt;
dirname/ 表示匹配的是dirna
      
    
    </summary>
    
    
      <category term="git" scheme="https://blog.smart-lifestyle.cn/categories/git/"/>
    
    
      <category term="git" scheme="https://blog.smart-lifestyle.cn/tags/git/"/>
    
      <category term="gitignore" scheme="https://blog.smart-lifestyle.cn/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>通过ftplib获取ftp指定日期间的文件</title>
    <link href="https://blog.smart-lifestyle.cn/posts/e530/"/>
    <id>https://blog.smart-lifestyle.cn/posts/e530/</id>
    <published>2020-05-20T13:46:14.347Z</published>
    <updated>2020-05-20T13:46:14.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用python-ftplib-库获取-某一天的文件列表，并下载到本地">使用python ftplib 库获取 某一天的文件列表，并下载到本地</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ftp 设置</span></span><br><span class="line">ftp_server = <span class="string">"******"</span></span><br><span class="line">ftp_user = <span class="string">"*****"</span></span><br><span class="line">ftp_password = <span class="string">"******"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ftp = FTP(host=ftp_server, user=ftp_user, passwd=ftp_password)</span><br><span class="line"><span class="comment"># 通过nlst获取文件列表</span></span><br><span class="line">file_list = ftp.nlst()</span><br><span class="line"><span class="comment"># 通过voidcmd 获取文件更新（上传）时间</span></span><br><span class="line">date = ftp.voidcmd(<span class="string">f"MDTM 202002190502.csv"</span>)</span><br><span class="line">print(date)</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">213</span> <span class="number">20200219170403</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取文件</span></span><br><span class="line">filter_date = <span class="string">'20200520'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有文件，生成一个迭代器</span></span><br><span class="line">items = filter(<span class="keyword">lambda</span> x: ftp.voidcmd(<span class="string">f"MDTM <span class="subst">&#123;x&#125;</span>"</span>)[<span class="number">4</span>:<span class="number">12</span>] == filter_date, file_list)</span><br><span class="line"><span class="comment"># 遍历迭代器, 通过retrbinary下载文件</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    print(<span class="string">f"file name: <span class="subst">&#123;item&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">f'temp/<span class="subst">&#123;item&#125;</span>'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        ftp.retrbinary(<span class="string">f'RETR <span class="subst">&#123;item&#125;</span>'</span>, fp.write)</span><br><span class="line"><span class="comment"># 关闭ftp</span></span><br><span class="line">ftp.quit()</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200508.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200509.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200514.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200520.csv</span><br><span class="line"></span><br><span class="line"><span class="string">'221 Goodbye.'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当ftp 服务器关闭是，再遍历过滤后的迭代器将为空</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    print(itme)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外还可以通过ftp.dir获取，具体实现参考文档：<a href="https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib" target="_blank" rel="noopener">https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib</a></p><p>参考：</p><ol><li><a href="https://docs.python.org/3/library/ftplib.html" target="_blank" rel="noopener" title="ftplib">https://docs.python.org/3/library/ftplib.html</a></li><li><a href="https://stackoverflow.com/questions/8990598/python-ftp-get-the-most-recent-file-by-date?answertab=votes#tab-top" target="_blank" rel="noopener" title="Python FTP get the most recent file by date">https://stackoverflow.com/questions/8990598/python-ftp-get-the-most-recent-file-by-date?answertab=votes#tab-top</a></li><li><a href="https://stackoverflow.com/questions/29026709/how-to-get-ftp-files-modify-time-using-python-ftplib" target="_blank" rel="noopener" title="How to get FTP file's modify time using Python ftplib">https://stackoverflow.com/questions/29026709/how-to-get-ftp-files-modify-time-using-python-ftplib</a></li><li><a href="https://tools.ietf.org/html/rfc3659#section-3" target="_blank" rel="noopener" title="rfc3659">https://tools.ietf.org/html/rfc3659#section-3</a></li><li><a href="https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib" target="_blank" rel="noopener"> https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用python-ftplib-库获取-某一天的文件列表，并下载到本地&quot;&gt;使用python ftplib 库获取 某一天的文件列表，并下载到本地&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ftp 设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ftp_server = &lt;span class=&quot;string&quot;&gt;&quot;******&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ftp_user = &lt;span class=&quot;string&quot;&gt;&quot;*****&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ftp_password = &lt;span class=&quot;string&quot;&gt;&quot;******&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ftplib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; FTP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ftp = FTP(host=ftp_server, user=ftp_user, passwd=ftp_password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过nlst获取文件列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file_list = ftp.nlst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过voidcmd 获取文件更新（上传）时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date = ftp.voidcmd(&lt;span class=&quot;string&quot;&gt;f&quot;MDTM 202002190502.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(date)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;number&quot;&gt;213&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20200219170403&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter_date = &lt;span class=&quot;string&quot;&gt;&#39;20200520&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 遍历所有文件，生成一个迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;items = filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: ftp.voidcmd(&lt;span class=&quot;string&quot;&gt;f&quot;MDTM &lt;span class=&quot;subst&quot;&gt;&amp;#123;x&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;] == filter_date, file_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 遍历迭代器, 通过retrbinary下载文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;f&quot;file name: &lt;span class=&quot;subst&quot;&gt;&amp;#123;item&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;f&#39;temp/&lt;span class=&quot;subst&quot;&gt;&amp;#123;item&amp;#125;&lt;/span&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp.retrbinary(&lt;span class=&quot;string&quot;&gt;f&#39;RETR &lt;span class=&quot;subst&quot;&gt;&amp;#123;item&amp;#125;&lt;/span&gt;&#39;&lt;/span&gt;, fp.write)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关闭ftp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ftp.quit()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
      <category term="ftplib" scheme="https://blog.smart-lifestyle.cn/tags/ftplib/"/>
    
  </entry>
  
  <entry>
    <title>ZSH下使用Anaconda</title>
    <link href="https://blog.smart-lifestyle.cn/posts/e37f/"/>
    <id>https://blog.smart-lifestyle.cn/posts/e37f/</id>
    <published>2020-05-20T13:25:04.204Z</published>
    <updated>2020-05-20T13:25:04.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在zsh下面找不到conda或者查看python，并不是用的anaconda版本的<br>anaconda的安装参考：<a href="https://docs.anaconda.com/anaconda/install/" target="_blank" rel="noopener">https://docs.anaconda.com/anaconda/install/</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑zshrc文件，将下面这句加到zshrc中；anaconda_home为anaconda的安装目录</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"[anaconda_home]/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://www.jianshu.com/p/74b1c60148e8" target="_blank" rel="noopener">https://www.jianshu.com/p/74b1c60148e8</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在zsh下面找不到conda或者查看python，并不是用的anaconda版本的&lt;br&gt;
anaconda的安装参考：&lt;a href=&quot;https://docs.anaconda.com/anaconda/install/&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
      <category term="Anaconda" scheme="https://blog.smart-lifestyle.cn/tags/Anaconda/"/>
    
      <category term="ZSH" scheme="https://blog.smart-lifestyle.cn/tags/ZSH/"/>
    
  </entry>
  
</feed>
