<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simplezhao的博客</title>
  
  <subtitle>道生一，一生二，三生万物</subtitle>
  <link href="https://blog.smart-lifestyle.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.smart-lifestyle.cn/"/>
  <updated>2021-09-05T06:11:43.970Z</updated>
  <id>https://blog.smart-lifestyle.cn/</id>
  
  <author>
    <name>simple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在apple M1上构建x86_64 Docker镜像</title>
    <link href="https://blog.smart-lifestyle.cn/posts/de6/"/>
    <id>https://blog.smart-lifestyle.cn/posts/de6/</id>
    <published>2021-09-05T05:40:26.000Z</published>
    <updated>2021-09-05T06:11:43.970Z</updated>
    
    <content type="html"><![CDATA[<p>默认通过<code>docker build</code>方式构建的镜像时arm64的版本，可以通过<code>docker inspect IMAGE_ID</code>查看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># docker image inspect <span class="number">0382</span>b9b17bdb</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;Architecture&quot;</span>: <span class="string">&quot;arm64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Variant&quot;</span>: <span class="string">&quot;v8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Size&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">        <span class="attr">&quot;VirtualSize&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的镜像时没有办法在Intel x86/64的容器服务中运行的，我们可以选择基于arm版本服务器的容器服务，更好的选择是在M1上编译 x86架构的容器镜像</p><p>Docker Desktop for Mac M1中集成了一个buildx的工具，可以方便我们编译各种跨平台的容器镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker buildx ls</span><br><span class="line"></span><br><span class="line">desktop-linux desktop-linux   running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br><span class="line">default *       docker</span><br><span class="line">  default       default         running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br></pre></td></tr></table></figure><p>使用docker buildx build来构建X86/64 docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64 . -t xxx</span><br></pre></td></tr></table></figure><p>之后就可按照正常的docker tag、docker push进行操作</p><p>更多的命令可以参考官方文档</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.jaimyn.dev/how-to-build-multi-architecture-docker-images-on-an-m1-mac/">How to build x86 (and others!) Docker images on an M1 Mac – Jaimyn’s Blog</a></p><p>[2] <a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md">buildx/buildx_build.md at master · docker/buildx (github.com)</a></p><p>[3] <a href="https://docs.docker.com/buildx/working-with-buildx/">Docker Buildx | Docker Documentation</a></p>]]></content>
    
    
    <summary type="html">在apple M1设备上使用docker buildx build构建x86_64 的镜像</summary>
    
    
    
    <category term="Devops" scheme="https://blog.smart-lifestyle.cn/categories/Devops/"/>
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
    <category term="Apple M1" scheme="https://blog.smart-lifestyle.cn/tags/Apple-M1/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu更改主机名</title>
    <link href="https://blog.smart-lifestyle.cn/posts/62e8/"/>
    <id>https://blog.smart-lifestyle.cn/posts/62e8/</id>
    <published>2021-07-01T14:17:51.000Z</published>
    <updated>2021-08-07T05:31:55.814Z</updated>
    
    <content type="html"><![CDATA[<ul><li>增加或者修改<code>/etc/hostname</code>，添加新的主机名</li><li>修改<code>/etc/hosts</code>，在127.0.0.1中添加新的主机名</li><li>如果是在云上运行vm实例，需要修改上面的<code>/etc/cloud/cloud.cfg</code>，否则重启机器后，hostname会变为默认值😭；找到<code>preserve_hostname</code>，将其值改为<code>true</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.myfreax.com/how-to-change-hostname-on-ubuntu-20-04/">如何在Ubuntu 20.04上更改主机名 (myfreax.com)</a></p>]]></content>
    
    
    <summary type="html">修改公有云上linux VM主机名</summary>
    
    
    
    <category term="运维" scheme="https://blog.smart-lifestyle.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="ubuntu" scheme="https://blog.smart-lifestyle.cn/tags/ubuntu/"/>
    
    <category term="运维" scheme="https://blog.smart-lifestyle.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>linux shell参数传递</title>
    <link href="https://blog.smart-lifestyle.cn/posts/fab/"/>
    <id>https://blog.smart-lifestyle.cn/posts/fab/</id>
    <published>2021-07-01T13:10:52.000Z</published>
    <updated>2021-08-07T05:31:55.812Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>$#</th><th>参数数量</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>$n</td><td>表示第n个参数，n为0时表示运行的脚本名</td></tr><tr><td>$@</td><td>“$1” “$2” “$3”…. 传递的多个参数</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;total params: $#&quot;</span><br><span class="line">echo &quot;filename: $0&quot;</span><br><span class="line">echo &quot;param1: $1&quot;</span><br><span class="line">echo &quot;param2: $2&quot;</span><br><span class="line">echo &quot;param3: $3&quot;</span><br><span class="line">echo &quot;==============&quot;</span><br><span class="line">for i in &quot;$@&quot;; do</span><br><span class="line">    echo &quot;param: $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total params: 2</span><br><span class="line">filename: ./test.sh</span><br><span class="line">param1: x1</span><br><span class="line">param2: x2</span><br><span class="line">param3:</span><br><span class="line">==============</span><br><span class="line">param: x1</span><br><span class="line">param: x2</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">Shell 传递参数 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <summary type="html">在shell脚本中获取执行时，传递的参数</summary>
    
    
    
    <category term="linux" scheme="https://blog.smart-lifestyle.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.smart-lifestyle.cn/tags/linux/"/>
    
    <category term="shell" scheme="https://blog.smart-lifestyle.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>SQL连接字符串中密码包含特殊字符</title>
    <link href="https://blog.smart-lifestyle.cn/posts/1538/"/>
    <id>https://blog.smart-lifestyle.cn/posts/1538/</id>
    <published>2021-07-01T08:59:35.000Z</published>
    <updated>2021-08-07T05:31:55.811Z</updated>
    
    <content type="html"><![CDATA[<p>生产环境中，数据库的密码会包含特殊字符，如果包含了<code>@</code>等符号，会被create_engine识别错误。</p><p>可以对密码进行url编码，使用<code>urllib.parse.quote_plus</code></p><blockquote><p>As the URL is like any other URL, <strong>special characters such as those that may be used in the password need to be URL encoded to be parsed correctly.</strong>. Below is an example of a URL that includes the password <code>&quot;kx%jj5/g&quot;</code>, where the percent sign and slash characters are represented as <code>%25</code> and <code>%2F</code>, respectively:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">username = <span class="string">&#x27;scoot&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;@#@%/g&#x27;</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&#x27;postgresql://<span class="subst">&#123;username&#125;</span>:<span class="subst">&#123;urllib.parse.quote_plus(password)&#125;</span>@localhost:5432/mydatabase&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.sqlalchemy.org/en/14/core/engines.html">Engine Configuration — SQLAlchemy 1.4 Documentation</a></p>]]></content>
    
    
    <summary type="html">SQLAlchemy连接字符串中密码包含特殊字符，可以进行url编码</summary>
    
    
    
    <category term="SQLAlchemy" scheme="https://blog.smart-lifestyle.cn/categories/SQLAlchemy/"/>
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/tags/SQL/"/>
    
    <category term="SQLAlchemy" scheme="https://blog.smart-lifestyle.cn/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>python文件名操作</title>
    <link href="https://blog.smart-lifestyle.cn/posts/bea3/"/>
    <id>https://blog.smart-lifestyle.cn/posts/bea3/</id>
    <published>2021-06-30T05:41:58.000Z</published>
    <updated>2021-08-07T05:31:55.814Z</updated>
    
    <content type="html"><![CDATA[<p>在进行文件上传或者文件转换时，需要进行文件上传（读取完整的本地文件路径），文件保存（仅文件名），格式转换（不包含后缀的文件名以及后缀名）</p><p>使用到python库有：</p><ul><li><p>os.path.splitext()</p><p>分离文件名和文件后缀，以最后一个’.’来获取文件后缀</p></li><li><p>os.path.split()</p><p>分离文件路径和文件名</p></li></ul><ol><li>os.path.splitext()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> splitext</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose&#x27;</span>, <span class="string">&#x27;.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入是一个不包含路径的隐藏文件格式，后缀返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;.bashrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;.bashrc&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>os.path.split()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> split</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik&#x27;</span>, <span class="string">&#x27;docker-compose.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入为一个不含路径的以.开头的文件，路径返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;.bascrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;.bascrc&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/3/library/os.path.html">os.path — Common pathname manipulations — Python 3.9.6 documentation</a></p><p>[2] <a href="https://blog.csdn.net/lilongsy/article/details/99853925">Python获取文件路径、文件名和扩展名_小龙在线-CSDN博客_python 获取路径文件名</a></p>]]></content>
    
    
    <summary type="html">获取文件路径、文件名、文件后缀</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="file" scheme="https://blog.smart-lifestyle.cn/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>修改SQL Server连接字符串</title>
    <link href="https://blog.smart-lifestyle.cn/posts/3178/"/>
    <id>https://blog.smart-lifestyle.cn/posts/3178/</id>
    <published>2021-06-30T03:13:50.000Z</published>
    <updated>2021-08-07T05:31:55.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>com.microsoft.sql server.jdbc.sqlserverException:驱动程序无法使用安全套接字层（SSL）加密建立到SQL Server的安全连接</p></blockquote><p>在高级设置中trustServerCertificate改为true即可</p><p><img src="https://oss.smart-lifestyle.cn/file/cs6v8.png" alt="image-20210630111813541"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.baooytra.com/knowledge/questions/56246/modifying-sql-server-connection-string.html?smartspace=fme-desktop-getting-started_2">修改SQL Server连接字符串-FME社区 - 亚搏在线 (baooytra.com)</a></p>]]></content>
    
    
    <summary type="html">在DataGrip中解决SQL Server连接报“驱动程序无法使用安全套接字层（SSL）加密建立到SQL Server的安全连接”</summary>
    
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://blog.smart-lifestyle.cn/tags/SQL/"/>
    
    <category term="sqlserverException" scheme="https://blog.smart-lifestyle.cn/tags/sqlserverException/"/>
    
  </entry>
  
  <entry>
    <title>函数计算中python依赖包打包</title>
    <link href="https://blog.smart-lifestyle.cn/posts/990c/"/>
    <id>https://blog.smart-lifestyle.cn/posts/990c/</id>
    <published>2021-06-30T02:09:58.000Z</published>
    <updated>2021-08-07T05:31:55.815Z</updated>
    
    <content type="html"><![CDATA[<p>以下操作使用于华为云的<a href="https://support.huaweicloud.com/functiongraph/">functiongraph</a>和腾讯云的<a href="https://cloud.tencent.com/document/product/583/9199">serverless</a></p><p><em>！有些包需要编译，因此建议在centos7中进行操作</em></p><h3 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h3><ol><li>Centos7 + python3.6环境 + zip</li><li>requirements.txt</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><p>安装依赖到本地文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">mkdir new_dir</span><br><span class="line"><span class="comment"># python依赖包安装到指定目录, -t将所有依赖安装到new_dir目录</span></span><br><span class="line">pip install -r requirements-prod.txt -t  new_dir/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>打包成zip包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到安装目录文件夹里</span></span><br><span class="line"><span class="built_in">cd</span> new_dir</span><br><span class="line"><span class="comment"># 压缩为zip包(打包的为里面的文件，不是new_dir这个目录)</span></span><br><span class="line">zip -rq package_name.1.1.zip *</span><br></pre></td></tr></table></figure></li><li><p>上传</p><p>根据各个云的要求，将zip包上传，如果zip包太大，一般都要求先上传到对象存储中</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/583/9702">云函数 部署函数 - 操作指南 - 文档中心 - 腾讯云 (tencent.com)</a></p><p>[2] <a href="https://support.huaweicloud.com/functiongraph_faq/functiongraph_03_0343.html">如何制作函数依赖包？_函数工作流 FunctionGraph_常见问题_通用问题_华为云 (huaweicloud.com)</a></p>]]></content>
    
    
    <summary type="html">如何在函数计算中为python打包依赖包</summary>
    
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/categories/serverless/"/>
    
    
    <category term="function" scheme="https://blog.smart-lifestyle.cn/tags/function/"/>
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>docker run -- 使用环境变量</title>
    <link href="https://blog.smart-lifestyle.cn/posts/50db/"/>
    <id>https://blog.smart-lifestyle.cn/posts/50db/</id>
    <published>2021-06-30T01:42:48.000Z</published>
    <updated>2021-08-07T05:31:55.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>docker run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -e, --env</span></span><br><span class="line">docker run -e ENV=prod --env IP=1.2.3.4 .....</span><br><span class="line"><span class="comment"># 如果只声明变量，没有值，表示从系统环境变量中获取改值</span></span><br><span class="line"><span class="built_in">export</span> secret=%$<span class="comment">#$FG</span></span><br><span class="line">docker run -e secret --env IP=1.2.3.4 .....</span><br><span class="line"><span class="comment"># 从文件中获取</span></span><br><span class="line">cat .env</span><br><span class="line"><span class="comment"># ENV=prod</span></span><br><span class="line"><span class="comment"># IP=1.2.3.4</span></span><br><span class="line"></span><br><span class="line">docker run --env-file .env .....</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">运行docker时，通过多种方式使用环境变量</summary>
    
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker commit -- 基于容器创建镜像</title>
    <link href="https://blog.smart-lifestyle.cn/posts/d17f/"/>
    <id>https://blog.smart-lifestyle.cn/posts/d17f/</id>
    <published>2021-06-30T01:33:50.000Z</published>
    <updated>2021-08-07T05:31:55.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker commit 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line">docker commit container_id image_name:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想修改某些内容，可以使用--change</span></span><br><span class="line">docker commit --change <span class="string">&quot;ENV DEBUG=true&quot;</span> container_id image_name:tag</span><br><span class="line">docker commit --change=<span class="string">&#x27;CMD [&quot;python&quot;, &quot;app.py&quot;]&#x27;</span> container_id image_name:tag</span><br><span class="line">docker commit --change <span class="string">&quot;EXPOSE 80&quot;</span> container_id image_name:tag</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.docker.com/engine/reference/commandline/commit/">docker commit | Docker Documentation</a></p>]]></content>
    
    
    <summary type="html">使用docker commit创建一个新的镜像</summary>
    
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.smart-lifestyle.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Alpha、Beta、RC、GA版本的区别</title>
    <link href="https://blog.smart-lifestyle.cn/posts/a038/"/>
    <id>https://blog.smart-lifestyle.cn/posts/a038/</id>
    <published>2021-06-29T15:57:37.000Z</published>
    <updated>2021-08-07T05:31:55.810Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Alpha：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</p></li><li><p>Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</p></li><li><p>RC：(Release　Candidate) 顾名思义么 ! 用在软件上就是候选版本。系统平台上就是发行候选版本。RC版不会再加入新的功能了，主要着重于除错。</p></li><li><p>GA:General Availability,正式发布的版本，在国外都是用GA来说明release版本的。</p></li><li><p>RTM：(Release to Manufacture)是给工厂大量压片的版本，内容跟正式版是一样的，不过RTM版也有出限制、评估版的。但是和正式版本的主要程序代码都是一样的。</p></li><li><p>OEM：是给计算机厂商随着计算机贩卖的，也就是随机版。只能随机器出货，不能零售。只能全新安装，不能从旧有操作系统升级。包装不像零售版精美，通常只有一面CD和说明书(授权书)。</p></li><li><p>RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版/英文版文档破解出来的。</p></li><li><p>EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别。</p></li><li><p>RTL：Retail(零售版)是真正的正式版，正式上架零售版。在安装盘的i386文件夹里有一个eula.txt，最后有一行EULAID，就是你的版本。比如简体中文正式版是EULAID:WX.4_PRO_RTL_CN，繁体中文正式版是WX.4_PRO_RTL_TW。其中：如果是WX.开头是正式版，WB.开头是测试版。_PRE，代表家庭版；_PRO，代表专业版。</p></li></ul><p>α、β、λ常用来表示软件测试过程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。</p>]]></content>
    
    
    <summary type="html">Alpha、Beta、RC、GA版本的区别</summary>
    
    
    
    <category term="软件工程" scheme="https://blog.smart-lifestyle.cn/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="软件版本" scheme="https://blog.smart-lifestyle.cn/tags/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>python poetry requirements.txt</title>
    <link href="https://blog.smart-lifestyle.cn/posts/143a/"/>
    <id>https://blog.smart-lifestyle.cn/posts/143a/</id>
    <published>2021-06-29T15:33:21.000Z</published>
    <updated>2021-08-07T05:31:55.813Z</updated>
    
    <content type="html"><![CDATA[<p>Poetry 是一个python虚拟环境和依赖管理工具，也可以用来构建打包python包，只需要一个标准化<a href="https://www.python.org/dev/peps/pep-0518/">pyproject.toml</a>文件，其他依赖管理工具如：virtualenv、pipenv等</p><p>requirements.txt是用来描述用了哪些python包，以及版本是什么</p><p>这里记录一下这两者之间如何转换</p><ul><li><p>poetry export requirements.txt</p><p>导出requirements.txt用于容器等环境构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements-prod.txt --without-hashes</span><br></pre></td></tr></table></figure></li><li><p>poerty add from requirements.txt </p><p>如果现在有requirements.txt，而后续想通过poetry管理包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat requirements.txt|xargs poetry add</span><br></pre></td></tr></table></figure><h3 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h3></li></ul><p>poetry 导出的requirements.txt里包含了依赖的python最低版本，如果poetry使用的python版本高于requirements.txt使用的python版本，执行安装时将会忽略版本不满足的包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">markupsafe</span>==<span class="number">2</span>.<span class="number">0</span>.<span class="number">1</span>; python_version &gt;= <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">20</span>.<span class="number">3</span>; python_version &gt;= <span class="string">&quot;3.7&quot;</span> and python_full_version &gt;= <span class="string">&quot;3.7.1&quot;</span></span><br></pre></td></tr></table></figure><p>比如上面两个包，如果你的python版本≤3.6，numpy将不会安装，因为它要求python版本大于3.7，但是也不会报错，这个地方很容易忽视。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/62764148/how-to-import-requirements-txt-from-an-existing-project-using-poetry">python - How to import requirements.txt from an existing project using Poetry - Stack Overflow</a></p><p>[2] <a href="https://github.com/python-poetry/poetry/blob/master/docs/cli.md">poetry/cli.md at master · python-poetry/poetry (github.com)</a></p>]]></content>
    
    
    <summary type="html">使用poetry来管理python包，并介绍如何导出和导入requirements.txt</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="poetry" scheme="https://blog.smart-lifestyle.cn/tags/poetry/"/>
    
  </entry>
  
  <entry>
    <title>python url decode</title>
    <link href="https://blog.smart-lifestyle.cn/posts/6645/"/>
    <id>https://blog.smart-lifestyle.cn/posts/6645/</id>
    <published>2021-06-29T14:42:02.000Z</published>
    <updated>2021-08-07T05:31:55.814Z</updated>
    
    <content type="html"><![CDATA[<p>在http请求中，如果url query中是Unicode，将会议url encode方式发送到服务端，可能需要我们去解析，这里用到python的库<code>urllib.parse.unquote</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?w=%E6%B1%89%E5%AD%97%EC%A4%91%EA%B5%AD</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=utf-8</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>echo.paw.cloud</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Paw/3.2.2 (Macintosh; OS X/11.4.0) GCDHTTPRequest</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">&gt;&gt; unquote(<span class="string">&#x27;/?w=%E6%B1%89%E5%AD%97%EC%A4%91%EA%B5%AD&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/?w=汉字중국&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote">urllib.parse — Parse URLs into components — Python 3.9.6 documentation</a></p><p>[2] <a href="https://stackoverflow.com/questions/16566069/url-decode-utf-8-in-python">encoding - Url decode UTF-8 in Python - Stack Overflow</a></p>]]></content>
    
    
    <summary type="html">解码url编码格式的参数</summary>
    
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.smart-lifestyle.cn/tags/python/"/>
    
    <category term="urlenocde" scheme="https://blog.smart-lifestyle.cn/tags/urlenocde/"/>
    
  </entry>
  
  <entry>
    <title>Paw文件操作</title>
    <link href="https://blog.smart-lifestyle.cn/posts/d5b5/"/>
    <id>https://blog.smart-lifestyle.cn/posts/d5b5/</id>
    <published>2021-06-29T09:02:28.000Z</published>
    <updated>2021-08-07T05:31:55.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理paw中文件的请求和下载</p></blockquote><blockquote><p>Paw is a full-featured HTTP client that lets you test and describe the APIs you build or consume. It has a beautiful native macOS interface to compose requests, inspect server responses, generate client code and export API definitions.</p></blockquote><h2 id="上传文件请求"><a href="#上传文件请求" class="headerlink" title="上传文件请求"></a>上传文件请求</h2><h3 id="通过表单上传"><a href="#通过表单上传" class="headerlink" title="通过表单上传"></a>通过表单上传</h3><ul><li><p>body类型选择Multipart</p></li><li><p>Content-Type: multipart/form-data或者application/x-www-form-urlencoded</p></li><li><p>value选择 file content</p></li></ul><p><img src="https://oss.smart-lifestyle.cn/file/mshyx.png" alt="image-20210629170831026"></p><p>然后上传文件</p><p><img src="https://oss.smart-lifestyle.cn/file/vj768.png" alt="image-20210629170927905"></p><h3 id="通过body"><a href="#通过body" class="headerlink" title="通过body"></a>通过body</h3><h2 id="下载响应返回文件"><a href="#下载响应返回文件" class="headerlink" title="下载响应返回文件"></a>下载响应返回文件</h2><p>在file – 导出响应—响应body即可</p><p><img src="https://oss.smart-lifestyle.cn/file/8majz.png" alt="image-20210629170706183"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/40680954/how-do-download-response-binary">paw app - How do download response binary? - Stack Overflow</a></p><p>[2] <a href="https://paw.cloud/docs/getting-started/set-request-body#Set_Multipart_body">Documentation | Paw</a></p>]]></content>
    
    
    <summary type="html">在使用paw中，如何使用文件请求和下载文件</summary>
    
    
    
    <category term="工具" scheme="https://blog.smart-lifestyle.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="paw" scheme="https://blog.smart-lifestyle.cn/tags/paw/"/>
    
  </entry>
  
  <entry>
    <title>QPS和TPS</title>
    <link href="https://blog.smart-lifestyle.cn/posts/3f2f/"/>
    <id>https://blog.smart-lifestyle.cn/posts/3f2f/</id>
    <published>2021-06-29T08:38:03.000Z</published>
    <updated>2021-08-07T05:31:55.810Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>QPS</p><p>英文全称：Queries Per Second，即每秒的响应的请求数，也代表最大吞吐能力，QPS的<strong>一次请求</strong>代表一个接口的一次请求到服务器返回结果</p></li><li><p>TPS</p><p>英文全称：Transactions Per Second，即每秒处理的事务数目，一个事务指的是<strong>一个客户端</strong>向服务器发送请求并返回结果的过程。</p><p>TPS包括如下过程：用户请求服务器，服务器处理数据，服务器返回数据</p><p>例如，某次客户访问一个页面会请求4次服务器，其中1次html，1次css，1次js，1次API，那么访问这个页面会产生一个“T”，而会产生四个“Q”。</p></li><li><p>PV</p><p>英文全称 Page View，即页面浏览量，用户每一次对网站中每个页面访问，就会被记录一次，多次刷新一个页面会累计PV</p></li><li><p>UV</p><p>英文全称：Unique Visitor，即独立访客访问数，统计1天内访问某站点的用户数（以cookie为依据）</p></li><li><p>IP</p><p>即独立IP数，指的是一天内多少个独立IP浏览页面，如果多个用户在同一个路由器内上网，可能会被记录为1个独立IP访问者</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://juejin.cn/post/6844903959379853325">QPS和TPS的区别 (juejin.cn)</a></p>]]></content>
    
    
    <summary type="html">理解QPS和TPS的区别</summary>
    
    
    
    <category term="测试" scheme="https://blog.smart-lifestyle.cn/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://blog.smart-lifestyle.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="性能指标" scheme="https://blog.smart-lifestyle.cn/tags/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建PGSQL for Serverless</title>
    <link href="https://blog.smart-lifestyle.cn/posts/6bab/"/>
    <id>https://blog.smart-lifestyle.cn/posts/6bab/</id>
    <published>2021-06-29T07:12:13.000Z</published>
    <updated>2021-08-07T05:31:55.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 想使用一个独立的数据库服务，使用量和规模不用太大</p></blockquote><p>单独购买数据库实例，太贵了</p><p><img src="https://oss.smart-lifestyle.cn/file/tmasb.png" alt="image-20210629151750968"></p><p>发现在数据库服务列表里有一个Serverless版本，看了介绍，需要通过API或者serverless组件方式创建，目前还处于免费的公测阶段，嘿嘿😋，搞起</p><p><img src="https://oss.smart-lifestyle.cn/file/2sg3e.png" alt="image-20210629152124434"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>操作步骤按照<a href="https://cloud.tencent.com/document/product/1154/43004">官网说明</a>，很快就能完成</p><h3 id="安装-serverless-cli"><a href="#安装-serverless-cli" class="headerlink" title="安装 serverless cli"></a>安装 serverless cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serverless</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建目录，并新建一个serverless.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"><span class="attr">component:</span> <span class="string">postgresql</span> <span class="comment">#(必填) 引用 component 的名称，当前用到的是 postgresql 组件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">serverlessDB</span> <span class="comment"># (必填) 该 postgresql 组件创建的实例名称</span></span><br><span class="line"><span class="attr">org:</span> <span class="string">smart-lifestyle</span> <span class="comment"># (可选) 用于记录组织信息，默认值为您的腾讯云账户 appid</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">serverlessDB</span> <span class="comment"># (可选) 该 sql 应用名称</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">prod</span> <span class="comment"># (可选) 用于区分环境信息，默认值是 dev</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-beijing</span>  <span class="comment"># 可选 ap-guangzhou, ap-shanghai, ap-beijing</span></span><br><span class="line">  <span class="attr">zone:</span> <span class="string">ap-beijing-3</span>  <span class="comment"># 可选 ap-guangzhou-2, ap-shanghai-2, ap-beijing-3</span></span><br><span class="line">  <span class="attr">dBInstanceName:</span> <span class="string">serverlessdb</span></span><br><span class="line">  <span class="attr">vpcConfig:</span></span><br><span class="line">    <span class="attr">vpcId:</span> <span class="string">根据实际填写</span></span><br><span class="line">    <span class="attr">subnetId:</span> <span class="string">根据实际填写</span></span><br><span class="line">  <span class="attr">extranetAccess:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>执行 <code>sls deploy</code>自动完成部署（会显示二维码进行授权），成功之后，会打印显示数据库的连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">private:</span></span><br><span class="line">  <span class="attr">connectionString:</span> <span class="string">postgresql://xxxx:xxxx@10.0.0.9:5432/tencentdb_hy7vs5lu</span></span><br><span class="line">  <span class="attr">host:</span>             <span class="number">10.0</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line">  <span class="attr">port:</span>             <span class="number">5432</span></span><br><span class="line">  <span class="attr">user:</span>             <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">password:</span>         <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">dbname:</span>           <span class="string">tencentdb_hy7vs5lu</span></span><br></pre></td></tr></table></figure><p>且在数据库实例serverless版中可以查看到数据库</p><p><img src="https://oss.smart-lifestyle.cn/file/jenl2.png" alt="image-20210629151932596"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>创建的数据库没有开启外网连接，而且在实际生产中，也禁止改操作，因此如果想在其他VPC中使用，需要使用到对等连接</p><p><img src="https://oss.smart-lifestyle.cn/file/7lno9.png" alt="img"></p><p>具体操作步骤参考<a href="https://cloud.tencent.com/document/product/553/18836">官网说明</a></p><ol><li>新建有个对等连接</li></ol><p><img src="https://oss.smart-lifestyle.cn/file/9tase.png" alt="image-20210629154210941"></p><ol start="2"><li>在两端路由表中增加策略，选择对等连接</li></ol><p><img src="https://oss.smart-lifestyle.cn/file/tzmch.png" alt="image-20210629154322540"></p><p>完成以上步骤之后可以进行测试</p><p>无法ping通，但是可以通过telnet 连接到数据库服务，完成。</p><p><img src="https://oss.smart-lifestyle.cn/file/92fpw.png" alt="image-20210629154533240"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/1154/43004">Serverless 应用中心 数据库 PostgreSQL 组件 - Serverless 组件 - 文档中心 - 腾讯云 (tencent.com)</a></p><p>[2] <a href="https://cloud.tencent.com/document/product/553/18836">对等连接 同账号创建对等连接通信 - 快速入门 - 文档中心 - 腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <summary type="html">使用腾讯云serverless快速搭建postgresql数据库</summary>
    
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/categories/serverless/"/>
    
    
    <category term="serverless" scheme="https://blog.smart-lifestyle.cn/tags/serverless/"/>
    
    <category term="scf" scheme="https://blog.smart-lifestyle.cn/tags/scf/"/>
    
  </entry>
  
  <entry>
    <title>rancher初步使用</title>
    <link href="https://blog.smart-lifestyle.cn/posts/363a/"/>
    <id>https://blog.smart-lifestyle.cn/posts/363a/</id>
    <published>2021-06-23T06:14:14.000Z</published>
    <updated>2021-08-07T05:31:55.814Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>micropython之禅</title>
    <link href="https://blog.smart-lifestyle.cn/posts/58bd/"/>
    <id>https://blog.smart-lifestyle.cn/posts/58bd/</id>
    <published>2021-06-22T08:41:00.000Z</published>
    <updated>2021-08-07T05:31:55.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code,</span><br><span class="line">Hack it,</span><br><span class="line">Less <span class="keyword">is</span> more,</span><br><span class="line">Keep it simple,</span><br><span class="line">Small <span class="keyword">is</span> beautiful,</span><br><span class="line"></span><br><span class="line">Be brave! Break things! Learn <span class="keyword">and</span> have fun!</span><br><span class="line">Express yourself <span class="keyword">with</span> MicroPython.</span><br><span class="line"></span><br><span class="line">Happy hacking! :-)</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://oss.smart-lifestyle.cn/file/bmwmh.png" alt="ESP8266 and MicroPython - Part 1 - Hackster.io" style="zoom:50%;" />       <img src="https://oss.smart-lifestyle.cn/file/u74xj.png" alt="Micro Bit - 维基百科，自由的百科全书" style="zoom:50%;" /></p>]]></content>
    
    
    <summary type="html">zen of micropython</summary>
    
    
    
    <category term="micropython" scheme="https://blog.smart-lifestyle.cn/categories/micropython/"/>
    
    
    <category term="micropython" scheme="https://blog.smart-lifestyle.cn/tags/micropython/"/>
    
    <category term="microbit" scheme="https://blog.smart-lifestyle.cn/tags/microbit/"/>
    
  </entry>
  
  <entry>
    <title>jupyter notebook使用环境变量</title>
    <link href="https://blog.smart-lifestyle.cn/posts/9e2a/"/>
    <id>https://blog.smart-lifestyle.cn/posts/9e2a/</id>
    <published>2021-06-18T07:44:57.000Z</published>
    <updated>2021-08-07T05:31:55.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用python-dotenv库，在jupyter notebook中加载环境变量</p></blockquote><ul><li>安装python-dotenv</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-dotenv</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">load_dotenv(dotenv_path=<span class="string">&#x27;.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db_user = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>)</span><br><span class="line">db_password = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>)</span><br><span class="line">db_host = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>)</span><br><span class="line">db_name = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://nono.ma/environment-variable-python-notebook-os-environ-get">Read Environment Variables in a Python Notebook · Nono Martínez Alonso</a></p>]]></content>
    
    
    <summary type="html">在jupyter notebook中使用环境变量</summary>
    
    
    
    <category term="jupyter" scheme="https://blog.smart-lifestyle.cn/categories/jupyter/"/>
    
    
    <category term="jupyter" scheme="https://blog.smart-lifestyle.cn/tags/jupyter/"/>
    
    <category term="env" scheme="https://blog.smart-lifestyle.cn/tags/env/"/>
    
  </entry>
  
  <entry>
    <title>postgresql split_part coalesce</title>
    <link href="https://blog.smart-lifestyle.cn/posts/89ab/"/>
    <id>https://blog.smart-lifestyle.cn/posts/89ab/</id>
    <published>2021-06-18T06:35:43.000Z</published>
    <updated>2021-08-07T05:31:55.813Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>split_part 在没有命中时返回的是空字符串，而不是null，COALESCE返回第一个不为null的元素</p></blockquote><p>在COALESCE结合split_part的使用中，想通过split_part分割字符串，然后通过COALESCE取出最后一个字符串，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(split_part(<span class="string">&#x27;First-Second&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), split_part(<span class="string">&#x27;First-Second&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>返回<code>Second</code></p><p>而当分隔符不存在时，缺返回了空，目标是返回<code>First</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>按照官方对COALESCE的说明：</p><blockquote><p>The <code>COALESCE</code> function returns the first of its arguments that is not null. Null is returned only if all arguments are null. It is often used to substitute a default value for null values when data is retrieved for display, for example:</p><p><code>SELECT COALESCE(description, short_description, &#39;(none)&#39;) ...</code></p></blockquote><p>返回第一个不为null的参数，如果都是null，则返回null</p><p>split_part的说明</p><table><thead><tr><th><code>split_part(string text, delimiter text, field int)</code></th><th><code>text</code></th><th>Split <code>string</code> on <code>delimiter</code> and return the given field (counting from one)</th><th><code>split_part(&#39;abc~@~def~@~ghi&#39;, &#39;~@~&#39;, 2)</code></th><th><code>def</code></th></tr></thead></table><p><em>split_part在没有命中时，返回的为空字符串，而部署null</em></p><p>因此要结合NULLIF使用</p><blockquote><p><code>NULLIF(value1, value2)</code></p><p>The <code>NULLIF</code> function returns a null value if <code>value1</code> equals <code>value2</code>; otherwise it returns <code>value1</code>. This can be used to perform the inverse operation of the <code>COALESCE</code> example given above:</p></blockquote><p>如果元素相等，则返回null，否则返回第一个元素，因此可以用了判断值是否为’’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NULLIF</span>(value1, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最终实现的SQL语句如下，并成功返回<code>First</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(<span class="built_in">NULLIF</span>(split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;&#x27;</span>), split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.postgresql.org/docs/9.1/functions-conditional.html">PostgreSQL: Documentation: 9.1: Conditional Expressions</a></p><p>[2] <a href="https://www.postgresql.org/docs/13/functions-string.html">PostgreSQL: Documentation: 13: 9.4. String Functions and Operators</a></p><p>[3] <a href="https://stackoverflow.com/questions/14035883/how-to-convert-empty-to-null-in-postgresql/14035890#14035890">php - How to convert empty to null in PostgreSQL? - Stack Overflow</a></p><p>[4] <a href="https://stackoverflow.com/questions/45766644/substituting-value-in-empty-field-after-using-split-part">sql - Substituting value in empty field after using split_part - Stack Overflow</a></p><p>[5] <a href="https://stackoverflow.com/questions/60381782/snowflake-split-part-function-not-returning-null-values">Snowflake SPLIT_PART Function not returning Null values - Stack Overflow</a></p>]]></content>
    
    
    <summary type="html">split_part没有命中时返回为空字符串，而不是null，COALESCE返回第一个不为null的元素</summary>
    
    
    
    <category term="postgresql" scheme="https://blog.smart-lifestyle.cn/categories/postgresql/"/>
    
    
    <category term="split_part" scheme="https://blog.smart-lifestyle.cn/tags/split-part/"/>
    
    <category term="coalesce" scheme="https://blog.smart-lifestyle.cn/tags/coalesce/"/>
    
  </entry>
  
  <entry>
    <title>pandas与SQL整理-1</title>
    <link href="https://blog.smart-lifestyle.cn/posts/eac6/"/>
    <id>https://blog.smart-lifestyle.cn/posts/eac6/</id>
    <published>2021-06-18T06:08:16.000Z</published>
    <updated>2021-08-07T05:31:55.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取数据库内容"><a href="#读取数据库内容" class="headerlink" title="读取数据库内容"></a>读取数据库内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># excel header无格式</span></span><br><span class="line">pd.io.formats.excel.ExcelFormatter.header_style = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">db_user = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>)</span><br><span class="line">db_password = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>)</span><br><span class="line">db_host = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>)</span><br><span class="line">db_name = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&#x27;postgresql://<span class="subst">&#123;db_user&#125;</span>:<span class="subst">&#123;db_password&#125;</span>@<span class="subst">&#123;db_host&#125;</span>:5432/<span class="subst">&#123;db_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取表</span></span><br><span class="line">df = pd.read_sql_table(<span class="string">&#x27;AssetWeeklyReportView&#x27;</span>, engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到excel中</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;asset_table.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过是否为空进行过滤</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;Type&#x27;</span>].notnull()]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;Type&#x27;</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line">size = <span class="built_in">len</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一行</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df1.iterrows():</span><br><span class="line">  <span class="built_in">print</span>(row[<span class="string">&#x27;Type&#x27;</span>].....)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.csdn.net/weixin_45616551/article/details/103469386">pandas dataframe len() 和 count() 的区别_weixin_45616551的博客-CSDN博客</a></p><p>[2] <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#sql-queries">IO tools (text, CSV, HDF5, …) — pandas 1.2.4 documentation (pydata.org)</a></p>]]></content>
    
    
    <summary type="html">使用pandas读取数据表，并导出excel</summary>
    
    
    
    <category term="pandas" scheme="https://blog.smart-lifestyle.cn/categories/pandas/"/>
    
    
    <category term="pandas" scheme="https://blog.smart-lifestyle.cn/tags/pandas/"/>
    
    <category term="sqlalchemy" scheme="https://blog.smart-lifestyle.cn/tags/sqlalchemy/"/>
    
  </entry>
  
</feed>
