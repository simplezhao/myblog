<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alpha、Beta、RC、GA版本的区别</title>
    <url>/posts/a038/</url>
    <content><![CDATA[<ul>
<li><p>Alpha：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</p>
</li>
<li><p>Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</p>
</li>
<li><p>RC：(Release　Candidate) 顾名思义么 ! 用在软件上就是候选版本。系统平台上就是发行候选版本。RC版不会再加入新的功能了，主要着重于除错。</p>
</li>
<li><p>GA:General Availability,正式发布的版本，在国外都是用GA来说明release版本的。</p>
</li>
<li><p>RTM：(Release to Manufacture)是给工厂大量压片的版本，内容跟正式版是一样的，不过RTM版也有出限制、评估版的。但是和正式版本的主要程序代码都是一样的。</p>
</li>
<li><p>OEM：是给计算机厂商随着计算机贩卖的，也就是随机版。只能随机器出货，不能零售。只能全新安装，不能从旧有操作系统升级。包装不像零售版精美，通常只有一面CD和说明书(授权书)。</p>
</li>
<li><p>RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版/英文版文档破解出来的。</p>
</li>
<li><p>EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别。</p>
</li>
<li><p>RTL：Retail(零售版)是真正的正式版，正式上架零售版。在安装盘的i386文件夹里有一个eula.txt，最后有一行EULAID，就是你的版本。比如简体中文正式版是EULAID:WX.4_PRO_RTL_CN，繁体中文正式版是WX.4_PRO_RTL_TW。其中：如果是WX.开头是正式版，WB.开头是测试版。_PRE，代表家庭版；_PRO，代表专业版。</p>
</li>
</ul>
<p>α、β、λ常用来表示软件测试过程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件版本</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple M1 node多版本切换</title>
    <url>/posts/aa65/</url>
    <content><![CDATA[<p>本文介绍如何使用nvm在Macbook M1下管理多个版本（架构）的node</p>
<p>目前Node V16已经原生支持Macbook M1，但是如果选择V16以下的版本，需要安装X86的版本</p>
<p><img src="https://oss.smart-lifestyle.cn/file/brnx9.png" alt="image-20211011164226288"></p>
<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><h3 id="最新ARM版本V16"><a href="#最新ARM版本V16" class="headerlink" title="最新ARM版本V16+"></a>最新ARM版本V16+</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v16.6.0</span><br><span class="line">node -p process.arch</span><br><span class="line">arm64</span><br></pre></td></tr></table></figure>

<h3 id="安装X86版本"><a href="#安装X86版本" class="headerlink" title="安装X86版本"></a>安装X86版本</h3><h4 id="切换到x86环境"><a href="#切换到x86环境" class="headerlink" title="切换到x86环境"></a>切换到x86环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch -x86_64 zsh</span><br></pre></td></tr></table></figure>

<h4 id="查看当前环境"><a href="#查看当前环境" class="headerlink" title="查看当前环境"></a>查看当前环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch</span><br><span class="line"><span class="comment"># i386</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装node-1"><a href="#安装node-1" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install v14</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -p process.arch</span><br><span class="line">x64</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/nvm-sh/nvm#installing-and-updating">nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p>
<p>[2] <a href="https://www.jurnalanas.com/node-js-mac-m1/">macOS Big Sur: How to setup Node.js on Apple M1 Machine – Jurnal Anas</a></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深度拷贝</title>
    <url>/posts/b60b/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Paw文件操作</title>
    <url>/posts/d5b5/</url>
    <content><![CDATA[<blockquote>
<p>整理paw中文件的请求和下载</p>
</blockquote>
<blockquote>
<p>Paw is a full-featured HTTP client that lets you test and describe the APIs you build or consume. It has a beautiful native macOS interface to compose requests, inspect server responses, generate client code and export API definitions.</p>
</blockquote>
<h2 id="上传文件请求"><a href="#上传文件请求" class="headerlink" title="上传文件请求"></a>上传文件请求</h2><h3 id="通过表单上传"><a href="#通过表单上传" class="headerlink" title="通过表单上传"></a>通过表单上传</h3><ul>
<li><p>body类型选择Multipart</p>
</li>
<li><p>Content-Type: multipart/form-data或者application/x-www-form-urlencoded</p>
</li>
<li><p>value选择 file content</p>
</li>
</ul>
<p><img src="https://oss.smart-lifestyle.cn/file/mshyx.png" alt="image-20210629170831026"></p>
<p>然后上传文件</p>
<p><img src="https://oss.smart-lifestyle.cn/file/vj768.png" alt="image-20210629170927905"></p>
<h3 id="通过body"><a href="#通过body" class="headerlink" title="通过body"></a>通过body</h3><h2 id="下载响应返回文件"><a href="#下载响应返回文件" class="headerlink" title="下载响应返回文件"></a>下载响应返回文件</h2><p>在file – 导出响应—响应body即可</p>
<p><img src="https://oss.smart-lifestyle.cn/file/8majz.png" alt="image-20210629170706183"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/40680954/how-do-download-response-binary">paw app - How do download response binary? - Stack Overflow</a></p>
<p>[2] <a href="https://paw.cloud/docs/getting-started/set-request-body#Set_Multipart_body">Documentation | Paw</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>paw</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/posts/aaa7/</url>
    <content><![CDATA[<blockquote>
<p>参考：</p>
<ol>
<li><a href="https://github.com/python-poetry/poetry">https://github.com/python-poetry/poetry</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/110721747">https://zhuanlan.zhihu.com/p/110721747</a></li>
<li><a href="https://blog.csdn.net/daihaoxin/article/details/109262807">https://blog.csdn.net/daihaoxin/article/details/109262807</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>dependency</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Type Checking</title>
    <url>/posts/acc1/</url>
    <content><![CDATA[<blockquote>
<p>参考：</p>
<ol>
<li><p><a href="https://testdriven.io/blog/python-type-checking/">https://testdriven.io/blog/python-type-checking/</a></p>
</li>
<li><p><a href="https://testdriven.io/blog/python-code-quality/#running-code-quality-tools">https://testdriven.io/blog/python-code-quality/#running-code-quality-tools</a></p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>QPS和TPS</title>
    <url>/posts/3f2f/</url>
    <content><![CDATA[<ul>
<li><p>QPS</p>
<p>英文全称：Queries Per Second，即每秒的响应的请求数，也代表最大吞吐能力，QPS的<strong>一次请求</strong>代表一个接口的一次请求到服务器返回结果</p>
</li>
<li><p>TPS</p>
<p>英文全称：Transactions Per Second，即每秒处理的事务数目，一个事务指的是<strong>一个客户端</strong>向服务器发送请求并返回结果的过程。</p>
<p>TPS包括如下过程：用户请求服务器，服务器处理数据，服务器返回数据</p>
<p>例如，某次客户访问一个页面会请求4次服务器，其中1次html，1次css，1次js，1次API，那么访问这个页面会产生一个“T”，而会产生四个“Q”。</p>
</li>
<li><p>PV</p>
<p>英文全称 Page View，即页面浏览量，用户每一次对网站中每个页面访问，就会被记录一次，多次刷新一个页面会累计PV</p>
</li>
<li><p>UV</p>
<p>英文全称：Unique Visitor，即独立访客访问数，统计1天内访问某站点的用户数（以cookie为依据）</p>
</li>
<li><p>IP</p>
<p>即独立IP数，指的是一天内多少个独立IP浏览页面，如果多个用户在同一个路由器内上网，可能会被记录为1个独立IP访问者</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://juejin.cn/post/6844903959379853325">QPS和TPS的区别 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>性能指标</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTFul API设计规则</title>
    <url>/posts/81a9/</url>
    <content><![CDATA[<blockquote>
<p>总结一下restful api在设计时的一些规则</p>
</blockquote>
<p>首先应该满足，无论API内部如何实现，任何客户端（python、c#、C++等）都应该能够代用API，</p>
<p>引入版本管理，对于已发布的API，保持已使用的客户端不受影响</p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>RESTful API设计的主要原则</p>
<ul>
<li>REST API围绕资源设计，资源是可由客户端访问的任何类型的对象、数据或服务</li>
<li>每一个资源都有一个标识符，即唯一标识该资源的URI</li>
<li>通过JSON作为数据交换格式</li>
<li>REST API使用同一接口（POST新增、GET获取、DELETE删除、PUT修改等）</li>
<li>REST API使用无状态模型（最好）</li>
</ul>
<h3 id="URI基于（复数）名词，且简洁"><a href="#URI基于（复数）名词，且简洁" class="headerlink" title="URI基于（复数）名词，且简洁"></a>URI基于（复数）名词，且简洁</h3><p>资源的URI基于名词而不是动词（对资源执行的操作），资源是一个集合，最好用名词的复数</p>
<ul>
<li>用名词不用动词</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 好</span><br><span class="line">https://d-wz.cc/orders</span><br><span class="line"># 不好</span><br><span class="line">https://d-wz.cc/create-order  </span><br></pre></td></tr></table></figure>

<ul>
<li>避免设计过长的资源URI</li>
</ul>
<p>避免请求复杂度避免超过<strong>集合/项目/集合</strong>的资源</p>
<p>比如查询某个客户某个订单的产品有哪些</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 请过过于复杂</span><br><span class="line">https://d-wz.cc/customers/2/orders/100/products</span><br></pre></td></tr></table></figure>

<p>拆分为2步</p>
<ol>
<li>先获取客户订单号列表</li>
<li>再获取订单号下面的产品列表</li>
<li>如果查询某个产品详细信息，可以再加一步</li>
</ol>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># 第一步 </span><br><span class="line">https://d-wz.cc/customers/2/orders</span><br><span class="line"># 第二步</span><br><span class="line">https://d-wz.cc/orders/100/products</span><br></pre></td></tr></table></figure>

<h3 id="按照HTTP定义方法实现"><a href="#按照HTTP定义方法实现" class="headerlink" title="按照HTTP定义方法实现"></a>按照HTTP定义方法实现</h3><ol>
<li>根据HTTP方法定义API操作</li>
</ol>
<ul>
<li><strong>GET</strong> 检索位于指定 URI 处的资源。 响应消息的正文包含所请求资源的详细信息。</li>
<li><strong>POST</strong> 在指定的 URI 处创建新资源。 请求消息的正文将提供新资源的详细信息。 请注意，POST 还用于触发不实际创建资源的操作。</li>
<li><strong>PUT</strong> 在指定的 URI 处创建或替换资源。 请求消息的正文指定要创建或更新的资源。</li>
<li><strong>PATCH</strong> 对资源执行部分更新。 请求正文包含要应用到资源的一组更改。</li>
<li><strong>DELETE</strong> 删除位于指定 URI 处的资源</li>
</ul>
<p>特定请求的影响应取决于资源是集合还是单个子项。 下表总结了大多数 RESTful 实现使用电子商务示例采用的共同约定。 并非所有这些请求都可能会实现 — ，这取决于特定方案。</p>
<table>
<thead>
<tr>
<th align="left"><strong>资源</strong></th>
<th align="left"><strong>POST</strong></th>
<th align="left"><strong>GET</strong></th>
<th align="left"><strong>PUT</strong></th>
<th align="left"><strong>DELETE</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">/customers</td>
<td align="left">创建新客户</td>
<td align="left">检索所有客户</td>
<td align="left">批量更新客户</td>
<td align="left">删除所有客户</td>
</tr>
<tr>
<td align="left">/customers/1</td>
<td align="left">错误</td>
<td align="left">检索客户 1 的详细信息</td>
<td align="left">如果客户 1 存在，则更新其详细信息</td>
<td align="left">删除客户 1</td>
</tr>
<tr>
<td align="left">/customers/1/orders</td>
<td align="left">创建客户 1 的新订单</td>
<td align="left">检索客户 1 的所有订单</td>
<td align="left">批量更新客户 1 的订单</td>
<td align="left">删除客户 1 的所有订单</td>
</tr>
</tbody></table>
<ol start="2">
<li>使用HTPP标准规范实现返回码</li>
</ol>
<p>客户端发送给服务端的content-type，如果服务端不支持，返回415错误</p>
<p>客户端请求包含accept，如果服务端无法匹配，返回406错误</p>
<ul>
<li>get方法<ol>
<li>成功返回200， 找不到返回404</li>
</ol>
</li>
<li>post方法<pre><code>   1. 创建新资源返回201，新资源的URI包含在响应的Location标头中
2. 如果处理但未创建新资源，返回200
3. 客户端将无效数据放入到请求，服务端返回400
</code></pre>
</li>
<li>delete方法<pre><code>  1. 删除成功返回204
</code></pre>
<ol start="2">
<li>资源不存在返回404</li>
</ol>
</li>
</ul>
<ol start="3">
<li>异步操作中的规范</li>
</ol>
<p>异步操作，是请求发送到服务端后，服务端需要一段时间才能处理完成的，如果需要等待该操作完成后才向客户端发送响应，延迟太大，这时候需要考虑异步操作，首先返回状态码202，表示请求接受处理，但尚未完成，然后在返回内容中，包含一个链接，用户可以去查询请求的当前状态</p>
<p>第一步，先返回202状态法，并同时将后续查询状态URI放到Location中</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>/api/status/12345</span><br></pre></td></tr></table></figure>

<p>客户端向状态终结点发送GET请求，响应中返回之前请求的状态</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;In progress&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;link&quot;</span>: &#123; <span class="attr">&quot;rel&quot;</span>:<span class="string">&quot;cancel&quot;</span>, <span class="attr">&quot;method&quot;</span>:<span class="string">&quot;delete&quot;</span>, <span class="attr">&quot;href&quot;</span>:<span class="string">&quot;/api/status/12345&quot;</span> &#125;</span></span><br><span class="line"><span class="json">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果异步操作创建了新资源，状态终结点返回状态码303，并包含一个location标头用于提供新资源的URI</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">303</span> See Other</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>/api/orders/12345</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>对于终结点带不带’/‘都应该支持</p>
<p>用一个URI以’/‘结尾或者不带’/‘服务端都应该支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下面应该返回同样内容</span><br><span class="line">curl https://d-wz.cc/api/cats/</span><br><span class="line">curl https://d-wz.cc/api/cats</span><br></pre></td></tr></table></figure></li>
<li><p>401和403区别</p>
<ul>
<li><p>401 表示用户名或者密码错误，或者无法识别用户身份</p>
</li>
<li><p>403 表示能够识别用户身份，但是他没有权限去操作</p>
</li>
</ul>
</li>
</ol>
<h3 id="返回数据需要筛选和分页"><a href="#返回数据需要筛选和分页" class="headerlink" title="返回数据需要筛选和分页"></a>返回数据需要筛选和分页</h3><p>前端展示的数据往往是所有数据的一小部分，通过筛选和分页减少对服务端和客户端的压力，在GET请求中使用query方式，比如增加page表示第几页，page_size表示每页的数量，bool值表示状态等等</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span><span class="punctuation">: </span>/books?published=true&amp;page=2&amp;page_size=10</span><br></pre></td></tr></table></figure>



<h3 id="API设计时要考虑版本"><a href="#API设计时要考虑版本" class="headerlink" title="API设计时要考虑版本"></a>API设计时要考虑版本</h3><p>尽可能保证释放出去的API，客户在使用后不用修改接口</p>
<p>目前考虑两种方式做版本控制</p>
<ol>
<li>在URI中增加版本号，对于URI一致的，以前存在的URI按照以前一样继续运行，如果新版增加了新的返回字段，则通过增加版本号的方式管理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://adventure-works.com/v2/customers/3</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>查询字符串方式版本控制</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://adventure-works.com/customers/3?version=2</span><br></pre></td></tr></table></figure>

<p>注意：某些较旧的 Web 浏览器和 Web 代理不会缓存在 URI 中包含查询字符串的请求的响应。 这可能会降低使用 web API 的 web 应用程序的性能，并从这类 web 浏览器中运行。</p>
<p>URI 版本控制和查询字符串版本控制方案都是缓存友好的，因为同一 URI/查询字符串组合每次都指向相同的数据。</p>
<h3 id="API发布要有配套接口文档支持"><a href="#API发布要有配套接口文档支持" class="headerlink" title="API发布要有配套接口文档支持"></a>API发布要有配套接口文档支持</h3><p>比如使用swagger管理API文档，在API发布时，同样要发布接口文档，来方便用户了解如何调用你的API</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design">Web API 设计最佳做法 - Azure Architecture Center | Microsoft Docs</a></p>
<p>[2] <a href="https://abdulrwahab.medium.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f">API Architecture — Design Best Practices for REST APIs | by Abdul Wahab | Oct, 2021 | Medium</a></p>
<p>[3] <a href="https://docs.microsoft.com/zh-cn/azure/architecture/patterns/async-request-reply">异步Request-Reply模式 - Azure Architecture Center | Microsoft Docs</a></p>
<p>[4] <a href="https://mathieu.fenniak.net/the-api-checklist/">The Web API Checklist – 43 Things To Think About When Designing, Testing, and Releasing your API (fenniak.net)</a></p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL连接字符串中密码包含特殊字符</title>
    <url>/posts/1538/</url>
    <content><![CDATA[<p>生产环境中，数据库的密码会包含特殊字符，如果包含了<code>@</code>等符号，会被create_engine识别错误。</p>
<p>可以对密码进行url编码，使用<code>urllib.parse.quote_plus</code></p>
<blockquote>
<p>As the URL is like any other URL, <strong>special characters such as those that may be used in the password need to be URL encoded to be parsed correctly.</strong>. Below is an example of a URL that includes the password <code>&quot;kx%jj5/g&quot;</code>, where the percent sign and slash characters are represented as <code>%25</code> and <code>%2F</code>, respectively:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">username = <span class="string">&#x27;scoot&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;@#@%/g&#x27;</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&#x27;postgresql://<span class="subst">&#123;username&#125;</span>:<span class="subst">&#123;urllib.parse.quote_plus(password)&#125;</span>@localhost:5432/mydatabase&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.sqlalchemy.org/en/14/core/engines.html">Engine Configuration — SQLAlchemy 1.4 Documentation</a></p>
]]></content>
      <categories>
        <category>SQLAlchemy</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLAlchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>ZSH下使用Anaconda</title>
    <url>/posts/e37f/</url>
    <content><![CDATA[<blockquote>
<p>在zsh下面找不到conda或者查看python，并不是用的anaconda版本的<br>anaconda的安装参考：<a href="https://docs.anaconda.com/anaconda/install/">https://docs.anaconda.com/anaconda/install/</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑zshrc文件，将下面这句加到zshrc中；anaconda_home为anaconda的安装目录</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;[anaconda_home]/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://www.jianshu.com/p/74b1c60148e8">https://www.jianshu.com/p/74b1c60148e8</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>ZSH</tag>
      </tags>
  </entry>
  <entry>
    <title>docker commit -- 基于容器创建镜像</title>
    <url>/posts/d17f/</url>
    <content><![CDATA[<ul>
<li>docker commit 命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line">docker commit container_id image_name:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想修改某些内容，可以使用--change</span></span><br><span class="line">docker commit --change <span class="string">&quot;ENV DEBUG=true&quot;</span> container_id image_name:tag</span><br><span class="line">docker commit --change=<span class="string">&#x27;CMD [&quot;python&quot;, &quot;app.py&quot;]&#x27;</span> container_id image_name:tag</span><br><span class="line">docker commit --change <span class="string">&quot;EXPOSE 80&quot;</span> container_id image_name:tag</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.docker.com/engine/reference/commandline/commit/">docker commit | Docker Documentation</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker run -- 使用环境变量</title>
    <url>/posts/50db/</url>
    <content><![CDATA[<ul>
<li><p>docker run</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -e, --env</span></span><br><span class="line">docker run -e ENV=prod --env IP=1.2.3.4 .....</span><br><span class="line"><span class="comment"># 如果只声明变量，没有值，表示从系统环境变量中获取改值</span></span><br><span class="line"><span class="built_in">export</span> secret=%$<span class="comment">#$FG</span></span><br><span class="line">docker run -e secret --env IP=1.2.3.4 .....</span><br><span class="line"><span class="comment"># 从文件中获取</span></span><br><span class="line">cat .env</span><br><span class="line"><span class="comment"># ENV=prod</span></span><br><span class="line"><span class="comment"># IP=1.2.3.4</span></span><br><span class="line"></span><br><span class="line">docker run --env-file .env .....</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker运行linux终端显示bash-4.2#</title>
    <url>/posts/f29/</url>
    <content><![CDATA[<p>一次在docker中运行centos，为了省事，将数据卷挂载了整个用户工作目录下，执行<code>docker run -it -v /Users/simple/workspace/tmp/data:/root python36:centos7 bash</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/k5nrn.png" alt="image-20210523154159576"></p>
<p>理论上应该按如下显示：</p>
<p><img src="https://oss.smart-lifestyle.cn/file/0vks3.png" alt="image-20210523155114587"></p>
<p>发现此时终端显示的bash-4.2，而不是显示用户名@主机，另外终端文件夹文件的颜色也没有显示，最开始以为没有设置term颜色，但经过尝试不是这个问题（<code>TERM=xterm-256color</code>）。</p>
<p>看到自己运行的docker命令，-v将data目录挂载了用户目录下，这时候想起里啊，docker volume第一次挂载是单项的，即及时容器内目录有内容，第一次挂载时，也会被主机目录覆盖掉，也就是现在主机data目录是空的，会把docker内用户目录内文件全部清空</p>
<p>​    进行挂载后：</p>
<p><img src="https://oss.smart-lifestyle.cn/file/io22a.png" alt="image-20210523154824106"></p>
<p>​    挂载前：</p>
<p><img src="https://oss.smart-lifestyle.cn/file/gq6l8.png" alt="image-20210523155224464"></p>
<p>在用户目录下，存放着bash以及用户的各种配置文件，而进行挂载后，将所有配置文件全部清除了。</p>
<p>正确做法，不要直接挂载到用户目录下，而应该挂载用户目录下的二级目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">volume=&quot;/Users/simple/workspace/function_graph/data&quot;</span><br><span class="line">docker run -it --rm --init  --name centos -v $volume:/root/data -w /root python36:centos7 bash</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] (<a href="https://blog.csdn.net/liulihui1988/article/details/52796395">linux 命令终端提示符显示-bash-4.2#解决方法__kairui的博客-CSDN博客_-bash-4.2#</a>)</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署记录</title>
    <url>/posts/c5ac/</url>
    <content><![CDATA[<ul>
<li><a href="">x</a> 磁盘初始化</li>
<li><a href="">x</a> 修改系统时区为UTC+8</li>
<li><a href="">x</a> 部署docker环境，修改docker安装位置</li>
<li><a href="">x</a> 优化docker环境，适配china</li>
<li><a href="">x</a> 修改代码配置文件，适配测试环境和生产环境</li>
<li><a href="">x</a> 代码merge到master分支</li>
<li><a href="">x</a> 安装docker镜像</li>
<li><a href="">x</a> 从git获取代码，部署</li>
<li><a href=""> </a> 配置https</li>
<li><a href=""> </a> 测试</li>
</ul>
<blockquote>
<p>本文记录在Azure 上部署docker应用的过程</p>
</blockquote>
<h2 id="磁盘初始化"><a href="#磁盘初始化" class="headerlink" title="磁盘初始化"></a>磁盘初始化</h2><p>Azure提供的磁盘为系统盘+数据盘，数据盘的大小在新建虚拟机的时候可以选，默认数据盘是未挂载到系统上的，需要手动挂载，挂载数据盘可以参考：<br><a href="https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk">https://docs.azure.cn/zh-cn/virtual-machines/linux/add-disk</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过dh -h命令查看当前系统磁盘的大小和使用情况，目前没有数据盘</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           796M  676K  795M   1% /run</span><br><span class="line">/dev/sda1        29G  1.5G   28G   5% /</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda15      105M  3.6M  101M   4% /boot/efi</span><br><span class="line">/dev/sdb1        16G   45M   15G   1% /mnt</span><br><span class="line">tmpfs           796M     0  796M   0% /run/user/1000</span><br><span class="line">........</span><br><span class="line"><span class="comment"># 操作完之后， df -h，最后一行已经挂在到/datadrive上</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           796M  680K  795M   1% /run</span><br><span class="line">/dev/sda1        29G  1.5G   28G   5% /</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda15      105M  3.6M  101M   4% /boot/efi</span><br><span class="line">/dev/sdb1        16G   45M   15G   1% /mnt</span><br><span class="line">tmpfs           796M     0  796M   0% /run/user/1000</span><br><span class="line">/dev/sdc1       196G   61M  186G   1% /datadrive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>之后的所有文件操作都是在/datadrive下</strong><br>默认datadrive的权限为root权限，修改所有者为当前用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R cniabservice:cniabservice /datadrive/</span><br></pre></td></tr></table></figure>

<h2 id="修改系统时区"><a href="#修改系统时区" class="headerlink" title="修改系统时区"></a>修改系统时区</h2><p>Azure提供的linux默认时区为UTC，需要改为中国UTC+8时区<br>简单操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br></pre></td></tr></table></figure>
<p><strong>!docker 内时区默认也为UTC，跟主机并不同步，需要修改为UTC+8，下面会说明，不在这里介绍</strong></p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="1-使用Ubuntu-源进行安装"><a href="#1-使用Ubuntu-源进行安装" class="headerlink" title="1. 使用Ubuntu 源进行安装"></a>1. 使用Ubuntu 源进行安装</h3><p>参考 <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg-agent \</span><br><span class="line">software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo apt-get install docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>apt-get是从国外网站下载，可能速度会非常慢</strong>，可以下载deb离线包：<br><a href="https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/" title="针对于ubuntu 18.04">https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/</a></p>
<blockquote>
<p>Go to <a href="https://download.docker.com/linux/ubuntu/dists/">https://download.docker.com/linux/ubuntu/dists/</a>, choose your Ubuntu version, browse to pool/stable/, choose amd64, armhf, arm64, ppc64el, or s390x, and download the .deb file for the Docker Engine - Community version you want to install.<br>使用dpkg -i *.deb 安装顺序为：</p>
</blockquote>
<ol>
<li>containerd.io</li>
<li>docker-ce</li>
<li>docker-ce-cli</li>
<li>最后 apt-get install docker-compose</li>
</ol>
<p>docker默认root权限操作，将当前用户加入root组，免每次操作输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you would like to use Docker as a non-root user, you should now consider adding your user to the “docker” group with something like:</span></span><br><span class="line">sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure>

<h3 id="2-修改docker镜像存储等存储位置"><a href="#2-修改docker镜像存储等存储位置" class="headerlink" title="2. 修改docker镜像存储等存储位置"></a>2. 修改docker镜像存储等存储位置</h3><p>默认存储位置在系统盘，要将其迁移至数据盘<br>在控制台输入docker info，查看当前docker 存储位置<br><img src="https://oss.smart-lifestyle.cn/blog/qx062.jpg"><br>在/etc/docker/下新建daemon.json文件, graph为存储位置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://1x2ypu6h.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;tcp://0.0.0.0:2375&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;graph&quot;</span>: <span class="string">&quot;/datadrive/dockerdata&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启docker，sudo service docker restart，再次docker info查看配置<br><img src="https://oss.smart-lifestyle.cn/blog/7rvdj.jpg"><br><strong>修改成功！</strong></p>
<h2 id="从代码仓库获取代码"><a href="#从代码仓库获取代码" class="headerlink" title="从代码仓库获取代码"></a>从代码仓库获取代码</h2><h3 id="1-pull-request-to-Master"><a href="#1-pull-request-to-Master" class="headerlink" title="1. pull request to Master"></a>1. pull request to Master</h3><p>遇到问题，没有权限进行合并操作，只有审批功能，修改如下地方<br><img src="https://oss.smart-lifestyle.cn/blog/98qaq.jpg"></p>
<h3 id="2-在远程服务器使用git-clone获取代码"><a href="#2-在远程服务器使用git-clone获取代码" class="headerlink" title="2. 在远程服务器使用git clone获取代码"></a>2. 在远程服务器使用git clone获取代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用如下用户名密码</span></span><br><span class="line"><span class="comment"># 用户名：jenkins 密码：***************</span></span><br><span class="line">git <span class="built_in">clone</span> https://dev.azure.com/ds-rnd/*************</span><br></pre></td></tr></table></figure>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir redisdb</span><br><span class="line">mkdir mysqldb</span><br><span class="line">mkdir ssl_key</span><br><span class="line">mkdir conf</span><br><span class="line"><span class="comment"># 修改nginx.conf文件</span></span><br><span class="line">mkdir -p static/.well-known</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.0.0&quot;</span> \&gt; version</span><br></pre></td></tr></table></figure>

<h3 id="1-构建docker"><a href="#1-构建docker" class="headerlink" title="1. 构建docker"></a>1. 构建docker</h3><p>在工程根目录下执行 docker-compose up 进行首次编译镜像和启动容器</p>
<h3 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建abbdrive数据库</span></span><br><span class="line">python manage.py makemigrations abbdrivemodel</span><br><span class="line">python manage.py migrate</span><br><span class="line">执行</span><br><span class="line">http://g*************.cloudapp.chinacloudapi.cn/**********</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git abc tutorial</title>
    <url>/posts/de34/</url>
    <content><![CDATA[<h1 id="git-abc"><a href="#git-abc" class="headerlink" title="git-abc"></a>git-abc</h1><p>下面介绍经常用到且最基本的git 命令</p>
<h2 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><ul>
<li><code>git init</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir git-abc</span><br><span class="line"><span class="built_in">cd</span> git-abc</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/qm2vb.png" alt="image-20210331222402099"></p>
<h3 id="添加远程分支"><a href="#添加远程分支" class="headerlink" title="添加远程分支"></a>添加远程分支</h3><ul>
<li><code>git remote add &lt;shortname&gt; &lt;url&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/simplezhao/git-abc.git</span><br></pre></td></tr></table></figure>

<h3 id="修改远程分支"><a href="#修改远程分支" class="headerlink" title="修改远程分支"></a>修改远程分支</h3><ul>
<li><code>git remote set-url origin [url]</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://newgit-repo.git</span><br></pre></td></tr></table></figure>



<h3 id="抓取远程代码"><a href="#抓取远程代码" class="headerlink" title="抓取远程代码"></a>抓取远程代码</h3><ul>
<li><code>git fetch &lt;remote&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/48gpy.png" alt="image-20210331223237496"></p>
<h3 id="查看某个远程仓库"><a href="#查看某个远程仓库" class="headerlink" title="查看某个远程仓库"></a>查看某个远程仓库</h3><ul>
<li><code>git remote show &lt;remote&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/50dkt.png" alt="image-20210331223628444"></p>
<h3 id="同步远程分支"><a href="#同步远程分支" class="headerlink" title="同步远程分支"></a>同步远程分支</h3><ul>
<li><code>git checkout -b &lt;branch&gt; &lt;remote&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b main origin/main</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/vkntn.png" alt="image-20210331224921389"></p>
<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><h3 id="查看当前分支状态"><a href="#查看当前分支状态" class="headerlink" title="查看当前分支状态"></a>查看当前分支状态</h3><ul>
<li><code>git status</code></li>
</ul>
<ol>
<li>修改readme.md文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>提示文件被修改</p>
<p><img src="https://oss.smart-lifestyle.cn/file/jjthz.png" alt="image-20210331225856222"></p>
<ol start="2">
<li>新增一个readme_en.md文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>提示有未跟踪的文件</p>
<p><img src="https://oss.smart-lifestyle.cn/file/ttydm.png" alt="image-20210331230055526"></p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><ul>
<li><p><code>git add .</code> 添加所有文件</p>
</li>
<li><p><code>git add &lt;file&gt;</code>添加指定文件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>添加成功后，显示准备提交的文件</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2m0ge.png" alt="image-20210331230400289"></p>
<h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><ul>
<li><code>git commit -a</code> 在默认编辑器内增加本次提交内容</li>
<li><code>git commit -m &lt;message&gt;</code>简短提交</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;update readme file and add new readme for english version&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/xkx4s.png" alt="image-20210331230900239"></p>
<h3 id="推送到远程分支"><a href="#推送到远程分支" class="headerlink" title="推送到远程分支"></a>推送到远程分支</h3><ul>
<li><code>git push &lt;shortname&gt; &lt;branch&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/136q4.png" alt="image-20210331231029318"></p>
<h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><ul>
<li><code>git log</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/wvarp.png" alt="image-20210331231130554"></p>
<h2 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h2><p>多人开发同一个项目，需要共同维护同一个代码库，假如每个人负责独立的模块，不会涉及到代码冲突</p>
<p>某次提交时，提示如下问题</p>
<p><img src="https://oss.smart-lifestyle.cn/file/d62zw.png" alt="image-20210331232246543"></p>
<p>这是因为远程分支要优先本地的分支，需要先执行git pull，然后在执行git push命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p>执行pull时会提示Merge信息</p>
<p><img src="https://oss.smart-lifestyle.cn/file/xq0ww.png" alt="image-20210331232418971"></p>
<p>完成并退出编辑后，提示pull信息</p>
<p><img src="https://oss.smart-lifestyle.cn/file/ct9wp.png" alt="image-20210331232514825"></p>
<p>再次执行git push origin main，显示提交成功</p>
<p><img src="https://oss.smart-lifestyle.cn/file/lwto3.png" alt="image-20210331232632195"></p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h3><ul>
<li><code>git branch &lt;branch&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch hotfix</span><br><span class="line">git checkout hotfix</span><br></pre></td></tr></table></figure>

<h3 id="修改分支名字"><a href="#修改分支名字" class="headerlink" title="修改分支名字"></a>修改分支名字</h3><p>现在git默认分支为master，但是更通用的主分支为main，可以通过下面的命令修改</p>
<ul>
<li>git branch -m main</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git branch -m main</span><br></pre></td></tr></table></figure>



<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>在上一步操作，因为系统出现bug，紧急创建一个分支，然后在这个分支上进行修复，修改测试验证完毕后，从hotfix分支合并到main分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge hotfix</span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/8q60h.png" alt="image-20210331235235214"></p>
<h3 id="分支本地删除"><a href="#分支本地删除" class="headerlink" title="分支本地删除"></a>分支本地删除</h3><ul>
<li><code>git branch -d &lt;branch&gt;</code></li>
<li><code>git branch -D &lt;branch&gt;</code> 强制删除本地分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d hotfix</span><br></pre></td></tr></table></figure>

<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><ul>
<li><code>git push origin :branch</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :hotfix</span><br><span class="line">git push origin --delete hotfix</span><br></pre></td></tr></table></figure>



<h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><ul>
<li><p><code>git tag</code></p>
</li>
<li><p><code>git tag -a &lt;version&gt; -m &lt;message&gt;</code></p>
</li>
</ul>
<p>通过<code>git tag</code>查看仓库内已经存在的标签列表</p>
<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a <span class="string">&#x27;1.0&#x27;</span> -m <span class="string">&quot;first version&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用轻量级标签</p>
<p><code>git tag 1.0-a</code></p>
<h4 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h4><p>默认情况下 git push命令不会把标签传送到远程仓库，必须显式地推送标签到服务器，类似于推送代码</p>
<p><code>git push &lt;shortname&gt; &lt;tagname&gt;</code></p>
<p>如果想一次推送多个标签，可以使用如下命令</p>
<p><code>git push &lt;shortname&gt; --tags</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin 1.0</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<p>推送指定标签</p>
<p><img src="https://oss.smart-lifestyle.cn/file/o6cju.png" alt="image-20210401001342160"></p>
<p>推送所有标签</p>
<p><img src="https://oss.smart-lifestyle.cn/file/fyqxl.png" alt="image-20210401001405265"></p>
<h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><p>使用<code>git config -l </code>查看当前仓库配置</p>
<h3 id="配置全局信息"><a href="#配置全局信息" class="headerlink" title="配置全局信息"></a>配置全局信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置当前仓库信息"><a href="#配置当前仓库信息" class="headerlink" title="配置当前仓库信息"></a>配置当前仓库信息</h3><p>和全局区别在于去掉–global标记</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://git-scm.com/book/en/v2">Book: Pro Git</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit规范</title>
    <url>/posts/76bd/</url>
    <content><![CDATA[<blockquote>
<p>提交git 时，如何能将提交的信息写清晰明了，避免不规范的代码提交</p>
<p>git 每次提交都需要写commit message，否则就不允许提交，一般来说，commit message应该清晰明了，说明本次提交的目的，具体做了什么操作，但是在日常开发中，大家的commit message千奇百怪，中英文混合使用，fix bug等各种笼统的message司空见怪，规范git commit message很重要</p>
</blockquote>
<p>比较流行的规范整理如下。</p>
<h2 id="commit-message-格式"><a href="#commit-message-格式" class="headerlink" title="commit message 格式"></a>commit message 格式</h2><p>建议每行不超过100个字符</p>
<p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>type(必须)</p>
<p>用于说明git commit的类别，只允许使用下面的标识。</p>
<p>feat: 新功能（feature）</p>
<p>fix: 修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG</p>
<p>docs: 文档（document）</p>
<p>style: 格式（不影响代码运行的变动, 比如删除多余的空行）</p>
<p>refactor: 重构（即不是新增功能，也不是修改bug的代码运动）</p>
<p>perf: 优化相关，比如提升性能、体验</p>
<p>test: 增加测试</p>
<p>chore: 构建过程或者辅助工具的变动</p>
<p>revert: 回滚到上一个版本，需要在body中写上从哪一个版本revert的</p>
<p>merge: 代码合并</p>
<p>sync: 同步主线或者分布的bug</p>
</li>
<li><p>scope（可选）</p>
<p>scope用于说明影响的范围，比如数据层、控制层、视图层等等，视项目的不同而不同</p>
<p>如果修改影响了不止一个socope，你可以使用*代替</p>
</li>
<li><p>subject（必须）</p>
<p>subject是commit目的的简短描述，不超过50字符。</p>
<p>建议使用中文。</p>
<p>结尾不加句号或者其他标点符号</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 举例</span></span><br><span class="line">docs(api): 接口说明完善</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">feat($</span><span class="bash">browser): onUrlChange event (popstate/hashchange/polling)</span></span><br><span class="line"></span><br><span class="line">Added new event to $browser:</span><br><span class="line">- forward popstate event if available</span><br><span class="line">- forward hashchange event if popstate not available</span><br><span class="line">- do polling when neither popstate nor hashchange available</span><br><span class="line"></span><br><span class="line">Breaks $browser.onHashChange, which was removed (use onUrlChange instead)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">fix($</span><span class="bash">compile): couple of unit tests <span class="keyword">for</span> IE9</span></span><br><span class="line"></span><br><span class="line">Older IEs serialize html uppercased, but IE9 does not...</span><br><span class="line">Would be better to expect case insensitive, unfortunately jasmine does</span><br><span class="line">not allow to user regexps for throw expectations.</span><br><span class="line"></span><br><span class="line">Closes #392</span><br><span class="line">Breaks foo.bar api, foo.baz should be used instead</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">feat($</span><span class="bash">compile): simplify isolate scope bindings</span></span><br><span class="line"></span><br><span class="line">Changed the isolate scope binding options to:</span><br><span class="line">  - @attr - attribute binding (including interpolation)</span><br><span class="line">  - =model - by-directional model binding</span><br><span class="line">  - &amp;expr - expression execution binding</span><br><span class="line"></span><br><span class="line">This change simplifies the terminology as well as</span><br><span class="line">number of choices available to the developer. It</span><br><span class="line">also supports local name aliasing from the parent.</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed and</span><br><span class="line">the inject option for the directive controller injection was removed.</span><br><span class="line"></span><br><span class="line">To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">Before:</span><br><span class="line"></span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: &#x27;attribute&#x27;,</span><br><span class="line">  myBind: &#x27;bind&#x27;,</span><br><span class="line">  myExpression: &#x27;expression&#x27;,</span><br><span class="line">  myEval: &#x27;evaluate&#x27;,</span><br><span class="line">  myAccessor: &#x27;accessor&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">After:</span><br><span class="line"></span><br><span class="line">scope: &#123;</span><br><span class="line">  myAttr: &#x27;@&#x27;,</span><br><span class="line">  myBind: &#x27;@&#x27;,</span><br><span class="line">  myExpression: &#x27;&amp;&#x27;,</span><br><span class="line">  // myEval - usually not useful, but in cases where the expression is assignable, you can use &#x27;=&#x27;</span><br><span class="line">  myAccessor: &#x27;=&#x27; // in directive&#x27;s template change myAccessor() to myAccessor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="使用git-commit-规范的好处"><a href="#使用git-commit-规范的好处" class="headerlink" title="使用git commit 规范的好处"></a>使用git commit 规范的好处</h3><ol>
<li>便于追溯提交历史进行追溯</li>
<li>一旦约束了commit message，就不能再一股脑的把各种各样的改动都放在一个git commit里面</li>
<li>便于自动化输出change log(CHANGELOG.md)</li>
</ol>
<p>[1] <a href="https://developer.aliyun.com/article/770277?accounttraceid=d4154093542c440aa51196b76d1ccbe3eyfz">https://developer.aliyun.com/article/770277?accounttraceid=d4154093542c440aa51196b76d1ccbe3eyfz</a></p>
<p>[2] <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#">https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git commit</tag>
      </tags>
  </entry>
  <entry>
    <title>github actions + serverless + hexo 搭建博客</title>
    <url>/posts/186f/</url>
    <content><![CDATA[<blockquote>
<p>2021年9月21日：新增404页面的展示</p>
<p>20201年9月10日：基本功能</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从最开始的ECS（阿里云云服务器）到后来的轻量应用服务器，都是在伴随着新用户打折的优惠上，续费下去，但是最近轻量应用服务器器到期了，在没有大优惠的情况下一年的费用需要600多软妹币，于是开始动手将博客部署到serverless服务上，基本上对于我这种访问量极低的博主来说，费用基本接近于0</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2z2j0.png" alt="image-20210911093216962"></p>
<h2 id="serverless的选择"><a href="#serverless的选择" class="headerlink" title="serverless的选择"></a>serverless的选择</h2><p>经过对比，选择了腾讯云的<a href="https://console.cloud.tencent.com/sls">Serverless应用</a>，本身博客的内容都是静态文件，而且腾讯也是将静态网站托管到它的对象存储服务上。虽然也可以直接在对象存储直接托管，但是腾讯云的Serverless应用在部署上提供了代码托管方式，检测到代码分支上的变动，会自动触发构建</p>
<p><img src="https://oss.smart-lifestyle.cn/file/by7fr.png" alt="image-20210911095143015"></p>
<p>下面开干！</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="开通serverless应用，建站"><a href="#开通serverless应用，建站" class="headerlink" title="开通serverless应用，建站"></a>开通serverless应用，建站</h3><p>新建应用</p>
<p><img src="https://oss.smart-lifestyle.cn/file/bifuy.png" alt="image-20210911100249575"></p>
<p>选择快速部署一个Website静态网站</p>
<p><img src="https://oss.smart-lifestyle.cn/file/1i7ek.png" alt="image-20210911100406421"></p>
<p>开启跨域访问配置（如果你的网站访问第三方资源）</p>
<p><img src="https://oss.smart-lifestyle.cn/file/4q9e7.png" alt="image-20210911100923927"></p>
<p>其他按照流程点击下一步执行就可以</p>
<p>完成之后，点击访问地址可以看到一个简单的Demo页面。同时也在对象储存中创建了一个跟网址前缀一样的存储桶（这个地址就是对象存储静态网站功能提供的）</p>
<p><img src="https://oss.smart-lifestyle.cn/file/xsnza.png" alt="image-20210911101411755"></p>
<h3 id="绑定域名和证书"><a href="#绑定域名和证书" class="headerlink" title="绑定域名和证书"></a>绑定域名和证书</h3><p>这里先不着急去部署我们的网站内容，先去绑定我们自己的域名以及https证书，要不然你的博客只能通过腾讯对象存储提供的一个四级域名去访问</p>
<h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>绑定域名之前第一是你必须有自己的域名，各个云厂商基本都提供域名注册服务，这里注册过程不再介绍，第二是域名需要备案，否则也无法绑定成功</p>
<p><img src="https://oss.smart-lifestyle.cn/file/7tuxq.png" alt="image-20210911102552375"></p>
<p>在对象存储服务中，找到你博客对应的桶</p>
<p><img src="https://oss.smart-lifestyle.cn/file/5a2pl.png" alt="image-20210911102232485"></p>
<p>点击进去之后，选择域名与传输管理中的自定义源站域名</p>
<p><img src="https://oss.smart-lifestyle.cn/file/66q6f.png" alt="image-20210911102349968"></p>
<p>在自定义源站域名中添加域名</p>
<p><img src="https://oss.smart-lifestyle.cn/file/p9c2k.png" alt="image-20210911102725447"></p>
<p>同时，你也需要在你域名服务商那里增加一项CNAME解析</p>
<p><img src="https://oss.smart-lifestyle.cn/file/fbz1o.png" alt="image-20210911103016315"></p>
<p>这是你通过http://自定义域名可以访问到你的网站</p>
<h4 id="绑定证书"><a href="#绑定证书" class="headerlink" title="绑定证书"></a>绑定证书</h4><p>如果你不需要让用户通过https访问你的博客，那可以忽略本节，但是强烈建议开启https，毕竟安全又免费，可以在这个<a href="https://freessl.cn/">网站</a>上申请免费的证书。拿到证书（公钥和私钥）之后， 点击绑定证书，如果你不是在腾讯云申请的证书，选择自有证书，将公钥、私钥粘贴进去就可以。腾讯云证书直接在证书列表选择就可以</p>
<p><img src="https://oss.smart-lifestyle.cn/file/yasz4.png" alt="image-20210911103552585"></p>
<p>以上操作完成之后，如果你通过https://你的博客域名，访问还是显示的没有证书，因为默认情况下，还是将https的访问重新定向回了http，我们需要修改储存桶的配置才可以使用https</p>
<p>在静态网站配置中，使能强制HTTPS，默认没有使能</p>
<p><img src="https://oss.smart-lifestyle.cn/file/xg2x7.png" alt="image-20210911104131084"></p>
<p>此时再通过https://你的博客域名就可以访问到你的博客（可能需要手动清除一下缓存，或者开启一个浏览器隐私窗口）</p>
<h2 id="部署hexo博客"><a href="#部署hexo博客" class="headerlink" title="部署hexo博客"></a>部署hexo博客</h2><p>大致流程为：使用github管理源码（md文件），并通过github actions将hexo内容编译为静态文件，并推送到新的分支gh_pages，在腾讯云Serverless应用那里，会监测gh_pages，自动构建</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2vses.png" alt="流程"></p>
<h3 id="github-actions实现"><a href="#github-actions实现" class="headerlink" title="github actions实现"></a>github actions实现</h3><p>新建一个workflow</p>
<p><img src="https://oss.smart-lifestyle.cn/file/zb5z8.png" alt="image-20210911120703454"></p>
<p>具体实现如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">and</span> <span class="string">publish</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the workflow will run</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">node</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm ci</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">tatic</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">robots.txt</span> <span class="string">to</span> <span class="string">public</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cp</span> <span class="string">robots.txt</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">public</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REMOTE_REPO:</span> <span class="string">https://$&#123;&#123;</span> <span class="string">secrets.GIT_TOKEN</span> <span class="string">&#125;&#125;@github.com/$&#123;&#123;</span> <span class="string">secrets.GIT_REPOSITORY</span> <span class="string">&#125;&#125;.git</span></span><br><span class="line">          <span class="attr">REMOTE_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public &amp;&amp; git init &amp;&amp; git add .</span></span><br><span class="line"><span class="string">          git config user.name &quot;$&#123;&#123; secrets.GIT_USERNAME &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config user.email &quot;$&#123;&#123; secrets.GIT_USEREMAIL &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          echo -n &#x27;Files to Commit:&#x27; &amp;&amp; ls -l | wc -l</span></span><br><span class="line"><span class="string">          git commit -m &quot;github actions build at $(TZ=ANY-8 date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">          git push --force $REMOTE_REPO master:$REMOTE_BRANCH &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo build successfully, now you can redeploy your website</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      </span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>steps中包括如下actions</p>
<ol>
<li><p>actions/checkout@v2 </p>
<p>获取master分支代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure></li>
<li><p>actions/setup-node@v2</p>
<p>安装node，版本为12.x</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">node</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>npm install -g hexo-cli</p>
<p>安装hexo cli</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure></li>
<li><p>actions/cache@v1 | npm ci</p>
<p>安装npm依赖包，并使能缓存</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">ci</span></span><br></pre></td></tr></table></figure></li>
<li><p>hexo clean | hexo g</p>
<p>清空并部署</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">tatic</span> <span class="string">files</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         hexo clean</span></span><br><span class="line"><span class="string">         hexo g</span></span><br></pre></td></tr></table></figure></li>
<li><p>cp robots.txt ./public</p>
<p>将自定义限制爬虫文件复制到public即生成的静态文件的文件夹中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">robots.txt</span> <span class="string">to</span> <span class="string">public</span> <span class="string">directory</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">cp</span> <span class="string">robots.txt</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure></li>
<li><p>将代码推送到gh-pages分支</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">public</span> <span class="string">to</span> <span class="string">gh-pages</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REMOTE_REPO:</span> <span class="string">https://$&#123;&#123;</span> <span class="string">secrets.GIT_TOKEN</span> <span class="string">&#125;&#125;@github.com/$&#123;&#123;</span> <span class="string">secrets.GIT_REPOSITORY</span> <span class="string">&#125;&#125;.git</span></span><br><span class="line">          <span class="attr">REMOTE_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public &amp;&amp; git init &amp;&amp; git add .</span></span><br><span class="line"><span class="string">          git config user.name &quot;$&#123;&#123; secrets.GIT_USERNAME &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config user.email &quot;$&#123;&#123; secrets.GIT_USEREMAIL &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          echo -n &#x27;Files to Commit:&#x27; &amp;&amp; ls -l | wc -l</span></span><br><span class="line"><span class="string">          git commit -m &quot;github actions build at $(TZ=ANY-8 date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">          git push --force $REMOTE_REPO master:$REMOTE_BRANCH &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">build</span> <span class="string">successfully,</span> <span class="string">now</span> <span class="string">you</span> <span class="string">can</span> <span class="string">redeploy</span> <span class="string">your</span> <span class="string">website</span></span><br></pre></td></tr></table></figure>



<p>这里面涉及到的secret变量可以在，代码仓库secrets中添加</p>
<p><img src="https://oss.smart-lifestyle.cn/file/buzmw.png" alt="image-20210911121933711"></p>
<p>​    </p>
<p>补充：</p>
<p><code>$(TZ=ANY-8 date +&#39;%Y-%m-%d %H:%M:%S&#39;)</code> github action默认时区为UTC时间，这是TZ=ANY-8将时区变为UCT8时间</p>
<p>​    </p>
</li>
</ol>
<h3 id="在Serverless中配置代码托管"><a href="#在Serverless中配置代码托管" class="headerlink" title="在Serverless中配置代码托管"></a>在Serverless中配置代码托管</h3><p>在开发部署中选择代码托管，选择github（需要授权代码源），然后选择blog仓库的gh-pages分支，选择自动触发构建</p>
<p><img src="https://oss.smart-lifestyle.cn/file/x1n8d.png" alt="image-20210911122509404"></p>
<p>这样我们的工作流就配置完了</p>
<h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><ol>
<li><p>在hexo中增加404.html，qq404.html文件，放在source文件夹下面</p>
<p><img src="https://oss.smart-lifestyle.cn/file/j193w.png" alt="image-20210922000046337"></p>
<p>为什么是两个404文件？qq404里面放的是腾讯公益404页面，但是我想在这个页面上增加一个返回我的主页的按钮，需要通过iframe嵌套这个腾讯404页面，代码如下。</p>
<p>qq404.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;https://blog.smart-lifestyle.cn/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>404.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#222&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo 5.4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;180x180&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;32x32&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;16x16&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon-16x16.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;mask-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#222&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.button</span> &#123;<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>; <span class="attribute">border-radius</span>: <span class="number">4px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">background-color</span>: <span class="number">#222</span>; <span class="attribute">color</span>: <span class="number">#eee</span>; &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>simplezhao的博客 - 专注于物联网架构和产品<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.href=&#x27;https://blog.smart-lifestyle.cn&#x27;&quot;</span>&gt;</span>回到我的主页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;./qq404.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;700&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在hexo _config.yml中修改skip_render，自动从source文件夹下查找，所有不要加source</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="number">404.</span><span class="string">html</span>, <span class="string">qq404.html</span>, <span class="string">&#x27;*.html&#x27;</span>, <span class="string">robots.txt</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>在腾讯对象存储，保存网页的桶中找到静态网站的配置，更改错误文档为404.html</p>
<p><img src="https://oss.smart-lifestyle.cn/file/uv767.png" alt="image-20210922001015308"></p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个流程配置完之后，我们在本地写完博客，提交到github之后，就可以按照流水线自动更新在线博客网站。</p>
<p><img src="https://oss.smart-lifestyle.cn/file/0jhjn.png" alt="image-20210911124903269"></p>
<p>一点感悟：</p>
<p>腾讯云的Serverless应用整合了自家的各种服务，比如对象存储的网站托管、而代码托管使用的coding来获取授权</p>
<p><img src="https://oss.smart-lifestyle.cn/file/mub2b.png" alt="image-20210911003110757"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/marketplace/actions/hexo-action">Hexo Action · Actions · GitHub Marketplace</a></p>
<p>[2] <a href="https://github.com/BryanSchuetz/jekyll-deploy-gh-pages/blob/master/deploy/entrypoint.sh">jekyll-deploy-gh-pages/entrypoint.sh at master · BryanSchuetz/jekyll-deploy-gh-pages (github.com)</a></p>
<p>[3] <a href="https://github.com/NickSchimek/deploy_jamstack_action/blob/main/deploy.sh">deploy_jamstack_action/deploy.sh at main · NickSchimek/deploy_jamstack_action (github.com)</a></p>
<p>[4] <a href="https://zhuanlan.zhihu.com/p/161969042">使用 GitHub Actions 自动部署 Hexo 博客到 GitHub Pages - 知乎 (zhihu.com)</a></p>
<p>[5] <a href="https://unix.stackexchange.com/questions/104088/why-does-tz-utc-8-produce-dates-that-are-utc8">timezone - Why does TZ=UTC-8 produce dates that are UTC+8? - Unix &amp; Linux Stack Exchange</a></p>
<p>[6] <a href="https://freessl.cn/">FreeSSL首页 - FreeSSL.cn一个提供免费HTTPS证书申请的网站</a></p>
<p>[7] <a href="https://hexo.io/docs/configuration#Directory">Configuration | Hexo</a></p>
<p>[8] <a href="https://iitii.github.io/2019/02/15/1/">Hexo跳过指定文件的渲染 | Hello Memo (iitii.github.io)</a></p>
]]></content>
      <categories>
        <category>serverless</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>git仓库用户权限问题</title>
    <url>/posts/f5f9/</url>
    <content><![CDATA[<blockquote>
<p>通常我们使用一个github账号进行代码的拉去和推送，但假如现在有一个私有仓库，而且需要使用另外一个github账号，可能会出现authentication error</p>
</blockquote>
<p>如果我们使用<code>git config user.email</code>是没有办法更改这个仓库的认证信息的</p>
<p>这是因为，我们通过https操作仓库时，会使用缓存在本机的授权认证信息，也就是会使用之前账户的信息。</p>
<p>更改方法比较简单，给仓库地址上加上你所要使用的用户名(username2)即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repo</span><br><span class="line">git remote set-url origin https://username2@github.com/&lt;username&gt;/repo</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/65932601/how-to-change-user-for-git-repository">How to change user for git repository</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>.gitignore模式匹配</title>
    <url>/posts/4da0/</url>
    <content><![CDATA[<ul>
<li>匹配模式前使用 <code>/</code> 表示根目录<pre><code>  /filename 表示匹配根目录下的文件filename
</code></pre>
</li>
<li>匹配模式后使用 <code>/</code> 代表是目录（不是文件）<pre><code>  dirname/ 表示匹配的是dirname文件夹
</code></pre>
</li>
<li>匹配模式前加 <code>！</code> 表示取反</li>
<li><code>*</code> 代表任意个字符<pre><code>  db*.json 表示匹配以db开头的json文件
</code></pre>
</li>
<li><code>?</code> 匹配任意一个字符<pre><code>  db?.json 表示以db开头并且文件名为三个字符的json文件
</code></pre>
</li>
<li> <code>**</code> 匹配任意级目录</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World 201903080551</title>
    <url>/posts/59f6/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook使用环境变量</title>
    <url>/posts/9e2a/</url>
    <content><![CDATA[<blockquote>
<p>使用python-dotenv库，在jupyter notebook中加载环境变量</p>
</blockquote>
<ul>
<li>安装python-dotenv</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install python-dotenv</span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">load_dotenv(dotenv_path=<span class="string">&#x27;.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db_user = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>)</span><br><span class="line">db_password = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>)</span><br><span class="line">db_host = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>)</span><br><span class="line">db_name = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://nono.ma/environment-variable-python-notebook-os-environ-get">Read Environment Variables in a Python Notebook · Nono Martínez Alonso</a></p>
]]></content>
      <categories>
        <category>jupyter</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyterlab + jupyterhub + supervisor</title>
    <url>/posts/93be/</url>
    <content><![CDATA[<blockquote>
<p>记录在jupyterhub 中使用jupyterlab，并且使用supervisor管理进程运行<br>supervisor 在非root用户下运行和管理进程</p>
</blockquote>
<h3 id="安装jupyterhub"><a href="#安装jupyterhub" class="headerlink" title="安装jupyterhub"></a>安装jupyterhub</h3><blockquote>
<p>前提条件</p>
<ol>
<li>python 3.5+</li>
<li>nodejs/npm</li>
</ol>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装 http-proxy，并使用淘宝镜像</span></span><br><span class="line">npm install -g configurable-http-proxy --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 安装 jupyterhub，并使用豆瓣镜像</span></span><br><span class="line">python3 -m pip install jupyterhub -i https://pypi.douban.com/simple/</span><br><span class="line"><span class="comment"># 在终端中输入jupyterhub 看是否运行</span></span><br><span class="line">jupyterhub</span><br><span class="line"><span class="comment"># Visit https://localhost:8000 in your browser, and sign in with your unix PAM credentials.</span></span><br></pre></td></tr></table></figure>
<h3 id="安装-jupyterlab，并配置到-jupyterhub中"><a href="#安装-jupyterlab，并配置到-jupyterhub中" class="headerlink" title="安装 jupyterlab，并配置到 jupyterhub中"></a>安装 jupyterlab，并配置到 jupyterhub中</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 jupyterlab</span></span><br><span class="line">python3 -m pip install jupyterlab -i https://pypi.douban.com/simple/</span><br><span class="line"><span class="comment"># 通过 jupyterhub生成配置文件，并存放在 $HOME/jupyterhub中</span></span><br><span class="line">jupyterhub --generate-config</span><br><span class="line"><span class="comment"># 编辑 jupyterhub_config.py</span></span><br><span class="line"><span class="comment"># 设定你的启动打开目录</span></span><br><span class="line">c.Spawner.notebook_dir = <span class="string">&#x27;/home/simple/develop/jupyter_home&#x27;</span></span><br><span class="line"><span class="comment"># 设定以 jupyterlab运行</span></span><br><span class="line">c.Spawner.default_url = <span class="string">&#x27;/lab&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="安装supervisor，并将-jupyterhub管理加入其中"><a href="#安装supervisor，并将-jupyterhub管理加入其中" class="headerlink" title="安装supervisor，并将 jupyterhub管理加入其中"></a>安装supervisor，并将 jupyterhub管理加入其中</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装supervisor</span></span><br><span class="line">python -m pip install supervisor</span><br><span class="line"><span class="comment"># 生成配置文件，放在/etc/ 中</span></span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf </span><br><span class="line"><span class="comment"># 创建配置文件夹</span></span><br><span class="line">sudo mkdir -p /etc/supervisor/conf.d/</span><br><span class="line"><span class="comment"># 编辑 supervisord.conf ，在最后取消注释，加入f iles = /etc/supervisor/conf.d/*.conf</span></span><br><span class="line">[include]</span><br><span class="line">;files = relative/directory/*.ini</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br><span class="line"><span class="comment"># 修改启动用户为当前用户，如果是root，请忽略</span></span><br><span class="line">[supervisord]</span><br><span class="line">user=simple</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 在 /etc/supervisor/<span class="keyword">conf</span>.d/ 新建 jupyterhub.<span class="keyword">conf</span>， 内容如下</span><br><span class="line">[program:jupyterhub]</span><br><span class="line"><span class="keyword">command</span>=jupyterhub -<span class="keyword">f</span> /home/simple/jupyterhub/jupyterhub_config.<span class="keyword">py</span></span><br><span class="line">directory=/home/simple/jupyterhub</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startretries=<span class="number">3</span></span><br><span class="line">exitcodes=<span class="number">0</span>,<span class="number">2</span></span><br><span class="line">stopsignal=TERM</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/home/simple/jupyterhub/<span class="built_in">log</span>/jupyterhub.<span class="built_in">log</span></span><br><span class="line">stdout_logfile_maxbytes=<span class="number">1</span>MB</span><br><span class="line">stdout_logfile_backups=<span class="number">10</span></span><br><span class="line">user=simple</span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在任意位置运行 supervisord，启动 supervisor 主进程</span></span><br><span class="line">supervisord</span><br><span class="line"><span class="comment"># 通过supervisorctl status 查看状态</span></span><br><span class="line">supervisorctl status</span><br><span class="line">$ jupyterhub                       RUNNING   pid 16161, uptime 0:24:15</span><br></pre></td></tr></table></figure>
<p>在浏览器中访问ip:8000，输入系统的设置的用户名密码进行登录</p>
<h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 jupyterhub_config.py， 配置ssl_cert 和 ssl_key</span></span><br><span class="line">c.JupyterHub.ssl_cert = <span class="string">&#x27;/****/*****/ssl_file/full_chain.pem&#x27;</span></span><br><span class="line">c.JupyterHub.ssl_key = <span class="string">&#x27;/****/****/ssl_file/private.key&#x27;</span></span><br><span class="line"><span class="comment"># 保存后重启supervisor</span></span><br><span class="line">supervisorctl restart jupyterhub</span><br></pre></td></tr></table></figure>
<p><em>ssl 证书申请可以参考：<a href="https://freessl.cn/">https://freessl.cn/</a></em><br>最终效果：<br><img src="https://oss.smart-lifestyle.cn/blog/mrwzk.png" alt="效果"></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>启用jupyterlab 插件管理</li>
</ul>
<ul>
<li>Settings –&gt; Enable Extension Manager 启用</li>
<li>在 Extension Manager中搜索manager，选择@jupyter-widgets/jupyterlab-manager，点击安装</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://juejin.im/post/5d80da83e51d45620c1c5471">如何安装supervisor</a></li>
<li><a href="https://developer.aliyun.com/mirror/NPM">npm淘宝镜像</a></li>
<li><a href="https://www.jianshu.com/p/c5b7c619dd0b">豆瓣python源</a></li>
<li><a href="https://github.com/jupyterhub/jupyterhub-tutorial/tree/master/supervisor">jupyterhub官网 supervisor参考</a></li>
<li><a href="https://jupyterlab.readthedocs.io/en/latest/user/jupyterhub.html">配置jupyterhub 使用jupyterlab</a></li>
<li><a href="https://jupyter.org/install">jupyterlab安装</a></li>
<li><a href="https://github.com/jupyterhub/jupyterhub">jupyterhub安装</a></li>
<li><a href="https://jupyterhub.readthedocs.io/en/stable/getting-started/security-basics.html">ssl 加密 https化</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyterlab</tag>
      </tags>
  </entry>
  <entry>
    <title>linux shell参数传递</title>
    <url>/posts/fab/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>$#</th>
<th>参数数量</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td>$n</td>
<td>表示第n个参数，n为0时表示运行的脚本名</td>
</tr>
<tr>
<td>$@</td>
<td>“$1” “$2” “$3”…. 传递的多个参数</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;total params: $#&quot;</span><br><span class="line">echo &quot;filename: $0&quot;</span><br><span class="line">echo &quot;param1: $1&quot;</span><br><span class="line">echo &quot;param2: $2&quot;</span><br><span class="line">echo &quot;param3: $3&quot;</span><br><span class="line">echo &quot;==============&quot;</span><br><span class="line">for i in &quot;$@&quot;; do</span><br><span class="line">    echo &quot;param: $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">total params: 2</span><br><span class="line">filename: ./test.sh</span><br><span class="line">param1: x1</span><br><span class="line">param2: x2</span><br><span class="line">param3:</span><br><span class="line">==============</span><br><span class="line">param: x1</span><br><span class="line">param: x2</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">Shell 传递参数 | 菜鸟教程 (runoob.com)</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下配置v2ray客户端</title>
    <url>/posts/73e5/</url>
    <content><![CDATA[<blockquote>
<p>腾讯云服务器访问github出奇的慢，因此搭个梯子来加速访问github</p>
</blockquote>
<p><strong>本篇是客户端教程，不是服务端教程</strong></p>
<p><strong>服务器系统：Ubuntu 20.4</strong></p>
<p>访问<a href="https://github.com/v2fly/v2ray-core/releases">官网下载页面</a>，选择适配版本的安装包，我的系统是linux 64为系统，选择了v2ray-linux-64.zip</p>
<p><img src="https://oss.smart-lifestyle.cn/file/115zq.png" alt="image-20220419094326600"></p>
<ul>
<li>下载安装包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/v2fly/v2ray-core/releases/download/v4.44.0/v2ray-linux-64.zip</span><br></pre></td></tr></table></figure>

<p>服务商本身访问github有问题，可以先下载到本地，然后上传到服务器上</p>
<ul>
<li>解压目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uzip v2ray-linux-64.zip -d v2ray-linux</span><br></pre></td></tr></table></figure>

<ul>
<li>获取配置文件</li>
</ul>
<p>可以使用你已经有的config.json 将其上传到服务器上，下面的命令可以测试文件是否正确</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">./v2ray -test config.json</span><br></pre></td></tr></table></figure>



<p>我这边在etc目录下创建了一个v2ray-linux文件夹，并将所有相关文件都放到这个文件夹里</p>
<p><img src="https://oss.smart-lifestyle.cn/file/g05rn.png" alt="image-20220419095826482"></p>
<ul>
<li>配置service文件</li>
</ul>
<p>创建v2ray.service文件，放到/usr/lib/systemd/system/v2ray.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=V2Ray Service</span><br><span class="line">Documentation=https://www.v2fly.org/</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/etc/v2ray-linux/v2ray -config /etc/v2ray-linux/config.json</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>启动service</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service v2ray start</span><br></pre></td></tr></table></figure>



<ul>
<li>查看状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service v2ray status</span><br><span class="line">● v2ray.service - V2Ray Service</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/v2ray.service; disabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Mon 2022-04-18 21:49:55 CST; 12h ago</span><br><span class="line">       Docs: https://www.v2fly.org/</span><br><span class="line">   Main PID: 3047292 (v2ray)</span><br><span class="line">      Tasks: 10 (<span class="built_in">limit</span>: 8819)</span><br><span class="line">     Memory: 6.2M</span><br><span class="line">     CGroup: /system.slice/v2ray.service</span><br><span class="line">             └─3047292 /etc/v2ray-linux/v2ray -config /etc/v2ray-linux/config.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>终端启用代理</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://www.jianshu.com/p/dae87e4d7691">记录：Linux下 V2Ray 原生客户端配置 - 简书 (jianshu.com)</a></p>
<p>[2] <a href="https://github.com/v2fly/v2ray-core/releases">Releases · v2fly/v2ray-core (github.com)</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>mac m1下安装kafka for python</title>
    <url>/posts/48c4/</url>
    <content><![CDATA[<ol>
<li><p>安装<code>librdkafka</code></p>
<p>安装位置在<code>/opt/homebrew/Cellar/librdkafka/1.8.2/</code>，最后的数字因版本而异</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install librdkafka</span><br></pre></td></tr></table></figure></li>
<li><p>安装<code>confluent_kafka</code></p>
<p><strong>1.8.2</strong> 根据实际版本调整位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C_INCLUDE_PATH=/opt/homebrew/Cellar/librdkafka/1.8.2/include LIBRARY_PATH=/opt/homebrew/Cellar/librdkafka/1.8.2/lib pip install confluent_kafka</span><br></pre></td></tr></table></figure></li>
</ol>
<p>参考：</p>
<p>[1] <a href="https://segmentfault.com/a/1190000040867082">mac m1 arm 安装 confluent-kafka 报错解决方案 - SegmentFault 思否</a></p>
<p>[2] <a href="https://github.com/confluentinc/confluent-kafka-python/issues/1025">Install failed in Apple Silicon · Issue #1025 · confluentinc/confluent-kafka-python (github.com)</a></p>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下git status中文乱码</title>
    <url>/posts/a13/</url>
    <content><![CDATA[<p>文件名字是中文时，mac下执行git status命令查看状态时，会显示一堆unicode编码的字符，不便于查看，因为默认情况下对于大于0x80的文件路径字符会进行编码，可以将<code>core.quotePath</code>设置为false，来取消强制编码</p>
<p><img src="https://oss.smart-lifestyle.cn/file/ck0gv.png" alt="image-20210922093322918"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/zym74.png" alt="image-20210922093348556"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://git-scm.com/docs/git-config">Git - git-config Documentation (git-scm.com)</a></p>
<p>[2] <a href="https://www.cnblogs.com/ayseeing/p/4268655.html">mac下git中文乱码 - 破男孩 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>micropython之禅</title>
    <url>/posts/58bd/</url>
    <content><![CDATA[<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Code,</span><br><span class="line">Hack it,</span><br><span class="line">Less <span class="keyword">is</span> more,</span><br><span class="line">Keep it simple,</span><br><span class="line">Small <span class="keyword">is</span> beautiful,</span><br><span class="line"></span><br><span class="line">Be brave! Break things! Learn <span class="keyword">and</span> have fun!</span><br><span class="line">Express yourself <span class="keyword">with</span> MicroPython.</span><br><span class="line"></span><br><span class="line">Happy hacking! :-)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://oss.smart-lifestyle.cn/file/bmwmh.png" alt="ESP8266 and MicroPython - Part 1 - Hackster.io" style="zoom:50%;" />       <img src="https://oss.smart-lifestyle.cn/file/u74xj.png" alt="Micro Bit - 维基百科，自由的百科全书" style="zoom:50%;" /></p>
]]></content>
      <categories>
        <category>micropython</category>
      </categories>
      <tags>
        <tag>micropython</tag>
        <tag>microbit</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo</title>
    <url>/posts/1cbb/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>node查看process架构</title>
    <url>/posts/163c/</url>
    <content><![CDATA[<p>现在node的新版本已经支持MacBook M1，即ARM版本的node，但是有时候需要老版本的node，目前我使用nvm可以切换node的版本， 查看当前node是x64还是ARM版本，可以通过下面的命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -p <span class="string">&quot;process.arch&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://oss.smart-lifestyle.cn/file/uw2au.png" alt="image-20210922090704217"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm用法</title>
    <url>/posts/688d/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>pandas与SQL整理-1</title>
    <url>/posts/eac6/</url>
    <content><![CDATA[<h2 id="读取数据库内容"><a href="#读取数据库内容" class="headerlink" title="读取数据库内容"></a>读取数据库内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># excel header无格式</span></span><br><span class="line">pd.io.formats.excel.ExcelFormatter.header_style = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">db_user = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>)</span><br><span class="line">db_password = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>)</span><br><span class="line">db_host = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>)</span><br><span class="line">db_name = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&#x27;postgresql://<span class="subst">&#123;db_user&#125;</span>:<span class="subst">&#123;db_password&#125;</span>@<span class="subst">&#123;db_host&#125;</span>:5432/<span class="subst">&#123;db_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取表</span></span><br><span class="line">df = pd.read_sql_table(<span class="string">&#x27;AssetWeeklyReportView&#x27;</span>, engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到excel中</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;asset_table.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过是否为空进行过滤</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;Type&#x27;</span>].notnull()]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;Type&#x27;</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line">size = <span class="built_in">len</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一行</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df1.iterrows():</span><br><span class="line">  <span class="built_in">print</span>(row[<span class="string">&#x27;Type&#x27;</span>].....)</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.csdn.net/weixin_45616551/article/details/103469386">pandas dataframe len() 和 count() 的区别_weixin_45616551的博客-CSDN博客</a></p>
<p>[2] <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#sql-queries">IO tools (text, CSV, HDF5, …) — pandas 1.2.4 documentation (pydata.org)</a></p>
]]></content>
      <categories>
        <category>pandas</category>
      </categories>
      <tags>
        <tag>pandas</tag>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql split_part coalesce</title>
    <url>/posts/89ab/</url>
    <content><![CDATA[<blockquote>
<p>split_part 在没有命中时返回的是空字符串，而不是null，COALESCE返回第一个不为null的元素</p>
</blockquote>
<p>在COALESCE结合split_part的使用中，想通过split_part分割字符串，然后通过COALESCE取出最后一个字符串，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(split_part(<span class="string">&#x27;First-Second&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), split_part(<span class="string">&#x27;First-Second&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>返回<code>Second</code></p>
<p>而当分隔符不存在时，缺返回了空，目标是返回<code>First</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>



<p>按照官方对COALESCE的说明：</p>
<blockquote>
<p>The <code>COALESCE</code> function returns the first of its arguments that is not null. Null is returned only if all arguments are null. It is often used to substitute a default value for null values when data is retrieved for display, for example:</p>
<p><code>SELECT COALESCE(description, short_description, &#39;(none)&#39;) ...</code></p>
</blockquote>
<p>返回第一个不为null的参数，如果都是null，则返回null</p>
<p>split_part的说明</p>
<table>
<thead>
<tr>
<th><code>split_part(string text, delimiter text, field int)</code></th>
<th><code>text</code></th>
<th>Split <code>string</code> on <code>delimiter</code> and return the given field (counting from one)</th>
<th><code>split_part(&#39;abc~@~def~@~ghi&#39;, &#39;~@~&#39;, 2)</code></th>
<th><code>def</code></th>
</tr>
</thead>
</table>
<p><em>split_part在没有命中时，返回的为空字符串，而部署null</em></p>
<p>因此要结合NULLIF使用</p>
<blockquote>
<p><code>NULLIF(value1, value2)</code></p>
<p>The <code>NULLIF</code> function returns a null value if <code>value1</code> equals <code>value2</code>; otherwise it returns <code>value1</code>. This can be used to perform the inverse operation of the <code>COALESCE</code> example given above:</p>
</blockquote>
<p>如果元素相等，则返回null，否则返回第一个元素，因此可以用了判断值是否为’’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NULLIF</span>(value1, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最终实现的SQL语句如下，并成功返回<code>First</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">COALESCE</span>(<span class="built_in">NULLIF</span>(split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;&#x27;</span>), split_part(<span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.postgresql.org/docs/9.1/functions-conditional.html">PostgreSQL: Documentation: 9.1: Conditional Expressions</a></p>
<p>[2] <a href="https://www.postgresql.org/docs/13/functions-string.html">PostgreSQL: Documentation: 13: 9.4. String Functions and Operators</a></p>
<p>[3] <a href="https://stackoverflow.com/questions/14035883/how-to-convert-empty-to-null-in-postgresql/14035890#14035890">php - How to convert empty to null in PostgreSQL? - Stack Overflow</a></p>
<p>[4] <a href="https://stackoverflow.com/questions/45766644/substituting-value-in-empty-field-after-using-split-part">sql - Substituting value in empty field after using split_part - Stack Overflow</a></p>
<p>[5] <a href="https://stackoverflow.com/questions/60381782/snowflake-split-part-function-not-returning-null-values">Snowflake SPLIT_PART Function not returning Null values - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>postgresql</category>
      </categories>
      <tags>
        <tag>split_part</tag>
        <tag>coalesce</tag>
      </tags>
  </entry>
  <entry>
    <title>kombu.exceptions.EncodeError XXXX is not JSON serializable</title>
    <url>/posts/3277/</url>
    <content><![CDATA[<p>本文记录在使用celery时，任务函数参数序列化问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@celery_app.task(<span class="params">name=<span class="string">&quot;create_subscription&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_subscription_file</span>(<span class="params">req: SubscriptionRequest</span>):</span></span><br><span class="line"></span><br><span class="line">    req = SubscriptionRequest(**kwargs)</span><br><span class="line">    subscription_count = req.count</span><br><span class="line">    run_times = math.ceil(subscription_count / <span class="number">200</span>)</span><br><span class="line">    results = &#123;</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;validDateTime&quot;</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionRequest</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    bearer_token: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    validDateTime: datetime = <span class="literal">None</span></span><br><span class="line">    validPeriodTime: <span class="built_in">int</span> = <span class="number">12</span></span><br><span class="line">    count: <span class="built_in">int</span> = <span class="number">200</span></span><br><span class="line">    deviceTypeId: <span class="built_in">int</span> = <span class="number">2</span></span><br><span class="line">    subscriptionLevelId: <span class="built_in">int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_json</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.json(exclude=&#123;<span class="string">&#x27;bearer_token&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;validDateTime&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_default_date</span>(<span class="params">cls, v</span>):</span></span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            v = get_default_valid_datetime()</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.json()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在实际项目中，准备使用pydantic作为参数校验，因此在传递给celery task时，传递了一个class Instance；接着在任务调度时报错：</p>
<p><code>kombu.exceptions.EncodeError: SubscriptionRequest is not JSON serializable</code></p>
<p>默认情况下，celery 使用JSON进行序列化数据，因此根本原因在于默认情况下class实例无法被json序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; json.dumps(SubscriptionRequest)</span><br><span class="line">TypeError: Object of <span class="built_in">type</span> SubscriptionRequest <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>json.dumps有一个参数default，在python docs文档中描述如下</p>
<blockquote>
<p>当 <em>default</em> 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。如果没有被指定，则会直接引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>。</p>
</blockquote>
<p>我们可以借助default函数来为class实例创建一个方法实现对其json序列化。</p>
<p>这里没有对类进行改造，而是优化函数的入参</p>
<p>最后改成，先传递参数到task，然后在task内对所有参数进行pydantic 校验</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@celery_app.task(<span class="params">name=<span class="string">&quot;create_subscription&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_subscription_file</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">		<span class="comment"># 对kv参数使用pydantic校验</span></span><br><span class="line">    req = SubscriptionRequest(**kwargs)</span><br><span class="line">    subscription_count = req.count</span><br><span class="line">    run_times = math.ceil(subscription_count / <span class="number">200</span>)</span><br><span class="line">    results = &#123;</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;validDateTime&quot;</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">		...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/10252010/serializing-class-instance-to-json">class serialize</a></p>
<p>[2] <a href="https://github.com/celery/celery/issues/5922">github issue</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>python json.dumps unicode</title>
    <url>/posts/b1/</url>
    <content><![CDATA[<blockquote>
<p>在dumps/dump中使用ensure_ascii=False，来手动编码为UTF8格式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 输出为Unicode编码，不便于可视化</span></span><br><span class="line">&gt; json.dumps(<span class="string">&quot;我爱China🇨🇳&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&quot;\\u6211\\u7231China\\ud83c\\udde8\\ud83c\\uddf3&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt; json.dumps(<span class="string">&quot;我爱China🇨🇳&quot;</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;&quot;我爱China🇨🇳&quot;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/18337407/saving-utf-8-texts-with-json-dumps-as-utf8-not-as-u-escape-sequence">json dumps unicode</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python library package</title>
    <url>/posts/205e/</url>
    <content><![CDATA[<h2 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h2><ol>
<li></li>
</ol>
<img src="https://oss.smart-lifestyle.cn/blog/cc19h.jpg" />



<blockquote>
<p>[<a href="https://github.com/bokeh/bokeh][1]">https://github.com/bokeh/bokeh][1]</a><br>Bokeh is an interactive visualization library for modern web browsers. It provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large or streaming datasets. Bokeh can help anyone who would like to quickly and easily make interactive plots, dashboards, and data applications.</p>
</blockquote>
<p>![][image-2]![][image-3]![][image-4]![][image-5]</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install bokeh</span><br></pre></td></tr></table></figure>
<h2 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h2><ol>
<li><img src="https://oss.smart-lifestyle.cn/file/r7d0g.jpg"><blockquote>
<p>[<a href="https://github.com/PyCQA/isort][2]">https://github.com/PyCQA/isort][2]</a><br>isort your imports, so you don’t have to.<br>isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. It provides a command line utility, Python library and plugins for various editors to quickly sort all your imports. It requires Python 3.6+ to run but supports formatting Python 2 code too.</p>
</blockquote>
<h3 id="install-1"><a href="#install-1" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install isort</span><br></pre></td></tr></table></figure>
<h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">isort file.py</span><br></pre></td></tr></table></figure></li>
<li><img src="https://oss.smart-lifestyle.cn/file/4dv6l.jpg"><blockquote>
<p>[<a href="https://github.com/pypyr/pypyr][3]">https://github.com/pypyr/pypyr][3]</a><br>pypyr is a free &amp; open-source task-runner that lets you define and run sequential steps in a pipeline.</p>
</blockquote>
<h3 id="install-2"><a href="#install-2" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pypyr</span><br></pre></td></tr></table></figure>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="事件驱动，观察者模式"><a href="#事件驱动，观察者模式" class="headerlink" title="事件驱动，观察者模式"></a>事件驱动，观察者模式</h3></li>
<li>RxPY v3.0<blockquote>
<p>[<a href="https://github.com/ReactiveX/RxPY][4]">https://github.com/ReactiveX/RxPY][4]</a><br>A library for composing asynchronous and event-based programs using observable collections and query operator functions in Python</p>
</blockquote>
<h3 id="install-3"><a href="#install-3" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install rx</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python library</tag>
      </tags>
  </entry>
  <entry>
    <title>python thread result</title>
    <url>/posts/5f19/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>python</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>python web--flask jsonify unicode</title>
    <url>/posts/9b/</url>
    <content><![CDATA[<blockquote>
<p>类似于json.dumps中ensure_ascii的配置，在flask中也有类似配置，来避免jsonify时，返回unicode编码字符</p>
</blockquote>
<p>在flask config中加入<code>app.config[&#39;JSON_AS_ASCII&#39;] = False</code>来避免jsonify对非ascii字符进行unicode编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(app_config)</span><br><span class="line">app.config.from_mapping(</span><br><span class="line">    SQLALCHEMY_DATABASE_URI=<span class="string">f&quot;postgresql+psycopg2://<span class="subst">&#123;app_config.DB_USER&#125;</span>:<span class="subst">&#123;app_config.DB_PASSWORD&#125;</span>&quot;</span></span><br><span class="line">                            <span class="string">f&quot;@<span class="subst">&#123;app_config.DB_HOST&#125;</span>:<span class="subst">&#123;app_config.DB_PORT&#125;</span>/<span class="subst">&#123;app_config.DB_NAME&#125;</span>&quot;</span>,</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># SQLALCHEMY_ECHO=True</span></span><br><span class="line">)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] [<a href="https://stackoverflow.com/questions/37531067/how-to-prevent-unicode-representation-for-latin1-characters">How to prevent Unicode representation for Latin1 characters?</a>]</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>python poetry requirements.txt</title>
    <url>/posts/143a/</url>
    <content><![CDATA[<p>Poetry 是一个python虚拟环境和依赖管理工具，也可以用来构建打包python包，只需要一个标准化<a href="https://www.python.org/dev/peps/pep-0518/">pyproject.toml</a>文件，其他依赖管理工具如：virtualenv、pipenv等</p>
<p>requirements.txt是用来描述用了哪些python包，以及版本是什么</p>
<p>这里记录一下这两者之间如何转换</p>
<ul>
<li><p>poetry export requirements.txt</p>
<p>导出requirements.txt用于容器等环境构建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements-prod.txt --without-hashes</span><br></pre></td></tr></table></figure></li>
<li><p>poerty add from requirements.txt </p>
<p>如果现在有requirements.txt，而后续想通过poetry管理包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat requirements.txt|xargs poetry add</span><br></pre></td></tr></table></figure>



<h3 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h3></li>
</ul>
<p>poetry 导出的requirements.txt里包含了依赖的python最低版本，如果poetry使用的python版本高于requirements.txt使用的python版本，执行安装时将会忽略版本不满足的包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">markupsafe</span>==<span class="number">2</span>.<span class="number">0</span>.<span class="number">1</span>; python_version &gt;= <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">20</span>.<span class="number">3</span>; python_version &gt;= <span class="string">&quot;3.7&quot;</span> and python_full_version &gt;= <span class="string">&quot;3.7.1&quot;</span></span><br></pre></td></tr></table></figure>

<p>比如上面两个包，如果你的python版本≤3.6，numpy将不会安装，因为它要求python版本大于3.7，但是也不会报错，这个地方很容易忽视。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/62764148/how-to-import-requirements-txt-from-an-existing-project-using-poetry">python - How to import requirements.txt from an existing project using Poetry - Stack Overflow</a></p>
<p>[2] <a href="https://github.com/python-poetry/poetry/blob/master/docs/cli.md">poetry/cli.md at master · python-poetry/poetry (github.com)</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>poetry</tag>
      </tags>
  </entry>
  <entry>
    <title>python url decode</title>
    <url>/posts/6645/</url>
    <content><![CDATA[<p>在http请求中，如果url query中是Unicode，将会议url encode方式发送到服务端，可能需要我们去解析，这里用到python的库<code>urllib.parse.unquote</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?w=%E6%B1%89%E5%AD%97%EC%A4%91%EA%B5%AD</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=utf-8</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>echo.paw.cloud</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Paw/3.2.2 (Macintosh; OS X/11.4.0) GCDHTTPRequest</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">&gt;&gt; unquote(<span class="string">&#x27;/?w=%E6%B1%89%E5%AD%97%EC%A4%91%EA%B5%AD&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/?w=汉字중국&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote">urllib.parse — Parse URLs into components — Python 3.9.6 documentation</a></p>
<p>[2] <a href="https://stackoverflow.com/questions/16566069/url-decode-utf-8-in-python">encoding - Url decode UTF-8 in Python - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>urlenocde</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础篇--Exception</title>
    <url>/posts/f1e8/</url>
    <content><![CDATA[<p>以下总结一下python的异常处理</p>
<h2 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h2><h3 id="BaseException"><a href="#BaseException" class="headerlink" title="BaseException"></a>BaseException</h3><blockquote>
<p>所有内置异常的基类。 它不应该被用户自定义类直接继承 (这种情况请使用 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#Exception"><code>Exception</code></a>)。 如果在此类的实例上调用 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str()</code></a>，则会返回实例的参数表示，或者当没有参数时返回空字符串</p>
</blockquote>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><blockquote>
<p>所有内置的非系统退出类异常都派生自此类。 所有用户自定义异常也应当派生自此类</p>
</blockquote>
<h3 id="ArithmeticError"><a href="#ArithmeticError" class="headerlink" title="ArithmeticError"></a>ArithmeticError</h3><blockquote>
<p>此基类用于派生针对各种算术类错误而引发的内置异常: <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#OverflowError"><code>OverflowError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#ZeroDivisionError"><code>ZeroDivisionError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#FloatingPointError"><code>FloatingPointError</code></a></p>
</blockquote>
<h3 id="BufferError"><a href="#BufferError" class="headerlink" title="BufferError"></a>BufferError</h3><blockquote>
<p>当与 <a href="https://docs.python.org/zh-cn/3/c-api/buffer.html#bufferobjects">缓冲区</a> 相关的操作无法执行时将被引发</p>
</blockquote>
<h3 id="LookupError"><a href="#LookupError" class="headerlink" title="LookupError"></a>LookupError</h3><blockquote>
<p>此基类用于派生当映射或序列所使用的键或索引无效时引发的异常: <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#IndexError"><code>IndexError</code></a>, <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#KeyError"><code>KeyError</code></a>。 这可以通过 <a href="https://docs.python.org/zh-cn/3/library/codecs.html#codecs.lookup"><code>codecs.lookup()</code></a> 来直接引发</p>
</blockquote>
<h3 id="具体异常"><a href="#具体异常" class="headerlink" title="具体异常"></a>具体异常</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>



<h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><p>典型的异常处理结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">except</span> YourException <span class="keyword">as</span> e:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  (your code)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  (your code)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>finally 语句 无论是否有异常都会执行，另外如果finally中有return语句，那么始终返回finally中的return语句</li>
<li>else  语句在没有异常时执行</li>
<li>except 可以同时填写多个Exception</li>
</ul>
<h3 id="处理多个异常"><a href="#处理多个异常" class="headerlink" title="处理多个异常"></a>处理多个异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(n1, n2) / n2</span><br><span class="line">    <span class="keyword">except</span> (TypeError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">&gt; test(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获到 ZeroDivisionError</span></span><br><span class="line">&gt; test(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">float</span> division by zero</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获到TypeError</span></span><br><span class="line">&gt; test(<span class="string">&#x27;0&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">must be real number, <span class="keyword">not</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有捕获到，程序异常触发ValueError</span></span><br><span class="line">&gt; test(-<span class="number">1</span>, <span class="number">0.1</span>)</span><br><span class="line">ValueError: math domain error       </span><br></pre></td></tr></table></figure>



<h3 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h3><p>使用<code>except Exception as e:</code>来捕获其他所有异常（注：这个将会捕获除了 <code>SystemExit</code> 、 <code>KeyboardInterrupt</code> 和 <code>GeneratorExit</code> 之外的所有异常）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(n1, n2) / n2</span><br><span class="line">    <span class="keyword">except</span> (TypeError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      	<span class="built_in">print</span>(<span class="string">&#x27;Exception: &#x27;</span>, e)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 如果不确定异常类型，可以写Exception，捕获通用Exception   </span></span><br><span class="line">&gt; test(-<span class="number">1</span>, <span class="number">0.1</span>)</span><br><span class="line">Exception:  math domain error</span><br></pre></td></tr></table></figure>



<h3 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h3><p>自定义异常，继承于<code>Exception</code> 或者其他任何一个已存在的异常类型，假如在处理流，需要涉及到网络流、文件流、内存流，那么可以涉及到如下异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWorkStreamError</span>(<span class="params">StreamError</span>):</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStreamError</span>(<span class="params">StreamError</span>):</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStreamError</span>(<span class="params">StreamError</span>):</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要用到时，可以按照Exception方式，传递参数即可，Exception将所有传递的参数以元组的形式，存在<code>args</code>里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;name error&#x27;</span>, <span class="string">&#x27;IO error&#x27;</span>, <span class="string">&#x27;EOF error&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.args)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">&#x27;name error&#x27;</span>, <span class="string">&#x27;IO error&#x27;</span>, <span class="string">&#x27;EOF error&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果要重写<code>__init__()</code>方法，需要确保所有参数都给赋值到父类<code>Exception.__init__()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message, status</span>):</span></span><br><span class="line">    <span class="built_in">super</span>().__init__(message, status)</span><br><span class="line">    self.msg = message</span><br><span class="line">    self.sta = status</span><br></pre></td></tr></table></figure>



<h3 id="捕获异常后抛出另外异常"><a href="#捕获异常后抛出另外异常" class="headerlink" title="捕获异常后抛出另外异常"></a>捕获异常后抛出另外异常</h3><p>使用<code>raise Error from e</code>来形成异常链，可以看到下面的信息：</p>
<p>The above exception was the direct cause of the following exception</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;need str&#x27;</span>) <span class="keyword">from</span> e</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误信息</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-80-e2122a02c1f3&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2     raise ValueError(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line">      3 except Exception as e:</span><br><span class="line"></span><br><span class="line">ValueError: EOF</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-80-e2122a02c1f3&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2     raise ValueError(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">&#x27;need str&#x27;</span>) from e</span><br><span class="line">      5     <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure>

<p>如果没有使用<code>from e</code>，认为同时发生了两个Exception</p>
<p>During handling of the above exception, another exception occurred</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;need str&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-93-7ae0db540006&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-93-7ae0db540006&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">&#x27;need str&#x27;</span>)</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure>

<p>如果要忽略掉异常链，可以使用<code>raise from None</code>, 只最后的异常抛出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;need str&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-94-3858a6e7a744&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">----&gt; 4     raise TypeError(<span class="string">&#x27;need str&#x27;</span>) from None</span><br><span class="line"></span><br><span class="line">TypeError: need str</span><br></pre></td></tr></table></figure>



<h3 id="重新抛出被捕获的异常"><a href="#重新抛出被捕获的异常" class="headerlink" title="重新抛出被捕获的异常"></a>重新抛出被捕获的异常</h3><p>如果想将异常重新被上一级捕获，可以在except中单独加一个<code>raise</code>语句，这样可以在异常中记录日志等操作后将异常传播出去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     x = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># other code</span></span><br><span class="line">    <span class="keyword">raise</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-95-1519a0755ccc&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      1 try:</span><br><span class="line">----&gt; 2      x = 3 / 0</span><br><span class="line">      3 except Exception as e:</span><br><span class="line">      4     raise</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>引入异常处理，会带来一定的性能损耗，对于对性能有要求的程序，应该对可预测的结果做逻辑处理，而不是全部用异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">       st = time.perf_counter()</span><br><span class="line">       func(*args, **kwargs)</span><br><span class="line">       end = time.perf_counter()</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">f&#x27;using <span class="subst">&#123;end - st&#125;</span>s&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div1</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> / num</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div2</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> / num</span><br><span class="line">      </span><br><span class="line">&gt; div1(<span class="number">0</span>)</span><br><span class="line">using <span class="number">4.4405460357666016</span>e-06s</span><br><span class="line"></span><br><span class="line">&gt; div2(<span class="number">0</span>)</span><br><span class="line">using <span class="number">1.341104507446289</span>e-06s</span><br></pre></td></tr></table></figure>

<p>也许会有人说，既然用python了，还在乎那点性能，我想说python性能调优也是一种追求</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#bltin-exceptions">python内置异常</a></p>
<p>[2] <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/">python cookbook</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础篇--function</title>
    <url>/posts/2f69/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>python多线程</title>
    <url>/posts/76d7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python文件名操作</title>
    <url>/posts/bea3/</url>
    <content><![CDATA[<p>在进行文件上传或者文件转换时，需要进行文件上传（读取完整的本地文件路径），文件保存（仅文件名），格式转换（不包含后缀的文件名以及后缀名）</p>
<p>使用到python库有：</p>
<ul>
<li><p>os.path.splitext()</p>
<p>分离文件名和文件后缀，以最后一个’.’来获取文件后缀</p>
</li>
<li><p>os.path.split()</p>
<p>分离文件路径和文件名</p>
</li>
</ul>
<ol>
<li>os.path.splitext()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> splitext</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose&#x27;</span>, <span class="string">&#x27;.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入是一个不包含路径的隐藏文件格式，后缀返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitext(<span class="string">&#x27;.bashrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;.bashrc&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>os.path.split()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> split</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik/docker-compose.yml&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/simple/workspace/tmp/traefik&#x27;</span>, <span class="string">&#x27;docker-compose.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入为一个不含路径的以.开头的文件，路径返回为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>split(<span class="string">&#x27;.bascrc&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;.bascrc&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.python.org/3/library/os.path.html">os.path — Common pathname manipulations — Python 3.9.6 documentation</a></p>
<p>[2] <a href="https://blog.csdn.net/lilongsy/article/details/99853925">Python获取文件路径、文件名和扩展名_小龙在线-CSDN博客_python 获取路径文件名</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>python校验url的完整性</title>
    <url>/posts/2c0e/</url>
    <content><![CDATA[<p>在抓取链接之后，我们需要对链接进行清洗，把格式不正确的链接去除，以便后面数据抓取</p>
<ul>
<li><a href="https://www.baidu.com/">https://www.baidu.com</a> ✅</li>
<li>httpz://<a href="http://www.baidu.com/">www.baidu.com</a> ❌</li>
<li># ❌</li>
<li><a href="ftp://a.com/file/1111">ftp://a.com/file/1111</a> ✅ </li>
</ul>
<p>以下总结两种方式来判断url的完整性</p>
<h3 id="通过python-urlparse库来实现"><a href="#通过python-urlparse库来实现" class="headerlink" title="通过python urlparse库来实现"></a>通过python urlparse库来实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这种没有协议头的，无法返回协议头，以及网络位置，把实际的网络位置定义为了路径部分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;&#x27;</span>, netloc=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;www.baidu.com&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 正确识别到url协议，以及网络位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;https&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 一个 # 返回一个‘空’对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;&#x27;</span>, netloc=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是向这种格式正确，但是url协议头不对的，虽然能解析，但是不会提示错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">&#x27;ssp://www.baidu.com&#x27;</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;ssp&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>urlparse的功能强大，支持多种协议格式的解析</p>
<p>下面的例子将用户名、密码、服务器地址、端口等全部解析出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; data = urlparse(<span class="string">&#x27;wss://username:password@192.168.1.1:90/s/data#video1&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; data.username</span><br><span class="line"><span class="string">&#x27;username&#x27;</span></span><br><span class="line">&gt;&gt;&gt; data.password</span><br><span class="line"><span class="string">&#x27;password&#x27;</span></span><br><span class="line">&gt;&gt;&gt; data.port</span><br><span class="line">90</span><br><span class="line">&gt;&gt;&gt; data.hostname</span><br><span class="line"><span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line"><span class="comment"># netloc解析范围应该是//.../中间的内容</span></span><br><span class="line">&gt;&gt;&gt; data.netloc</span><br><span class="line"><span class="string">&#x27;username:password@192.168.1.1:90&#x27;</span></span><br></pre></td></tr></table></figure>



<p>如果是用来解析http(s)，可以参考下面的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">myurl = <span class="string">&#x27;https://smart-lifestyle.cn/404.html&#x27;</span></span><br><span class="line">ret = urlparse(myurl)</span><br><span class="line"><span class="keyword">if</span> ret.scheme <span class="keyword">in</span> (<span class="string">&#x27;https&#x27;</span>, <span class="string">&#x27;http&#x27;</span>) <span class="keyword">and</span> ret.netloc:</span><br><span class="line">  fetch_data(url)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;URL is not vaild&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="通过正则表达匹配来实现"><a href="#通过正则表达匹配来实现" class="headerlink" title="通过正则表达匹配来实现"></a>通过正则表达匹配来实现</h3><p>也可以使用正则表达式实现自己的解析功能，比如我们只判断http和https的url格式，可以这么做</p>
<p>这里参考了<a href="https://github.com/django/django/blob/main/django/core/validators.py#L74">Django</a>的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ipv4_re = <span class="string">r&#x27;(?:0|25[0-5]|2[0-4]\d|1\d?\d?|[1-9]\d?)(?:\.(?:0|25[0-5]|2[0-4]\d|1\d?\d?|[1-9]\d?))&#123;3&#125;&#x27;</span></span><br><span class="line">ipv6_re = <span class="string">r&#x27;\[[0-9a-f:.]+\]&#x27;</span></span><br><span class="line">ul = <span class="string">&#x27;\u00a1-\uffff&#x27;</span></span><br><span class="line">domain_re = <span class="string">r&#x27;(?:\.(?!-)[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9-]&#123;1,63&#125;(?&lt;!-))*&#x27;</span></span><br><span class="line">tld_re = (</span><br><span class="line">        <span class="string">r&#x27;\.&#x27;</span>                                <span class="comment"># dot</span></span><br><span class="line">        <span class="string">r&#x27;(?!-)&#x27;</span>                             <span class="comment"># can&#x27;t start with a dash</span></span><br><span class="line">        <span class="string">r&#x27;(?:[a-z&#x27;</span> + ul + <span class="string">&#x27;-]&#123;2,63&#125;&#x27;</span>         <span class="comment"># domain label</span></span><br><span class="line">        <span class="string">r&#x27;|xn--[a-z0-9]&#123;1,59&#125;)&#x27;</span>              <span class="comment"># or punycode label</span></span><br><span class="line">        <span class="string">r&#x27;(?&lt;!-)&#x27;</span>                            <span class="comment"># can&#x27;t end with a dash</span></span><br><span class="line">        <span class="string">r&#x27;\.?&#x27;</span>                               <span class="comment"># may have a trailing dot</span></span><br><span class="line">    )</span><br><span class="line">hostname_re = <span class="string">r&#x27;[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9](?:[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9-]&#123;0,61&#125;[a-z&#x27;</span> + ul + <span class="string">r&#x27;0-9])?&#x27;</span></span><br><span class="line">host_re = <span class="string">&#x27;(&#x27;</span> + hostname_re + domain_re + tld_re + <span class="string">&#x27;|localhost)&#x27;</span></span><br><span class="line">regex = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">r&#x27;^(?:[a-z0-9.+-]*)://&#x27;</span>  <span class="comment"># scheme is validated separately</span></span><br><span class="line">        <span class="string">r&#x27;(?:[^\s:@/]+(?::[^\s:@/]*)?@)?&#x27;</span>  <span class="comment"># user:pass authentication</span></span><br><span class="line">        <span class="string">r&#x27;(?:&#x27;</span> + ipv4_re + <span class="string">&#x27;|&#x27;</span> + ipv6_re + <span class="string">&#x27;|&#x27;</span> + host_re + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="string">r&#x27;(?::\d&#123;1,5&#125;)?&#x27;</span>  <span class="comment"># port</span></span><br><span class="line">        <span class="string">r&#x27;(?:[/?#][^\s]*)?&#x27;</span>  <span class="comment"># resource path</span></span><br><span class="line">        <span class="string">r&#x27;\Z&#x27;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url1 = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    url2 = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">    url3 = <span class="string">&#x27;ht:/www.baidu.com&#x27;</span></span><br><span class="line">    url4 = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(regex.match(url1))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url2))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url3))</span><br><span class="line">    <span class="built_in">print</span>(regex.match(url4))</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span=(0, 21), match=<span class="string">&#x27;https://www.baidu.com&#x27;</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(0, 20), match=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span><br><span class="line">None</span><br><span class="line">None</span><br><span class="line">[Finished <span class="keyword">in</span> 78ms]</span><br></pre></td></tr></table></figure>



<p>在Django的代码里，对于url协议类型的判断它没有集成到这个正则匹配中，而是先判断url协议，再解析格式，这样他可以灵活定义支持哪些url协议</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schemes = [<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>, <span class="string">&#x27;ftp&#x27;</span>, <span class="string">&#x27;ftps&#x27;</span>]</span><br><span class="line"><span class="comment"># Check if the scheme is valid.</span></span><br><span class="line">scheme = value.split(<span class="string">&#x27;://&#x27;</span>)[<span class="number">0</span>].lower()</span><br><span class="line"><span class="keyword">if</span> scheme <span class="keyword">not</span> <span class="keyword">in</span> self.schemes:</span><br><span class="line">    <span class="keyword">raise</span> ValidationError(self.message, code=self.code, params=&#123;<span class="string">&#x27;value&#x27;</span>: value&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://docs.python.org/3.0/library/urllib.parse.html">urllib.parse — Parse URLs into components — Python v3.0.1 documentation</a></p>
<p>[2] <a href="https://github.com/django/django/blob/main/django/core/validators.py#L74">django/validators.py at main · django/django (github.com)</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>urlparse</tag>
        <tag>正则表达</tag>
      </tags>
  </entry>
  <entry>
    <title>python进阶--魔法函数</title>
    <url>/posts/4e20/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>rancherandgithub</title>
    <url>/posts/a8ad/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>rancher初步使用</title>
    <url>/posts/363a/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>rancher多主机部署</title>
    <url>/posts/ee95/</url>
    <content><![CDATA[<blockquote>
<p>整理在腾讯云上如何使用rancher搭建k8s集群，以下操作不适用于生产环境，用于个人测试</p>
</blockquote>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>使用到的服务：<a href="https://cloud.tencent.com/document/product/582/9127#null">CFS</a>，<a href="https://cloud.tencent.com/document/product/213/16918#null">CVM</a> 等</p>
<p>在部署中使用的CVM服务器配置如下：</p>
<p><img src="https://oss.smart-lifestyle.cn/file/svwr6.png" alt="image-20210623144304343"></p>
<p>使用的文件存储配置如下：</p>
<p><img src="https://oss.smart-lifestyle.cn/file/pgg6q.png" alt="image-20210624143319616"></p>
<h3 id="端口要求"><a href="#端口要求" class="headerlink" title="端口要求"></a>端口要求</h3><p>参考：<a href="https://docs.rancher.cn/docs/rancher2/installation/requirements/ports/_index">端口要求 | Rancher文档</a>；需要在安全组内开放以上端口</p>
<p>其中</p>
<table>
<thead>
<tr>
<th>master</th>
<th>2核4G</th>
<th>安装rancher server， 集群etcd、control角色</th>
</tr>
</thead>
<tbody><tr>
<td>node</td>
<td>4核8G</td>
<td>安装k8s 节点，集群worker角色</td>
</tr>
</tbody></table>
<h2 id="安装rancher-server"><a href="#安装rancher-server" class="headerlink" title="安装rancher server"></a>安装rancher server</h2><p>Ssh远程连接到master节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rancher/rancher</span><br><span class="line">sudo docker run -d --privileged --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher</span><br></pre></td></tr></table></figure>

<p>以上执行时，使用自签名证书，如果使用CA签名证书，可以参考如下<a href="https://docs.rancher.cn/docs/rancher2.5/installation/other-installation-methods/single-node-docker/_index/">命令</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d  --restart=unless-stopped \</span><br><span class="line">	-p 80:80 -p 443:443 \</span><br><span class="line">	-v &lt;rancher/data path&gt;:/var/lib/rancher \</span><br><span class="line">	-v &lt;full_chain.pem path&gt;:/etc/rancher/ssl/cert.pem \</span><br><span class="line">	-v &lt;private.pem path&gt;:/etc/rancher/ssl/key.pem \</span><br><span class="line">	-v /var/<span class="built_in">log</span>/rancher/auditlog:/var/<span class="built_in">log</span>/auditlog \</span><br><span class="line">	--privileged --name rancher-server  rancher/rancher --no-cacerts</span><br></pre></td></tr></table></figure>



<h2 id="添加集群"><a href="#添加集群" class="headerlink" title="添加集群"></a>添加集群</h2><p>登录到Rancher 管理页面</p>
<p><img src="https://oss.smart-lifestyle.cn/file/orl7g.png" alt="image-20210511144233895"></p>
<p>点击添加集群，选择自定义</p>
<p><img src="https://oss.smart-lifestyle.cn/file/skrdl.png" alt="image-20210511144255559"></p>
<h3 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h3><ol>
<li>选择Etcd、Control角色</li>
<li>填写内网地址</li>
<li>填写节点名称</li>
</ol>
<p><img src="https://oss.smart-lifestyle.cn/file/uebzb.png" alt="image-20210511152659512"></p>
<p>然后会生成命令，在Master节点主机上执行</p>
<p><img src="https://oss.smart-lifestyle.cn/file/9aknb.png" alt="image-20210624131205714"></p>
<h3 id="配置worker节点"><a href="#配置worker节点" class="headerlink" title="配置worker节点"></a>配置worker节点</h3><ol>
<li>选择Worker角色</li>
<li>填写内网地址</li>
<li>填写节点名称</li>
</ol>
<p>然后会生成命令，在Node节点主机上执行</p>
<p><img src="https://oss.smart-lifestyle.cn/file/9aknb.png" alt="image-20210624131205714"></p>
<p>Rancher会监测角色是否齐全，如果不齐全，它会一直等待，只有我们创建的节点包含所有角色，才会去创建K8s服务</p>
<h3 id="最后的结果"><a href="#最后的结果" class="headerlink" title="最后的结果"></a>最后的结果</h3><p><img src="https://oss.smart-lifestyle.cn/file/vt5r4.png" alt="image-20210624131709858"></p>
<h2 id="部署应用测试"><a href="#部署应用测试" class="headerlink" title="部署应用测试"></a>部署应用测试</h2><p>选择已经安装的集群，选择命名空间Default</p>
<p><img src="https://oss.smart-lifestyle.cn/file/pr139.png" alt="image-20210624133826105"></p>
<p>里面有工作负载、负载均衡等项</p>
<p><img src="https://oss.smart-lifestyle.cn/file/y9tpe.png" alt="image-20210624133946097"></p>
<p>点击部署服务，填写名称、docker镜像、端口映射等，点击启动</p>
<p><img src="https://oss.smart-lifestyle.cn/file/5akkx.png" alt="image-20210624134301378"></p>
<p>完成后，显示当前处于Active，对外暴露端口为31621</p>
<p><img src="https://oss.smart-lifestyle.cn/file/hhjuh.png" alt="image-20210624134430442"></p>
<p>如果想通过公网访问，需要手动在安全组开放端口</p>
<p><img src="https://oss.smart-lifestyle.cn/file/sqw39.png" alt="image-20210624134713237"></p>
<p>打开浏览器，输入IP/域名+端口号进行访问</p>
<p><img src="https://oss.smart-lifestyle.cn/file/bpcop.png" alt="image-20210624135020120"></p>
<h3 id="通过Ingress访问"><a href="#通过Ingress访问" class="headerlink" title="通过Ingress访问"></a>通过Ingress访问</h3><p>在负载均衡页面添加转发规则，点击保存，等待生效</p>
<p><img src="https://oss.smart-lifestyle.cn/file/dcl00.png" alt="image-20210624140420462"></p>
<p>这样就可以通过id/域名+path的方式访问</p>
<p><img src="https://oss.smart-lifestyle.cn/file/aqhg5.png" alt="image-20210624140608911"></p>
<h2 id="增加持久卷"><a href="#增加持久卷" class="headerlink" title="增加持久卷"></a>增加持久卷</h2><p>以下使用腾讯云产品cfs NFS方式挂载PV；首先需要购买腾讯云的文件存储</p>
<h3 id="购买文件存储"><a href="#购买文件存储" class="headerlink" title="购买文件存储"></a>购买文件存储</h3><ol>
<li><p>新建文件系统</p>
</li>
<li><p>购买资源包(个人测试建议选择跟云主机同一区域的)</p>
<p><img src="https://oss.smart-lifestyle.cn/file/hp09i.png" alt="image-20210624141158272"></p>
</li>
<li><p>查看挂点信息中的IP</p>
<p><img src="https://oss.smart-lifestyle.cn/file/4jo9q.png" alt="image-20210624141316684"></p>
</li>
</ol>
<h3 id="在Rancher中添加持久卷PV"><a href="#在Rancher中添加持久卷PV" class="headerlink" title="在Rancher中添加持久卷PV"></a>在Rancher中添加持久卷PV</h3><p>选择集群，然后选择存储–持久卷，点击添加PV</p>
<ul>
<li>卷插件选择NFS Share</li>
<li>服务器填写上一步生成的地址</li>
<li>路径填写/；新建的NFS系统中没有其他文件夹，<strong>如果想挂载二级目录，需要先手动创建目录</strong></li>
<li>访问模式选择多主机读写</li>
</ul>
<p><img src="https://oss.smart-lifestyle.cn/file/gujzs.png" alt="image-20210624141553553"></p>
<h3 id="添加PVC"><a href="#添加PVC" class="headerlink" title="添加PVC"></a>添加PVC</h3><p>点击添加PVC，选择上一步新建的持久卷（一个PV只能在一个PVC下面），删除PVC时，会将PV也“删除”😱</p>
<p><img src="https://oss.smart-lifestyle.cn/file/8iwlx.png" alt="image-20210624141855083"></p>
<h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p>新建工作负载或者升级已有负载</p>
<p>选择数据卷–添加卷–使用现有PVC</p>
<ul>
<li>添加正确的容器路径</li>
<li>子路径填写相对路径（相对于根路径），这里面写的路径，会自动在NFS文件系统中创建😄</li>
</ul>
<p><img src="https://oss.smart-lifestyle.cn/file/2wyug.png" alt="image-20210624142438484"></p>
<p>通过df -h 能看到挂载成功</p>
<p><img src="https://oss.smart-lifestyle.cn/file/s4f4n.png" alt="image-20210624142958655"></p>
<h2 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h2><p>免费证书可以在这个<a href="https://freessl.cn/">网站</a>生成，使用比较简单，具体使用参考网上说明</p>
<p><img src="https://oss.smart-lifestyle.cn/file/p0hg5.png" alt="image-20210624143604995"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.rancher.cn/docs/rancher2.5/installation/other-installation-methods/single-node-docker/_index/">安装指南 | Rancher文档</a></p>
<p>[2] <a href="https://docs.rancher.cn/docs/rancher2/installation/requirements/_index/">具体要求 | Rancher文档</a></p>
<p>[3] <a href="https://docs.rancher.cn/docs/rancher2/quick-start-guide/deployment/quickstart-manual-setup/_index">手动快速部署 | Rancher文档</a></p>
<p>[4] <a href="https://docs.rancher.cn/docs/rancher2/best-practices/use-in-china/_index/">如何在国内使用 Rancher | Rancher文档</a></p>
<p>[5] <a href="https://docs.rancher.cn/docs/rancher2/installation/other-installation-methods/single-node-docker/troubleshooting/_index/">证书相关的问题排查 | Rancher文档</a></p>
<p>[6] <a href="https://docs.rancher.cn/docs/rancher2.5/installation/other-installation-methods/single-node-docker/advanced/_index/">单节点安装的高级选项 | Rancher文档</a></p>
<p>[7] <a href="https://docs.rancher.cn/docs/rancher2.5/admin-settings/replace-ip-domain/_index/">变更 Rancher Server IP 或域名 | Rancher文档</a></p>
<p>[8] <a href="https://github.com/theAkito/rancher-helpers/blob/master/scripts/cleanup_rancher.sh">rancher-helpers/cleanup_rancher.sh at master · theAkito/rancher-helpers (github.com)</a></p>
<p>[9] <a href="https://blog.csdn.net/aixiaoyang168/article/details/88664263">Rancher 2.x 负载均衡配置及使用_哎_小羊的博客-CSDN博客_rancher 负载均衡</a></p>
<p>[10] <a href="https://blog.csdn.net/aixiaoyang168/article/details/88600530#t12">Rancher 2.x 搭建及管理 Kubernetes 集群_哎_小羊的博客-CSDN博客_rancher</a></p>
<p>[11] <a href="https://cloud.tencent.com/document/product/582/36929">文件存储 在容器上使用 CFS - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>sentry初试牛刀</title>
    <url>/posts/a9f1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik</title>
    <url>/posts/7112/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ubuntu更改主机名</title>
    <url>/posts/62e8/</url>
    <content><![CDATA[<ul>
<li>增加或者修改<code>/etc/hostname</code>，添加新的主机名</li>
<li>修改<code>/etc/hosts</code>，在127.0.0.1中添加新的主机名</li>
<li>如果是在云上运行vm实例，需要修改上面的<code>/etc/cloud/cloud.cfg</code>，否则重启机器后，hostname会变为默认值😭；找到<code>preserve_hostname</code>，将其值改为<code>true</code></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.myfreax.com/how-to-change-hostname-on-ubuntu-20-04/">如何在Ubuntu 20.04上更改主机名 (myfreax.com)</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualenvwrapper的安装和使用</title>
    <url>/posts/9fc5/</url>
    <content><![CDATA[<blockquote>
<p>virtualenvwrapper 是python虚拟运行环境的管理工具，在多个项目时，防止包版本不同造成冲突等麻烦<br>也可以在共享项目时，不引入不必要的python包<br>​</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m pip install virtualenvwrapper</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装完 virtualenvwrapper，默认没有生效，需要在终端中执行 <code>source /usr/local/bin/virtualenvwrapper.sh</code> 才能生效，而且每次运行前都需要执行该命令，因此需要将其配置到 终端的.* shrc 文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据终端类型，修改 对应的.zshrc .bashrc文件，加入下面这句话</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="comment"># 应用新的配置文件，以zshrc为例</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统虚拟环境列表</span></span><br><span class="line">lsvirtualenv</span><br><span class="line"><span class="comment"># 创建新的虚拟环境, [name] 为虚拟环境名字</span></span><br><span class="line">mkvirtualenv [name]</span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">rmvirtualenv [name]</span><br><span class="line"><span class="comment"># 应用某个虚拟环境</span></span><br><span class="line">workon [name]</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html">virtualenvwrapper.readthedocs.io</a><br>  ​</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>使用crontab定期同步NTP时间</title>
    <url>/posts/c57a/</url>
    <content><![CDATA[<p>购买的阿里云香港虚机，不知道怎么回事，过一段时间，它的时间就跟实际时间偏离越来越远，导致HTTPS无法正常工作，</p>
<p>最开始是手动的登录的服务器，使用<code>rdate -s time.nist.gov</code>进行手动更新时间，但后来发现自己越来越懒，而且最近这个命令一直出错: <code>rdate: Could not read data: Cannot assign requested address</code>, 可能是后面的时间同步服务器挂了。</p>
<p>因此改为使用<code>ntpdate</code>来同步时间，使用阿里云的ntp服务器ntp.cloud.aliyuncs.com</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate ntp.cloud.aliyuncs.com</span><br><span class="line">23 May 14:43:07 ntpdate[9801]: step time server 100.100.61.88 offset 3.848040 sec</span><br></pre></td></tr></table></figure>

<p>然后将改名了加入crontab任务中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 将下面命令添加到最后</span></span><br><span class="line">* * * * * ntpdate ntp.cloud.aliyuncs.com</span><br></pre></td></tr></table></figure>

<p>保存退出，但是实际运行一段时间，发现服务的实际还是距离真实时间越来越远，感觉是ntpdate命令没有工作，于是将定时任务改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * ntpdate ntp.cloud.aliyuncs.com &gt;&gt; /var/<span class="built_in">log</span>/myntp.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>保存运行退出后，查看ntpdate运行日志，果然存在问题<code>/bin/sh: 1: ntpdate: not found</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f myntp.log</span><br><span class="line">/bin/sh: 1: ntpdate: not found</span><br><span class="line">/bin/sh: 1: ntpdate: not found</span><br><span class="line">/bin/sh: 1: ntpdate: not found</span><br></pre></td></tr></table></figure>

<p>cron在运行时，找不到ntpdate命令，继续排查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># which ntpdate</span></span><br><span class="line">/usr/sbin/ntpdate</span><br></pre></td></tr></table></figure>

<p>在crontab任务中增加一行<code>* * * * * env &gt;&gt; /var/log/env.log 2&gt;&amp;1</code></p>
<p>并查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tail -f env.log</span></span><br><span class="line">PATH=/usr/bin:/bin</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PWD=/root</span><br></pre></td></tr></table></figure>

<p>终于发现问题了，crontab运行时查找命令的路径为<code>/usr/bin</code> 和<code>/bin</code>目录，而不包含<code>/usr/sbin/</code></p>
<p>我们可以在crontab中增加<code>PATH=$PATH:/usr/sbin/</code>,也可以使用ntpdate的绝对路径，将之前ntpdate任务改为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * /usr/sbin/ntpdate ntp.cloud.aliyuncs.com</span><br></pre></td></tr></table></figure>

<p>保存退出后，观察服务器时间，发现已经变为正常时间了。</p>
<h2 id="crontab设置"><a href="#crontab设置" class="headerlink" title="crontab设置"></a>crontab设置</h2><p>最前面5段用于设置周期时间</p>
<p><img src="https://oss.smart-lifestyle.cn/file/rdivm.png" alt="image-20210521150550791"></p>
<p>这里举一些常用的例子，可以使用这个<a href="https://crontab.guru/">网站</a>进行测试</p>
<ul>
<li><p>每一分钟执行一次</p>
<p><code>* * * * *</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/sgflk.png" alt="image-20210521145726370"></p>
</li>
<li><p>每隔十分钟运行一次(📢这里的每个10分钟，不是从现在或者任务开始算起，而是每小时的第十分钟，10，20， 30….)</p>
<p><code>*/10 * * * *</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/qpet2.png" alt="image-20210521145941538"></p>
</li>
<li><p>每天晚上23：55执行一次</p>
<p><code>55 23 * * *</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/udg1l.png" alt="image-20210521150051826"></p>
</li>
<li><p>每隔两个月的第一天晚上23：55执行一次（比如用于ssl证书的更新）</p>
<p><code>55 23 1 */2 *</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/w278h.png" alt="image-20210521150255631"></p>
</li>
<li><p>每周五晚上23：55发送报表</p>
<p><code>55 23 * * 5</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/xlh36.png" alt="image-20210521150430138"></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://crontab.guru/#*_*_*_*_*">crontab tool</a></p>
<p>[2] <a href="https://stackoverflow.com/questions/4811738/how-to-log-cron-jobs">log cron jobs</a></p>
<p>[3] <a href="https://www.cnblogs.com/centos2017/p/12963610.html">ntpdate: command not found</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>python递归创建目录(mkdir -p)</title>
    <url>/posts/7376/</url>
    <content><![CDATA[<p>在为日志文件设置存放位置时，需要在程序里判断文件夹（位置）是否存在，通常使用<code>os.mkdir</code>来创建目录，但是如果目录为多层次目录，而且某一层目录存在，在使用<code>os.mkdir</code>时会报错：FileNotFoundError*</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">&#x27;/tmp/logpath/path&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;/tmp/logpath/path&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这是因为os.mkdir不支持多层目录递归创建。</p>
<p>在linux mkdir命令中，它支持如下操作，使用-p 可以实现递归创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tldr mkdir</span><br><span class="line">Cache is out of date. You should run <span class="string">&quot;tldr --update&quot;</span></span><br><span class="line"></span><br><span class="line">  mkdir</span><br><span class="line"></span><br><span class="line">  Creates a directory.</span><br><span class="line">  More information: https://www.gnu.org/software/coreutils/mkdir.</span><br><span class="line"></span><br><span class="line">  - Create a directory <span class="keyword">in</span> current directory or given path:</span><br><span class="line">    mkdir directory</span><br><span class="line"></span><br><span class="line">  - Create directories recursively (useful <span class="keyword">for</span> creating nested <span class="built_in">dirs</span>):</span><br><span class="line">    mkdir -p path/to/directory</span><br></pre></td></tr></table></figure>

<p>而在python中我们可以使用pathlib.Path.mkdir来实现，需要让<code>exist_ok=True</code> 以及<code>parents=True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Path.mkdir(mode=<span class="number">0o777</span>, parents=<span class="literal">False</span>, exist_ok=<span class="literal">False</span>)</span><br><span class="line">If exist_ok <span class="keyword">is</span> true, FileExistsError exceptions will be ignored (same behavior <span class="keyword">as</span> the POSIX mkdir -p command), but only <span class="keyword">if</span> the last path component <span class="keyword">is</span> <span class="keyword">not</span> an existing non-directory file.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">&#x27;/tmp/logtmp/XMKDRL&#x27;</span>).mkdir(exist_ok=<span class="literal">True</span>, parents=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">&#x27;/tmp/logtmp/XMKDRL&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] [mkdir-p-functionality-in-python](<a href="https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python">mkdir -p functionality in Python - Stack Overflow</a>)</p>
<p>[2] [Path.mkdir](<a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir">pathlib — Object-oriented filesystem paths — Python 3.9.5 documentation</a>)</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>修改SQL Server连接字符串</title>
    <url>/posts/3178/</url>
    <content><![CDATA[<blockquote>
<p>com.microsoft.sql server.jdbc.sqlserverException:驱动程序无法使用安全套接字层（SSL）加密建立到SQL Server的安全连接</p>
</blockquote>
<p>在高级设置中trustServerCertificate改为true即可</p>
<p><img src="https://oss.smart-lifestyle.cn/file/cs6v8.png" alt="image-20210630111813541"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.baooytra.com/knowledge/questions/56246/modifying-sql-server-connection-string.html?smartspace=fme-desktop-getting-started_2">修改SQL Server连接字符串-FME社区 - 亚搏在线 (baooytra.com)</a></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>sqlserverException</tag>
      </tags>
  </entry>
  <entry>
    <title>函数计算中python依赖包打包</title>
    <url>/posts/990c/</url>
    <content><![CDATA[<p>以下操作使用于华为云的<a href="https://support.huaweicloud.com/functiongraph/">functiongraph</a>和腾讯云的<a href="https://cloud.tencent.com/document/product/583/9199">serverless</a></p>
<p><em>！有些包需要编译，因此建议在centos7中进行操作</em></p>
<h3 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h3><ol>
<li>Centos7 + python3.6环境 + zip</li>
<li>requirements.txt</li>
</ol>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li><p>安装依赖到本地文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">mkdir new_dir</span><br><span class="line"><span class="comment"># python依赖包安装到指定目录, -t将所有依赖安装到new_dir目录</span></span><br><span class="line">pip install -r requirements-prod.txt -t  new_dir/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>打包成zip包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到安装目录文件夹里</span></span><br><span class="line"><span class="built_in">cd</span> new_dir</span><br><span class="line"><span class="comment"># 压缩为zip包(打包的为里面的文件，不是new_dir这个目录)</span></span><br><span class="line">zip -rq package_name.1.1.zip *</span><br></pre></td></tr></table></figure></li>
<li><p>上传</p>
<p>根据各个云的要求，将zip包上传，如果zip包太大，一般都要求先上传到对象存储中</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/583/9702">云函数 部署函数 - 操作指南 - 文档中心 - 腾讯云 (tencent.com)</a></p>
<p>[2] <a href="https://support.huaweicloud.com/functiongraph_faq/functiongraph_03_0343.html">如何制作函数依赖包？_函数工作流 FunctionGraph_常见问题_通用问题_华为云 (huaweicloud.com)</a></p>
]]></content>
      <categories>
        <category>serverless</category>
      </categories>
      <tags>
        <tag>serverless</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>在Azure Pipeline上编译React Native Android APP</title>
    <url>/posts/bf91/</url>
    <content><![CDATA[<p>本文介绍在Azure Pipeline上搭建Android 编译打包过程以及中间遇到的问题，最终将打包好的APP发布到微软APP Center中</p>
<p><img src="https://oss.smart-lifestyle.cn/file/3adoj.png" alt="image-20211114074340599"></p>
<h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p>流水线的Pipeline配置如下（实际使用的是Pipeline的经典模式，即图形化模式，下面配置跟实际稍微有区别）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Azure</span> <span class="string">Pipelines</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘envconfig.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘keystorefile.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"><span class="comment">#Your build pipeline references an undefined variable named ‘envconfig.secureFilePath’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download keystore file&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">xxx.xxx.xxx.keystore</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download envconfig&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">.env.prod</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">NodeTool@0</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Node 14&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Yarn 1.22&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">1.22</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn add jetifier&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;add jetifier&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line">  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn  install&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn build&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;sh:assemble:android:prod&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CopyFiles@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Copy Files to: $(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">SourceFolder:</span> <span class="string">&#x27;$(system.defaultworkingdirectory)&#x27;</span></span><br><span class="line">    <span class="attr">Contents:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">TargetFolder:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifact: drop&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterTest@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Test with Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">prepareTests:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterDistribute@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Deploy **/*.apk to Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">serverEndpoint:</span> <span class="string">&#x27;service name&#x27;</span></span><br><span class="line">    <span class="attr">appSlug:</span> <span class="string">&#x27;org/appname&#x27;</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">symbolsIncludeParentDirectory:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">releaseNotesInput:</span> <span class="string">&#x27;new release&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="下载机密文件和配置文件"><a href="#下载机密文件和配置文件" class="headerlink" title="### 下载机密文件和配置文件"></a>### 下载机密文件和配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download keystore file&#x27;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">keystorefile</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">xxx.xxx.xxx.keystore</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadSecureFile@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download envconfig&#x27;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envconfig</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">secureFile:</span> <span class="string">.env.prod</span></span><br></pre></td></tr></table></figure>

<p>Azure DevOps Pipeline中提供了安全文件的下载，我们在环境中使用的keystore文件以及env文件是不能直接提交到代码中，第一是为了安全，如果泄漏后果很严重，第二是方便多个环境（开发、测试、生产）的配置</p>
<p>在实际使用中，通过<code>keystorefile.secureFilePath</code>和<code>envconfig.secureFilePath</code>来使用这两个文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装指定版本的node、yarn"><a href="#安装指定版本的node、yarn" class="headerlink" title="安装指定版本的node、yarn"></a>安装指定版本的node、yarn</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">NodeTool@0</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Node 14&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Use Yarn 1.22&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="number">1.22</span></span><br></pre></td></tr></table></figure>

<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn add jetifier&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;add jetifier&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line">  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;npx jetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn  install&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">install</span></span><br></pre></td></tr></table></figure>

<h3 id="编译apk"><a href="#编译apk" class="headerlink" title="编译apk"></a>编译apk</h3><p>这里实际执行sh:assemble:android:prod命令为：<code>cd android/ &amp;&amp; export ENVFILE=.env.beta &amp;&amp; ./gradlew assembleBetaRelease &amp;&amp; cd ..</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Yarn build&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">projectDirectory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;sh:assemble:android:prod&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="分发到appcenter"><a href="#分发到appcenter" class="headerlink" title="分发到appcenter"></a>分发到appcenter</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifact: drop&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterTest@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Test with Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">prepareTests:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AppCenterDistribute@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Deploy **/*.apk to Visual Studio App Center&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">serverEndpoint:</span> <span class="string">&#x27;service name&#x27;</span></span><br><span class="line">    <span class="attr">appSlug:</span> <span class="string">&#x27;org/appname&#x27;</span></span><br><span class="line">    <span class="attr">appFile:</span> <span class="string">&#x27;**/*.apk&#x27;</span></span><br><span class="line">    <span class="attr">symbolsIncludeParentDirectory:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">releaseNotesInput:</span> <span class="string">&#x27;new release&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>大部分问题在于引用环境变量，引用机密文件上，导致在编译时找不到一些内容而出错</p>
<h3 id="问题1-android-support-annotation-does-not-exist"><a href="#问题1-android-support-annotation-does-not-exist" class="headerlink" title="问题1 android.support.annotation does not exist"></a>问题1 <code>android.support.annotation does not exist</code></h3><p>安装jetifier</p>
<p><code>yarn add jetifier</code></p>
<p><code>npx jetify</code></p>
<h3 id="问题2-缓存node依赖"><a href="#问题2-缓存node依赖" class="headerlink" title="问题2 缓存node依赖"></a>问题2 缓存node依赖</h3><p>为了避免每次build时都重新下载node依赖，azure pipeline提供了管道缓存，查看<a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/release/caching?view=azure-devops">参考地址</a></p>
<p>但是由于时间问题没有调通</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Cache@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">Cache</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot; | yarn.lock&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;./node_modules&#x27;</span></span><br><span class="line">    <span class="attr">cacheHitVar:</span> <span class="string">&#x27;yarn | &quot;$(Agent.OS)&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="gradle-file-project-env-get-filename"><a href="#gradle-file-project-env-get-filename" class="headerlink" title="gradle file(project.env.get(filename))"></a>gradle file(project.env.get(filename))</h3><p>这里的filename只能是文件名，而且gradle会自动加上完整的android/app/filename，如果这里写的是其他路径的文件会找不到（即使写的绝对路径），因此通过软连接的形式，将文件链接到android/app文件夹下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">   echo &quot;link env file&quot;</span></span><br><span class="line"><span class="string">   ln -s $(envconfig.secureFilePath) ./ </span></span><br><span class="line"><span class="string">   echo &quot;link keystore&quot;</span></span><br><span class="line"><span class="string">   ln -s $(keystorefile.secureFilePath) ./android/app</span></span><br><span class="line"><span class="string"></span>  <span class="attr">workingDirectory:</span> <span class="string">./</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;link env file and keystore file&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://stackoverflow.com/questions/56667264/react-native-build-error-package-android-support-annotation-does-not-exist">react native build error: package android.support.annotation does not exist - Stack Overflow</a></p>
<p>[2] <a href="https://github.com/staff0rd/react-native-pipeline/blob/master/azure-pipelines-android.yml">react-native-pipeline/azure-pipelines-android.yml at master · staff0rd/react-native-pipeline (github.com)</a></p>
<p>[3] <a href="https://blog.logrocket.com/continuous-deployment-of-react-native-app-with-azure-devops/">Continuous deployment of React Native app with Azure DevOps - LogRocket Blog</a></p>
<p>[4] <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/release/caching?view=azure-devops">管道缓存 - Azure Pipelines | Microsoft Docs</a></p>
<p>[5] <a href="https://medium.com/@liam.e.andrew/continuous-integration-for-react-native-with-azure-pipelines-245d90948f6a">Continuous Integration for React Native with Azure Pipelines | by Liam Andrew | Medium</a></p>
<p>[6] <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/utility/download-secure-file?view=azure-devops">下载安全文件任务 - Azure Pipelines | Microsoft Docs</a></p>
<p>[7] <a href="https://github.com/luggit/react-native-config/issues/314">gradle.properties doesn’t process project.env.get(“_keystore_file”) · Issue #314 · luggit/react-native-config (github.com)</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>React Native</tag>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Apple M1 python3.9上安装psycopg2</title>
    <url>/posts/6e90/</url>
    <content><![CDATA[<p>在MacBook M1上使用 pip install psycopg2时，报如下错误</p>
<p><code>Error: pg_config executable not found</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/dcn67.png" alt="BA27CAD4-A8E8-4216-A7C6-BEB0B0DEADBC"></p>
<p>是因为目前pip源里目标没有ARM版本的psycopg2，需要进行手动编译才可以用</p>
<p><img src="https://oss.smart-lifestyle.cn/file/itzxs.png" alt="D0DACCD0-12AD-4CA6-B93B-1182C36F0D9A"></p>
<ul>
<li><p>安装postgresql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install postgresql</span><br></pre></td></tr></table></figure></li>
<li><p>再次执行pip install即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/psycopg/psycopg2/issues/1286">psycopg2-binary support for M1 chipset · Issue #1286 · psycopg/psycopg2 (github.com)</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>psycopg2</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu中创建sudo user</title>
    <url>/posts/c222/</url>
    <content><![CDATA[<ul>
<li>创建用户<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户为username的用户，并指定主目录home</span></span><br><span class="line">sudo user add [username] --home [home]</span><br><span class="line"><span class="comment"># 为创建的用户设定密码</span></span><br><span class="line">passwd [username]</span><br></pre></td></tr></table></figure></li>
<li>通过usermod命令将用户添加到sudo group（部署root组）<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermode -aG sudo [username]</span><br><span class="line"><span class="comment"># 之后就可以使用sudo 将当前用户权限提升到管理员权限</span></span><br><span class="line">su [username]</span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line"><span class="comment"># sudo + command 执行命令</span></span><br></pre></td></tr></table></figure>
参考：</li>
</ul>
<ol>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart">https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart</a></p>
</li>
<li><p><a href="https://ohmyz.sh/">https://ohmyz.sh/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>在apple M1上构建x86_64 Docker镜像</title>
    <url>/posts/de6/</url>
    <content><![CDATA[<p>默认通过<code>docker build</code>方式构建的镜像时arm64的版本，可以通过<code>docker inspect IMAGE_ID</code>查看到</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># docker image inspect <span class="number">0382</span>b9b17bdb</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;Architecture&quot;</span>: <span class="string">&quot;arm64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Variant&quot;</span>: <span class="string">&quot;v8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Size&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">        <span class="attr">&quot;VirtualSize&quot;</span>: <span class="number">223036168</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样的镜像时没有办法在Intel x86/64的容器服务中运行的，我们可以选择基于arm版本服务器的容器服务，更好的选择是在M1上编译 x86架构的容器镜像</p>
<p>Docker Desktop for Mac M1中集成了一个buildx的工具，可以方便我们编译各种跨平台的容器镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx ls</span><br><span class="line"></span><br><span class="line">desktop-linux desktop-linux   running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br><span class="line">default *       docker</span><br><span class="line">  default       default         running linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6</span><br></pre></td></tr></table></figure>

<p>使用docker buildx build来构建X86/64 docker镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64 . -t xxx</span><br></pre></td></tr></table></figure>

<p>之后就可按照正常的docker tag、docker push进行操作</p>
<p>更多的命令可以参考官方文档</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.jaimyn.dev/how-to-build-multi-architecture-docker-images-on-an-m1-mac/">How to build x86 (and others!) Docker images on an M1 Mac – Jaimyn’s Blog</a></p>
<p>[2] <a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md">buildx/buildx_build.md at master · docker/buildx (github.com)</a></p>
<p>[3] <a href="https://docs.docker.com/buildx/working-with-buildx/">Docker Buildx | Docker Documentation</a></p>
]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Apple M1</tag>
      </tags>
  </entry>
  <entry>
    <title>在code server中使用docker</title>
    <url>/posts/e029/</url>
    <content><![CDATA[<blockquote>
<p>上一篇部署了code server，<a href="https://blog.smart-lifestyle.cn/posts/a6e3/">搞了一个浏览器版VS Code Server - simplezhao的博客 (smart-lifestyle.cn)</a></p>
<p>在code server部署完之后，安装docker插件，却无法连接docker，改怎么解决呢</p>
</blockquote>
<p>docker默认是以root用户运行的，如果你也是通过root身份登录的主机，应该不会有该问题，下面介绍的非root用户如何解决</p>
<p><strong>以下操作命令都是在Ubuntu系统下执行</strong></p>
<h2 id="安装docker插件"><a href="#安装docker插件" class="headerlink" title="安装docker插件"></a>安装docker插件</h2><blockquote>
<p>第一步是先安装docker，(*￣︶￣)</p>
</blockquote>
<p>首先你得在code server中安装docker插件，直接在插件中搜索即可</p>
<p><img src="https://oss.smart-lifestyle.cn/file/okqw8.png" alt="image-20220427153653431"></p>
<p>点击docker图标，各种提示Failed to connect</p>
<p><img src="https://oss.smart-lifestyle.cn/file/bckgw.png" alt="access failed"></p>
<h2 id="以rootless模式运行docker"><a href="#以rootless模式运行docker" class="headerlink" title="以rootless模式运行docker"></a>以rootless模式运行docker</h2><p>在docker插件上也介绍了，如何在vscode中使用docker</p>
<p><img src="https://oss.smart-lifestyle.cn/file/vb0bh.png" alt="image-20220427154201414"></p>
<p>打开<a href="https://docs.docker.com/engine/security/rootless/">链接</a>按照步骤执行</p>
<ol>
<li><p>安装<code>uidmap</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install uidmap</span><br></pre></td></tr></table></figure></li>
<li><p>安装<code>dbus-user-session</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y dbus-user-session</span><br></pre></td></tr></table></figure></li>
<li><p>将之前docker停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> --now docker.service docker.socket</span><br><span class="line"></span><br><span class="line">sudo rm /var/run/docker.sock</span><br></pre></td></tr></table></figure></li>
<li><p>使用当前non-root用户安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dockerd-rootless-setuptool.sh install</span><br><span class="line"></span><br><span class="line">systemctl --user start docker</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo loginctl enable-linger $(whoami)</span><br></pre></td></tr></table></figure></li>
<li><p>将docker host加入到环境变量中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前用户XDG_RUNTIME_DIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$XDG_RUNTIME_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下面两行加入到.bashrc或者.zshrc中，具体看用的哪种shell</span></span><br><span class="line"><span class="comment"># run/user/1000 为echo $XDG_RUNTIME_DIR的结果</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_HOST=unix:///run/user/1000/docker.sock</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li><p>运行docker 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时就可以运行docker 命令</span></span><br><span class="line">docker run -d -p 6379:6379 redis:latest</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED       STATUS       PORTS                                       NAMES</span><br><span class="line">5e416fb0fa5d   redis:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 hours ago   Up 7 hours   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   gifted_diffie</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="在code-server中生效docker操作"><a href="#在code-server中生效docker操作" class="headerlink" title="在code server中生效docker操作"></a>在code server中生效docker操作</h2><p>前面一路很顺利，但是发现在code server中还是不能用😓</p>
<p><img src="https://oss.smart-lifestyle.cn/file/etact.png" alt="image-20220427213459661"></p>
<p>而我们在之前的环境变量中已经配置了DOCKER_HOST = <code>export DOCKER_HOST=unix:///run/user/1000/docker.sock</code></p>
<p>经过测试发现，在vscode terminal和 自己电脑上使用iterm通过ssh连接服务器之后的结果竟然不一样</p>
<ul>
<li>echo  $XDG_RUNTIME_DIR</li>
</ul>
<p>​    在iterm上</p>
<p><img src="https://oss.smart-lifestyle.cn/file/7h9xk.png" alt="image-20220427213948405"></p>
<p>​    </p>
<p>​    在vscode terminal上</p>
<p><img src="https://oss.smart-lifestyle.cn/file/eyur9.png" alt="image-20220427214104155"></p>
<p><strong>在vscode terminal <code> $XDG_RUNTIME_DIR</code>为空</strong>，这里没有再深入去看什么原因，而我已在之前的设置中将<code>$XDG_RUNTIME_DIR</code>替换为实际的结果<code>run/user/1000</code></p>
<ul>
<li>DOCKER_HOST没有生效</li>
</ul>
<p>在vscode docker的上下文配置中，有两个contexts，一个default（使用当前DOCKER_HOST），另外一个是rootless</p>
<p><img src="https://oss.smart-lifestyle.cn/file/q3thf.png" alt="image-20220427214524692"></p>
<p>在code server中<code>$DOCKER_HOST</code>也是返回为空</p>
<p><img src="https://oss.smart-lifestyle.cn/file/3ehj3.png" alt="image-20220427214721962"></p>
<p>因为没有连接到正确的docker.sock上，所以一直出错</p>
<h3 id="在code-server上切换contexts为rootless"><a href="#在code-server上切换contexts为rootless" class="headerlink" title="在code server上切换contexts为rootless"></a>在code server上切换contexts为rootless</h3><p>在command palette中找到<code>Docker Contexts: Use</code></p>
<p><img src="https://oss.smart-lifestyle.cn/file/4gjvw.png" alt="image-20220427215039799"></p>
<p>将其调整为rootless</p>
<p><img src="https://oss.smart-lifestyle.cn/file/6hfz0.png" alt="image-20220426220112259"></p>
<p>然后就可以在code server中使用docker 了</p>
<p><img src="https://oss.smart-lifestyle.cn/file/uqlgn.png" alt="image-20220427215239438"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>除了上面提到的问题</p>
<p>$DOCKER_HOST、$XDG_RUNTIME_DIR在 code server terminal中为空</p>
<p>还有一个问题：</p>
<p>在code server terminal中为空无法使用<code>systemctl --user restart|start|status  docker.service</code>命令</p>
<p><img src="https://oss.smart-lifestyle.cn/file/fz5dv.png" alt="image-20220427215515635"></p>
<p>这个问题在<a href="https://docs.docker.com/engine/security/rootless/#troubleshooting">troubleshooting</a>中也提到了，但我没去解决，如果重启就在iterm中操作</p>
<p><img src="https://oss.smart-lifestyle.cn/file/8gpp2.png" alt="image-20220427215701871"></p>
<p>这两个问题等后面有时间再去解决吧</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.docker.com/engine/install/linux-postinstall/">Post-installation steps for Linux | Docker Documentation</a></p>
<p>[2] <a href="https://github.com/microsoft/vscode-docker/wiki/Troubleshooting">Troubleshooting · microsoft/vscode-docker Wiki (github.com)</a></p>
<p>[3] <a href="https://docs.docker.com/engine/security/rootless/#troubleshooting">Run the Docker daemon as a non-root user (Rootless mode) | Docker Documentation</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>code server</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux中安装oh-my-zsh</title>
    <url>/posts/ea0a/</url>
    <content><![CDATA[<blockquote>
<p>oh-my-zsh 是zsh的管理配置工具，因此在使用oh-my-zsh之前安装zsh</p>
</blockquote>
<p><img src="https://oss.smart-lifestyle.cn/blog/w5ahz.jpg" alt="zsh"></p>
<ol>
<li>判断当前系统使用的shell<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印当前系统使用的shell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="comment"># 可能会输出</span></span><br><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"><span class="comment"># /bin/sh</span></span><br><span class="line"><span class="comment"># /bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前系统支持的shell</span></span><br><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure></li>
<li>安装zsh<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果未安装zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure></li>
<li>切换shell为zsh<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 需要重启</span></span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li>
<li>安装 oh my zsh<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># via curl</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># via wget</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
参考：</li>
<li><a href="https://www.jianshu.com/p/d194d29e488c">https://www.jianshu.com/p/d194d29e488c</a></li>
</ol>
]]></content>
      <categories>
        <category>zsh</category>
      </categories>
      <tags>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序下拉刷新操作</title>
    <url>/posts/1ea1/</url>
    <content><![CDATA[<ul>
<li>功能： 实现手动下拉刷新触发事件</li>
</ul>
<ul>
<li>在需要加载下拉刷新页面的json文件中加入 <strong>“enablePullDownRefresh”: true, “backgroundTextStyle”: “dark”</strong>, <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mp-dialog&quot;</span>: <span class="string">&quot;../../weui-miniprogram/dialog/dialog&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mp-navigation-bar&quot;</span>: <span class="string">&quot;../../weui-miniprogram/navigation-bar/navigation-bar&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>在对应的js文件中配置方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      wx.showNavigationBarLoading();</span><br><span class="line">      <span class="comment">// 你要触发的函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;refresh&#x27;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 标题栏隐藏刷新转圈圈图标</span></span><br><span class="line">        wx.hideNavigationBarLoading();</span><br><span class="line">        wx.stopPullDownRefresh(&#123;</span><br><span class="line">          <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">  </span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li>
<li>在onShow中加入startPullDownRefresh，会每次show 页面时调用刷新函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      wx.startPullDownRefresh(&#123;</span><br><span class="line">         <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;===============onshow resfrsh use info&#x27;</span>)</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
参考：</li>
<li><a href="https://blog.csdn.net/weichen913/article/details/79360658">小程序上拉加载和下拉刷新问题总结</a></li>
</ol>
<hr>
<p>最后效果<br><img src="https://oss.smart-lifestyle.cn/blog/yqv6s.gif" alt="image"></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序全局变量</title>
    <url>/posts/b9a0/</url>
    <content><![CDATA[<blockquote>
<p>通过在app.js中声明globalData，将所需要的变量及其值放在这里</p>
</blockquote>
<ol>
<li>定义声明<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">globalData: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// dev or prod</span></span><br><span class="line">    <span class="attr">platform</span>: <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">    <span class="attr">dev_server</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">    <span class="attr">prod_server</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">    <span class="attr">feedback_server</span>: <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>引用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在需要使用全局变量的地方，声明变量</span></span><br><span class="line"><span class="keyword">const</span> app = getApp();</span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">var</span> paltform = app.globalData.platform</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
参考：</li>
<li><a href="https://www.jianshu.com/p/925aad432874">微信小程序 全局变量</a></li>
</ol>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建PGSQL for Serverless</title>
    <url>/posts/6bab/</url>
    <content><![CDATA[<blockquote>
<p> 想使用一个独立的数据库服务，使用量和规模不用太大</p>
</blockquote>
<p>单独购买数据库实例，太贵了</p>
<p><img src="https://oss.smart-lifestyle.cn/file/tmasb.png" alt="image-20210629151750968"></p>
<p>发现在数据库服务列表里有一个Serverless版本，看了介绍，需要通过API或者serverless组件方式创建，目前还处于免费的公测阶段，嘿嘿😋，搞起</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2sg3e.png" alt="image-20210629152124434"></p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>操作步骤按照<a href="https://cloud.tencent.com/document/product/1154/43004">官网说明</a>，很快就能完成</p>
<h3 id="安装-serverless-cli"><a href="#安装-serverless-cli" class="headerlink" title="安装 serverless cli"></a>安装 serverless cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g serverless</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建目录，并新建一个serverless.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"><span class="attr">component:</span> <span class="string">postgresql</span> <span class="comment">#(必填) 引用 component 的名称，当前用到的是 postgresql 组件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">serverlessDB</span> <span class="comment"># (必填) 该 postgresql 组件创建的实例名称</span></span><br><span class="line"><span class="attr">org:</span> <span class="string">smart-lifestyle</span> <span class="comment"># (可选) 用于记录组织信息，默认值为您的腾讯云账户 appid</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">serverlessDB</span> <span class="comment"># (可选) 该 sql 应用名称</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">prod</span> <span class="comment"># (可选) 用于区分环境信息，默认值是 dev</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-beijing</span>  <span class="comment"># 可选 ap-guangzhou, ap-shanghai, ap-beijing</span></span><br><span class="line">  <span class="attr">zone:</span> <span class="string">ap-beijing-3</span>  <span class="comment"># 可选 ap-guangzhou-2, ap-shanghai-2, ap-beijing-3</span></span><br><span class="line">  <span class="attr">dBInstanceName:</span> <span class="string">serverlessdb</span></span><br><span class="line">  <span class="attr">vpcConfig:</span></span><br><span class="line">    <span class="attr">vpcId:</span> <span class="string">根据实际填写</span></span><br><span class="line">    <span class="attr">subnetId:</span> <span class="string">根据实际填写</span></span><br><span class="line">  <span class="attr">extranetAccess:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>执行 <code>sls deploy</code>自动完成部署（会显示二维码进行授权），成功之后，会打印显示数据库的连接信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">private:</span></span><br><span class="line">  <span class="attr">connectionString:</span> <span class="string">postgresql://xxxx:xxxx@10.0.0.9:5432/tencentdb_hy7vs5lu</span></span><br><span class="line">  <span class="attr">host:</span>             <span class="number">10.0</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line">  <span class="attr">port:</span>             <span class="number">5432</span></span><br><span class="line">  <span class="attr">user:</span>             <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">password:</span>         <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">dbname:</span>           <span class="string">tencentdb_hy7vs5lu</span></span><br></pre></td></tr></table></figure>

<p>且在数据库实例serverless版中可以查看到数据库</p>
<p><img src="https://oss.smart-lifestyle.cn/file/jenl2.png" alt="image-20210629151932596"></p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>创建的数据库没有开启外网连接，而且在实际生产中，也禁止改操作，因此如果想在其他VPC中使用，需要使用到对等连接</p>
<p><img src="https://oss.smart-lifestyle.cn/file/7lno9.png" alt="img"></p>
<p>具体操作步骤参考<a href="https://cloud.tencent.com/document/product/553/18836">官网说明</a></p>
<ol>
<li>新建有个对等连接</li>
</ol>
<p><img src="https://oss.smart-lifestyle.cn/file/9tase.png" alt="image-20210629154210941"></p>
<ol start="2">
<li>在两端路由表中增加策略，选择对等连接</li>
</ol>
<p><img src="https://oss.smart-lifestyle.cn/file/tzmch.png" alt="image-20210629154322540"></p>
<p>完成以上步骤之后可以进行测试</p>
<p>无法ping通，但是可以通过telnet 连接到数据库服务，完成。</p>
<p><img src="https://oss.smart-lifestyle.cn/file/92fpw.png" alt="image-20210629154533240"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/1154/43004">Serverless 应用中心 数据库 PostgreSQL 组件 - Serverless 组件 - 文档中心 - 腾讯云 (tencent.com)</a></p>
<p>[2] <a href="https://cloud.tencent.com/document/product/553/18836">对等连接 同账号创建对等连接通信 - 快速入门 - 文档中心 - 腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>serverless</category>
      </categories>
      <tags>
        <tag>serverless</tag>
        <tag>scf</tag>
      </tags>
  </entry>
  <entry>
    <title>搞了一个浏览器版VS Code Server</title>
    <url>/posts/a6e3/</url>
    <content><![CDATA[<blockquote>
<p>工作用的Mac电脑是ARM芯片的，而目前部署的服务大部分还都是amd64架构的，手头上新购了几台轻量服务器，因此搞了一个在线版的vscode来方便开发，实际用过之后确实挺香(*￣︶￣)</p>
</blockquote>
<p><strong>本方案所有实现都是在腾讯云上，如果是其他云厂商，请参考对标服务</strong></p>
<p>下面介绍如何在轻量服务器上搭建一个基于浏览器的<a href="https://coder.com/docs/code-server/latest/guide">VS Code Server</a>，其实只是整理了官方文档</p>
<h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><p>本着能省就省同时兼顾安全的角度，部署使用了如下资源：</p>
<ul>
<li><p>腾讯云服务</p>
<ul>
<li><a href="https://cloud.tencent.com/product/lighthouse">轻量应用服务器(Ubuntu 20.04)</a></li>
<li><a href="https://cloud.tencent.com/document/product/877/18675">内网互联</a></li>
<li><a href="https://cloud.tencent.com/document/product/1154/39271">函数服务</a></li>
<li><a href="https://cloud.tencent.com/document/product/628">API网关</a></li>
<li><a href="https://cloud.tencent.com/document/product/1141/50310">容器镜像服务（个人版）</a></li>
</ul>
</li>
<li><p>软件部署</p>
<ul>
<li><a href="https://freessl.cn/">https证书</a>，提供https访问</li>
<li><a href="https://nginx.org/en/">Nginx</a>，对Code Server进行反向代理</li>
<li><a href="https://github.com/coder/code-server">Code Server</a>， 在线版VS Code</li>
<li><a href="https://oauth2-proxy.github.io/oauth2-proxy/">OAuth Proxy</a>，提供github OAuth认证</li>
</ul>
</li>
</ul>
<p>整体架构如下图所示</p>
<ol>
<li>将code server部署在轻量服务器中，使用nginx做反向代理，并启用https加密访问</li>
<li>在云函数中部署OAuth Proxy，并通过API网关对内网开放authorization接口</li>
<li>轻量服务器和云函数在不同的VPC内，为了实现内网访问，通过云联网打通两个VPC</li>
<li>最终用户在浏览器里输入url，然后通过github认证登录到Code Server上</li>
</ol>
<p><img src="https://oss.smart-lifestyle.cn/file/4uyym.png" alt="codeserver架构"></p>
<p>最终效果，通过浏览器访问，跟本地VS Code几乎没有任何区别</p>
<p><img src="https://oss.smart-lifestyle.cn/file/18nzr.png" alt="image-20220422214335880"></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>下面分步骤介绍完整的部署过程，包括下面的步骤</p>
<ol>
<li>在轻量服务器中部署Code Server和Nginx</li>
<li>在云函数中部署OAuth2 Proxy，并在API网关中配置触发器</li>
<li>配置云联网，打通VPC</li>
<li>调试</li>
</ol>
<h3 id="在轻量服务器中部署Code-Server和Nginx"><a href="#在轻量服务器中部署Code-Server和Nginx" class="headerlink" title="在轻量服务器中部署Code Server和Nginx"></a>在轻量服务器中部署Code Server和Nginx</h3><h4 id="部署Code-Server"><a href="#部署Code-Server" class="headerlink" title="部署Code Server"></a>部署Code Server</h4><p>参考官方通过命令脚本的安装方式，<a href="https://coder.com/docs/code-server/latest/install#installsh">Install - code-server v4.3.0 docs (coder.com)</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="Detection-reference"><a href="#Detection-reference" class="headerlink" title="Detection reference"></a>Detection reference</h3><ul>
<li>For Debian and Ubuntu, code-server will install the latest deb package.(如果是Ubuntu系统，code server会使用最新的deb包安装)</li>
<li>For Fedora, CentOS, RHEL and openSUSE, code-server will install the latest RPM package.</li>
</ul>
</blockquote>
<p>安装完成后，code server的配置文件在<code>$HOME/.config/code-server/config.yaml</code>，而插件等都会安装到<code>$HOME/.local/share/code-server</code>中</p>
<p>因为后面使用OAuth2 Proxy来做认证，所以在配置文件中将auth改为None，并且修改code server默认端口，且只能本机访问（后面会使用nginx代理转发）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:32000</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>启动code server，并设为开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h4><p>使用apt-get直接安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<h5 id="增加https配置文件"><a href="#增加https配置文件" class="headerlink" title="增加https配置文件"></a>增加https配置文件</h5><p>此处参考：<a href="https://coder.com/docs/code-server/latest/guide#using-lets-encrypt-with-nginx">Usage - code-server v4.3.0 docs (coder.com)</a></p>
<p>新增<code> /etc/nginx/sites-available/code-server.https.conf</code>文件</p>
<p>使用nginx反向代理code server，此处不是最终完整配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    server_name code.smart-lifestyle.cn;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/full_chain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/private.key;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:32000/;</span><br><span class="line">      	proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      	proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      	proxy_set_header Connection upgrade;</span><br><span class="line">      	proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<ul>
<li><p>ssl_certificate /etc/nginx/ssl/full_chain.pem;</p>
</li>
<li><p>ssl_certificate_key /etc/nginx/ssl/private.key;</p>
</li>
</ul>
<p>分别为网站的公钥和私钥，可以在<a href="https://freessl.cn/">FreeSSL首页 - FreeSSL.cn一个提供免费HTTPS证书申请的网站</a>申请</p>
<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此处才是加code-server配置加入到nginx配置中</span></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/code-server.https.conf /etc/nginx/sites-enabled/code-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>



<p>此时可以通过https://你的域名，来访问code server，但是因为是直接暴露在公网中，需要增加认证手段，来避免其他人可以直接访问</p>
<h3 id="在云函数中部署OAuth2-Proxy，并在API网关中配置触发器"><a href="#在云函数中部署OAuth2-Proxy，并在API网关中配置触发器" class="headerlink" title="在云函数中部署OAuth2 Proxy，并在API网关中配置触发器"></a>在云函数中部署OAuth2 Proxy，并在API网关中配置触发器</h3><h4 id="部署OAuth2-Proxy"><a href="#部署OAuth2-Proxy" class="headerlink" title="部署OAuth2 Proxy"></a>部署OAuth2 Proxy</h4><p>OAuth2 Proxy提供了多种OAuth2源，这里我选择了GitHub，OAuth2 Proxy使用go 语言开发，虽然云函数提供了go语言的支持，将OAuth2 Proxy最终部署应该还是需要一点点适配工作</p>
<p><img src="https://oss.smart-lifestyle.cn/file/kaawc.png" alt="image-20220423142804041"></p>
<p>云函数支持以容器镜像的形式部署服务，因此可以直接拉去OAuth2 Proxy的镜像来部署，需要注意的是，云函数默认监听端口为9000，且不能修改，因此需要将OAuth2 Proxy的监听端口也调整为9000</p>
<p><img src="https://oss.smart-lifestyle.cn/file/hkzvv.png" alt="image-20220423145027200"></p>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>如果使用容器镜像部署云函数，镜像来源只能选择腾讯云个人版或者企业版的镜像服务，因此需要将OAuth2 Proxy的镜像先拉到本地，然后推送到腾讯云的镜像服务中（个人版免费）</p>
<ol>
<li><p>从OAuth2 Proxy<a href="https://quay.io/repository/oauth2-proxy/oauth2-proxy?tab=tags&tag=latest">官方镜像仓库</a>拉去镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull quay.io/oauth2-proxy/oauth2-proxy:latest</span><br></pre></td></tr></table></figure></li>
<li><p>在本地打上tag，tag名为在腾讯云镜像服务创建的镜像的镜像地址，然后上传镜像，具体如何使用腾讯云镜像服务，可以参考官方文档：<a href="https://cloud.tencent.com/document/product/1141/50310">容器镜像服务 个人版操作指南 - 操作指南 - 文档中心 - 腾讯云 (tencent.com)</a></p>
</li>
<li><p>在github上创建一个application</p>
<p>在github Developer settings中新建一个OAuth APP</p>
<p><img src="https://oss.smart-lifestyle.cn/file/wme6e.png" alt="image-20220423204710201"></p>
<p>回调地址修改为你实际的回调地址：<a href="https://your-code-server-domain/oauth2/callback">https://your-code-server-domain/oauth2/callback</a></p>
<p>/oauth2/callback 需要在之前的nginx配置中增加一条代理记录，后面会介绍</p>
<p><img src="https://oss.smart-lifestyle.cn/file/mwadc.png" alt="image-20220423204935842"></p>
<p>创建完应用后，记录你的Client ID、Client Secret后面会使用</p>
</li>
<li><p>云函数创建一个函数服务</p>
<ul>
<li>选择使用容器镜像</li>
<li>基础配置选择Web函数</li>
<li>函数代码选择上一步选择的镜像</li>
</ul>
<p><img src="https://oss.smart-lifestyle.cn/file/swtfp.png" alt="image-20220423202037576"></p>
<p>在高级配置中，增加环境变量，来配置github 认证，需要配置的字段有：</p>
<ul>
<li><p>OAUTH2_PROXY_CLIENT_ID=<Your github app client id></p>
</li>
<li><p>OAUTH2_PROXY_CLIENT_SECRET=<Your github app client secret></p>
</li>
<li><p>OAUTH2_PROXY_COOKIE_SECRET=&lt;随机生成&gt;</p>
</li>
<li><p>OAUTH2_PROXY_EMAIL_DOMAINS=*</p>
</li>
<li><p>OAUTH2_PROXY_GITHUB_USERS=<your github name> 保证认证后只有你可以访问</p>
</li>
<li><p>OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:9000 # 这里是修改OAuth2 Proxy监听地址，需要改为9000</p>
</li>
<li><p>OAUTH2_PROXY_PROVIDER=github</p>
</li>
<li><p>OAUTH2_PROXY_REDIRECT_URL=<your redirect url in app settings></p>
</li>
</ul>
<p>详细配置请参考官方：<a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/oauth_provider#github-auth-provider">OAuth Provider Configuration | OAuth2 Proxy (oauth2-proxy.github.io)</a></p>
<p>下文介绍，在使用环境变量配置OAuth2 Proxy时，在文档的配置字段前加上OAUTH2_PROXY，同时连字符(-)改为下划线（_)</p>
<p><img src="https://oss.smart-lifestyle.cn/file/ldqul.png" alt="image-20220423210548845"></p>
<p><img src="https://oss.smart-lifestyle.cn/file/ywaip.png" alt="image-20220423205906590"></p>
<p>触发器先选择默认，后面需要删除重新建，默认生成的API网关触发配置，支持公网访问，而我只想让这个服务只能内网访问，既保证安全，<strong>有避免公网资源的浪费</strong></p>
<p>熟悉腾讯云API网关的话，可以先在API网关创建一个服务，然后再此处选择自定义触发器</p>
<p><img src="https://oss.smart-lifestyle.cn/file/cjgr1.png" alt="image-20220423202303118"></p>
<p><img src="https://oss.smart-lifestyle.cn/file/y49cb.png" alt="image-20220423203119102"></p>
</li>
</ol>
<h4 id="部署内网API服务"><a href="#部署内网API服务" class="headerlink" title="部署内网API服务"></a>部署内网API服务</h4><ol>
<li>为云函数创建一个内网访问的API网关触发器</li>
</ol>
<p>在API网关中，创建一个API网关服务</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2x3rd.png" alt="image-20220423203527650"></p>
<ul>
<li>访问方式选择内网VPC</li>
<li>所属VPC选择跟OAuth2 Proxy服务同一个VPC</li>
</ul>
<p><img src="https://oss.smart-lifestyle.cn/file/i84hp.png" alt="image-20220423203658410"></p>
<ol start="2">
<li><p>在云函数中，重新配置触发器</p>
<p>删除之前的触发器，新建触发器</p>
<p><img src="https://oss.smart-lifestyle.cn/file/399ju.png" alt="image-20220322230121860"></p>
<p>选择自定义触发器，并选择之前创建的API网关服务</p>
<p><img src="https://oss.smart-lifestyle.cn/file/t0m13.png" alt="image-20220322230157775"></p>
<p>配置完之后，可以查看到内网访问路径，在没有配置云联网之前，轻量服务器是无法访问到这个云函数服务</p>
<p><img src="https://oss.smart-lifestyle.cn/file/opgzl.png" alt="image-20220423213305703"></p>
</li>
</ol>
<h3 id="配置云联网打通VPC"><a href="#配置云联网打通VPC" class="headerlink" title="配置云联网打通VPC"></a>配置云联网打通VPC</h3><p>在轻量服务器的管理界面–内网互联中，选择服务器所在的区域，新建个内网互联</p>
<p><img src="https://oss.smart-lifestyle.cn/file/2h5s8.png" alt="image-20220423212226912"></p>
<p>在内网互联配置中，将轻量服务器VPC和云函数所在VPC关联进去</p>
<p><img src="https://oss.smart-lifestyle.cn/file/04jmq.png" alt="image-20220423212342714"></p>
<p>由于我的轻量服务器和云函数都在北京区域，因此两个VPC之间是内网访问，因此互相访问是免费的</p>
<p><img src="https://oss.smart-lifestyle.cn/file/8awk2.png" alt="image-20220423213011059"></p>
<p>登录轻量服务器，访问OAuth2 Proxy url，如果能返回html页面表明，服务成功运行，且可以内网访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:9003/release/</span><br></pre></td></tr></table></figure>



<p><img src="https://oss.smart-lifestyle.cn/file/2xoco.png" alt="image-20220423213458827"></p>
<h3 id="配置nginx，增加auth认证"><a href="#配置nginx，增加auth认证" class="headerlink" title="配置nginx，增加auth认证"></a>配置nginx，增加auth认证</h3><p>最后我们在重新修改code-server.https.conf，新增auth部分功能，官方参考：<a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#configuring-for-use-with-the-nginx-auth_request-directive">Configuring for use with the Nginx <code>auth_request</code> directive</a></p>
<p>完整code-server.https.conf文件代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    server_name _;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/full_chain.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/private.key;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location /oauth2/ &#123;</span><br><span class="line">      	proxy_pass       http://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:8003;</span><br><span class="line">      	proxy_set_header Host                    <span class="variable">$proxy_host</span>;</span><br><span class="line">      	proxy_set_header X-Real-IP               <span class="variable">$remote_addr</span>;</span><br><span class="line">      	proxy_set_header X-Scheme                <span class="variable">$scheme</span>;</span><br><span class="line">      	proxy_set_header X-Auth-Request-Redirect <span class="variable">$request_uri</span>;</span><br><span class="line">      	<span class="comment"># or, if you are handling multiple domains:</span></span><br><span class="line">      	<span class="comment"># proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;</span></span><br><span class="line">    &#125;</span><br><span class="line">    location = /oauth2/auth &#123;</span><br><span class="line">      	proxy_pass       http://service-oll9qkj1-1258647687-in.bj.apigw.tencentcs.com:8003;</span><br><span class="line">      	proxy_set_header Host             <span class="variable">$proxy_host</span>;</span><br><span class="line">      	proxy_set_header X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">      	proxy_set_header X-Scheme         <span class="variable">$scheme</span>;</span><br><span class="line">      	<span class="comment"># nginx auth_request includes headers but not body</span></span><br><span class="line">      	proxy_set_header Content-Length   <span class="string">&quot;&quot;</span>;</span><br><span class="line">     	proxy_pass_request_body           off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">     	auth_request /oauth2/auth;</span><br><span class="line">    	error_page 401 = /oauth2/sign_in;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># pass information via X-User and X-Email headers to backend,</span></span><br><span class="line">    	<span class="comment"># requires running with --set-xauthrequest flag</span></span><br><span class="line">    	auth_request_set <span class="variable">$user</span>   <span class="variable">$upstream_http_x_auth_request_user</span>;</span><br><span class="line">    	auth_request_set <span class="variable">$email</span>  <span class="variable">$upstream_http_x_auth_request_email</span>;</span><br><span class="line">    	proxy_set_header X-User  <span class="variable">$user</span>;</span><br><span class="line">    	proxy_set_header X-Email <span class="variable">$email</span>;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># if you enabled --pass-access-token, this will pass the token to the backend</span></span><br><span class="line">    	auth_request_set <span class="variable">$token</span>  <span class="variable">$upstream_http_x_auth_request_access_token</span>;</span><br><span class="line">    	proxy_set_header X-Access-Token <span class="variable">$token</span>;</span><br><span class="line">      	<span class="comment"># if you enabled --cookie-refresh, this is needed for it to work with auth_request</span></span><br><span class="line">    	auth_request_set <span class="variable">$auth_cookie</span> <span class="variable">$upstream_http_set_cookie</span>;</span><br><span class="line">    	add_header Set-Cookie <span class="variable">$auth_cookie</span>;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># When using the --set-authorization-header flag, some provider&#x27;s cookies can exceed the 4kb</span></span><br><span class="line">    	<span class="comment"># limit and so the OAuth2 Proxy splits these into multiple parts.</span></span><br><span class="line">    	<span class="comment"># Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,</span></span><br><span class="line">    	<span class="comment"># so if your cookies are larger than 4kb, you will need to extract additional cookies manually.</span></span><br><span class="line">    	auth_request_set <span class="variable">$auth_cookie_name_upstream_1</span> <span class="variable">$upstream_cookie_auth_cookie_name_1</span>;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># Extract the Cookie attributes from the first Set-Cookie header and append them</span></span><br><span class="line">    	<span class="comment"># to the second part ($upstream_cookie_* variables only contain the raw cookie content)</span></span><br><span class="line">    	<span class="keyword">if</span> (<span class="variable">$auth_cookie</span> ~* <span class="string">&quot;(; .*)&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$auth_cookie_name_0</span> <span class="variable">$auth_cookie</span>;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$auth_cookie_name_1</span> <span class="string">&quot;auth_cookie_name_1=$auth_cookie_name_upstream_1<span class="variable">$1</span>&quot;</span>;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Send both Set-Cookie headers now if there was a second part</span></span><br><span class="line">    	<span class="keyword">if</span> (<span class="variable">$auth_cookie_name_upstream_1</span>) &#123;</span><br><span class="line">    	    add_header Set-Cookie <span class="variable">$auth_cookie_name_0</span>;</span><br><span class="line">    	    add_header Set-Cookie <span class="variable">$auth_cookie_name_1</span>;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:32000/;</span><br><span class="line">      	proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      	proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      	proxy_set_header Connection upgrade;</span><br><span class="line">      	proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成之后，重启nginx</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://oss.smart-lifestyle.cn/file/uv1hl.png" alt="image-20220423215409071"></p>
<p><img src="https://oss.smart-lifestyle.cn/file/utszp.png" alt="image-20220423215456692"></p>
<p><img src="https://oss.smart-lifestyle.cn/file/a6nh5.png" alt="image-20220423215521287"></p>
<p><img src="https://oss.smart-lifestyle.cn/file/der2y.png" alt="image-20220423215614112"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>随着自己逐渐向云原生方向发展，腾讯云在这方面做的还是不错目前正在充分的撸厂商的各种免费云产品，而不是像以前只撸虚机，然后搭建各种服务</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.github.com/cn/developers/apps/managing-oauth-apps/troubleshooting-authorization-request-errors">排查授权请求错误 - GitHub Docs</a></p>
<p>[2] <a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#environment-variables">Overview | OAuth2 Proxy (oauth2-proxy.github.io)</a></p>
<p>[3] <a href="https://coder.com/docs/code-server/latest/guide">Usage - code-server v4.3.0 docs (coder.com)</a></p>
<p>[4] <a href="https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#configuring-for-use-with-the-nginx-auth_request-directive">Overview | OAuth2 Proxy (oauth2-proxy.github.io)</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>code server</tag>
        <tag>oauth</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈python生成短随机数</title>
    <url>/posts/6ae6/</url>
    <content><![CDATA[<p>有时候我们需要较短的随机数（比如8位），比如在生成url短链接，需要生成随机且唯一的8位字符作为新的url</p>
<p><img src="https://oss.smart-lifestyle.cn/file/9qfwc.png" alt="image-20210929130158602"></p>
<p>以下介绍几种生成short unique随机数的方法</p>
<h3 id="random-choices"><a href="#random-choices" class="headerlink" title="random.choices"></a>random.choices</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span>.join(random.choices(alphabet, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure>



<h3 id="uuid4"><a href="#uuid4" class="headerlink" title="uuid4"></a>uuid4</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="built_in">str</span>(uuid4())[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>



<h3 id="secrets-choice"><a href="#secrets-choice" class="headerlink" title="secrets.choice"></a>secrets.choice</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">secrets.token_urlsafe(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>



<h3 id="shortuuid"><a href="#shortuuid" class="headerlink" title="shortuuid"></a>shortuuid</h3><p>需要先安装第三方库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install shortuuid</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shortuuid</span><br><span class="line">su = shortuuid.ShortUUID(alphabet)</span><br><span class="line">su.random(length=<span class="number">8</span>)</span><br></pre></td></tr></table></figure>



<h3 id="NamedTemporaryFile"><a href="#NamedTemporaryFile" class="headerlink" title="NamedTemporaryFile"></a>NamedTemporaryFile</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line"></span><br><span class="line">temp = NamedTemporaryFile(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">temp.name[-<span class="number">8</span>:]</span><br></pre></td></tr></table></figure>

<h3 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h3><p>无论哪种方法，优先考虑这种方法的碰撞概率是多少，以下是对这几种方法在碰撞次数、效率上的测评</p>
<h4 id="random-choices-1"><a href="#random-choices-1" class="headerlink" title="random.choices"></a>random.choices</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="string">&quot;&quot;</span>.join(random.choices(alphabet, k=<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run counts: 10000000, total time: 12.96840283399979s, each time: 1.296840283399979e-06s, collisions=0</span><br></pre></td></tr></table></figure>



<h4 id="uuid4-1"><a href="#uuid4-1" class="headerlink" title="uuid4"></a>uuid4</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="built_in">str</span>(uuid4())[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run counts: 10000000, total time: 20.264591582999856s, each time: 2.0264591582999855e-06s, collisions=11668</span><br></pre></td></tr></table></figure>



<h4 id="secrets-choice-1"><a href="#secrets-choice-1" class="headerlink" title="secrets.choice"></a>secrets.choice</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = secrets.token_urlsafe(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run counts: 10000000, total time: 9.400313791999906s, each time: 9.400313791999906e-07s, collisions=0</span><br></pre></td></tr></table></figure>



<h4 id="shortuuid-1"><a href="#shortuuid-1" class="headerlink" title="shortuuid"></a>shortuuid</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> shortuuid</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line">start = time.perf_counter()</span><br><span class="line">su = shortuuid.ShortUUID(alphabet)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = su.random(length=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run counts: 10000000, total time: 20.793132207999406s, each time: 2.0793132207999407e-06s, collisions=1</span><br></pre></td></tr></table></figure>



<h4 id="NamedTemporaryFile-1"><a href="#NamedTemporaryFile-1" class="headerlink" title="NamedTemporaryFile"></a>NamedTemporaryFile</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line">counts = <span class="number">10000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    temp = NamedTemporaryFile(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    code = temp.name[-<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>返回时间太长，手动终止</p>
<p><code>NamedTemporaryFile</code>内部方法用的<code>random.choices</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RandomNameSequence</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;An instance of _RandomNameSequence generates an endless</span></span><br><span class="line"><span class="string">    sequence of unpredictable strings which can safely be incorporated</span></span><br><span class="line"><span class="string">    into file names.  Each string is eight characters long.  Multiple</span></span><br><span class="line"><span class="string">    threads can safely use the same instance at the same time.</span></span><br><span class="line"><span class="string">    _RandomNameSequence is an iterator.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    characters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rng</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur_pid = _os.getpid()</span><br><span class="line">        <span class="keyword">if</span> cur_pid != <span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            self._rng = _Random()</span><br><span class="line">            self._rng_pid = cur_pid</span><br><span class="line">        <span class="keyword">return</span> self._rng</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(self.rng.choices(self.characters, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<p>稍微修改如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomNameSequence</span>:</span></span><br><span class="line">    characters = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rng</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur_pid = os.getpid()</span><br><span class="line">        <span class="built_in">print</span>(cur_pid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>))</span><br><span class="line">        <span class="keyword">if</span> cur_pid != <span class="built_in">getattr</span>(self, <span class="string">&#x27;_rng_pid&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            self._rng = Random()</span><br><span class="line">            self._rng_pid = cur_pid</span><br><span class="line">        <span class="keyword">return</span> self._rng</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(self.rng.choices(self.characters, k=<span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<p>测试内容(这里将次数缩小了10倍，由于耗时太长)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">counts = <span class="number">1000000</span></span><br><span class="line">store = <span class="built_in">set</span>()</span><br><span class="line">collisions = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(counts):</span><br><span class="line">    code = <span class="built_in">next</span>(RandomNameSequence())</span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> store:</span><br><span class="line">        collisions += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store.add(code)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;run counts: <span class="subst">&#123;counts&#125;</span>, total time: <span class="subst">&#123;end-start&#125;</span>s, each time: <span class="subst">&#123;(end-start)/<span class="number">1.0</span>/counts&#125;</span>s, collisions=<span class="subst">&#123;collisions&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run counts: 1000000, total time: 21.044718625s, each time: 2.1044718625000002e-05s, collisions=0</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li><p>UUID只包含小写字母和数字，因此它的碰撞次数变高</p>
</li>
<li><p>NamedTemporaryFile 虽然也用的random.choices，但是使用了迭代器的形式，速度变慢（有待进一步测试）</p>
</li>
<li><p>优选random.choices 和 secrets.choice的方式</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://stackoverflow.com/questions/13484726/safe-enough-8-character-short-unique-random-string/55890039#55890039">python - safe enough 8-character short unique random string - Stack Overflow</a></p>
<p>[2] <a href="https://github.com/python/cpython/blob/b3ab4344d11edd890916be3526b07362182fb172/Lib/tempfile.py#L128">cpython/tempfile.py at b3ab4344d11edd890916be3526b07362182fb172 · python/cpython (github.com)</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>空格</title>
    <url>/posts/91f6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>组件化实战</title>
    <url>/posts/9b54/</url>
    <content><![CDATA[<p>目前前端三大框架（Vue.js, Angular.js, React.js）都在引领着前端的组件化开发方向，组件化的前端开发方式的确为业务实现带来了前所未有的方便，但如何封装一个优秀的组件，可能并不是每位前端开发者都能够做好的。</p>
<h2 id="组件化的特点"><a href="#组件化的特点" class="headerlink" title="组件化的特点"></a>组件化的特点</h2><ul>
<li>组件化是对实现的分层，是更有效地代码组合方式</li>
<li>组件化是对资源的重组和优化，从而使项目资源管理更合理</li>
<li>组件化有利于单元测试</li>
<li>组件化对重构较友好<h3 id="组件与模块"><a href="#组件与模块" class="headerlink" title="组件与模块"></a>组件与模块</h3>模块(Module)通常强调的是职责（分离、内聚），组件是可复用模块和相关依赖的封装。<blockquote>
<p>In my view, Module and Component are all just a couple of functions and assets.<br>And the different between them is:<br><strong>Component has business logical and module not.</strong><br>For example,this text input area is just a Module, but when there was some post api called,it become a Component. you can put a module everywhere and it will work fine, but Componet just can be used in a specific page or view(coz it has a specific api call)</p>
</blockquote>
</li>
</ul>
<h3 id="组件化结构"><a href="#组件化结构" class="headerlink" title="组件化结构"></a>组件化结构</h3><p>一个组件包括以下部分：</p>
<ul>
<li>Attribute</li>
<li> Config &amp; State</li>
<li>Event</li>
<li>Lifecycle</li>
<li>Children</li>
<li>Properties</li>
<li>Methods</li>
<li>Inherit<br><img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-170957.png"></li>
</ul>
<h2 id="Webpack资源组件化"><a href="#Webpack资源组件化" class="headerlink" title="Webpack资源组件化"></a>Webpack资源组件化</h2><blockquote>
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle<br><img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-160837.jpg"><br>从图上我们可以看到，webpack将多种静态资源js、css、less等转化成一个静态文件，减少页面的请求<br>Webpack包括四个核心概念：入口、输出、loader、插件</p>
</blockquote>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的，可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。你可以通过在配置中指定一个 output 字段，来配置这些处理过程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="LOADER"><a href="#LOADER" class="headerlink" title="LOADER"></a>LOADER</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。<br>在更高层面，在 webpack 的配置中 loader 有两个目标：</p>
<ol>
<li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li>
<li>use 属性，表示进行转换时，应该使用哪个 loader。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">&quot;babel-loader&quot;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// Prefer `dart-sass`</span></span><br><span class="line">              <span class="attr">implementation</span>: <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">     </span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">&#x27;./static/&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;static/&#x27;</span>, <span class="attr">force</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">&#x27;./index.html&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="attr">force</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>
本项目中完整webpack实例<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> CopyPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">&quot;babel-loader&quot;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// Prefer `dart-sass`</span></span><br><span class="line">              <span class="attr">implementation</span>: <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">     </span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">&#x27;./static/&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;static/&#x27;</span>, <span class="attr">force</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">&#x27;./index.html&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="attr">force</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;8000&#x27;</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="组件实战"><a href="#组件实战" class="headerlink" title="组件实战"></a>组件实战</h2><h3 id="Tab组件"><a href="#Tab组件" class="headerlink" title="Tab组件"></a>Tab组件</h3><h4 id="通过点击Tab-Header实现"><a href="#通过点击Tab-Header实现" class="headerlink" title="通过点击Tab Header实现"></a>通过点击Tab Header实现</h4></li>
<li>Display 切换<br><img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-165152.png"></li>
<li>Animation切换<br> ￼<img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-165231.png"><h4 id="通过手势切换"><a href="#通过手势切换" class="headerlink" title="通过手势切换"></a>通过手势切换</h4>跟 Carousel 同一原理<br><img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-165814.png"><h4 id="Scroll组件"><a href="#Scroll组件" class="headerlink" title="Scroll组件"></a>Scroll组件</h4></li>
<li>ScrollTop<br> ￼<img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-165949.png"></li>
<li>通过站位元素实现<br> <img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-170030.png"><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><img src="https://oss.smart-lifestyle.cn/blog/2019-11-16-2019-11-17%2001.21.51.gif"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>通过三个月跟着极客大学前端训练营和winter老师的学习，从基本功能实现一个简单的有好货页面。<br>组件化化思想很重要，避免了重复造轮子，使自己的代码更加健全，需要之后的工作中多多实践，深刻体会组件化思想，目前我还需要多练多体会。<br>革命尚未成功，同志还需努力。</li>
</ol>
<p><strong>未完结</strong><br>完整代码地址：<br><a href="https://github.com/simplezhao/Front-end" title="前段训练营"></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌工程实践 — code review 开发者指南</title>
    <url>/posts/3c88/</url>
    <content><![CDATA[<blockquote>
<p>更好的通过Code review<br>参考地址：<a href="https://xindoo.github.io/eng-practices-cn/" title="谷歌工程实践">https://xindoo.github.io/eng-practices-cn/</a></p>
</blockquote>
<h2 id="写一个好的CL-1-描述"><a href="#写一个好的CL-1-描述" class="headerlink" title="写一个好的CL[^1]描述"></a>写一个好的CL[^1]描述</h2><blockquote>
<p>一个CL描述记录了做了什么更改以及为什么做这个更改</p>
</blockquote>
<h3 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h3><p>CL描述的第一行，应该是对CL正在做的具体工作的短简总结，要做到：</p>
<ul>
<li>言简意赅</li>
<li>语义完整</li>
<li>空行隔开</li>
</ul>
<h3 id="正文内容丰富"><a href="#正文内容丰富" class="headerlink" title="正文内容丰富"></a>正文内容丰富</h3><p>其余描述应该具体丰富，可能包括正在解决问题的简要概述、为什么这么做，如果存在缺点，应该提及到。也应该包括相关的背景信息</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h4><ul>
<li>修复bug</li>
<li>添加补丁</li>
<li>阶段1<br>以上描述不够充分，不知道究竟在干什么<h4 id="好的CL描述"><a href="#好的CL描述" class="headerlink" title="好的CL描述"></a>好的CL描述</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">重构，将modbus采集由同步方式改为异步方式</span><br><span class="line"></span><br><span class="line">多路modbus采集时，同步方式导致采集时间过长，影响后续的数据处理，改为异步方式后，增加并发数，提高采集速度。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="CL应该尽可能简短"><a href="#CL应该尽可能简短" class="headerlink" title="CL应该尽可能简短"></a>CL应该尽可能简短</h2><blockquote>
<p>简短的CL指的是尽可能在一次减少提交变更，避免巨大改动<br>如果你提供不了简短的CL，说明你的代码可能需要重构了<br>CL更简短，有如下优点：</p>
</blockquote>
<ul>
<li>code review 更快</li>
<li>减少导致bug的可能性</li>
<li>较少不必要的工作</li>
<li>更方便的合并代码</li>
<li>有助于做出更好的设计</li>
<li>降低审查者的难度</li>
</ul>
<h3 id="怎么算简短"><a href="#怎么算简短" class="headerlink" title="怎么算简短"></a>怎么算简短</h3><p>通常CL的正确大小是一个独立的更改，这意味着：CL所做的最小更改仅解决了一件事情，比如你需要增加两个独立的API接口，应该分别提交API。</p>
<h3 id="把代码重构分离出来"><a href="#把代码重构分离出来" class="headerlink" title="把代码重构分离出来"></a>把代码重构分离出来</h3><p>重构最好不要和功能修改或者bug fix一起提CL，比如重命名一个Class，最好和这个CLass的bug fix分开提CL，这样对于评审者来说，更容易理解</p>
<h3 id="将相关测试代码保存在同一CL中"><a href="#将相关测试代码保存在同一CL中" class="headerlink" title="将相关测试代码保存在同一CL中"></a>将相关测试代码保存在同一CL中</h3><p>应该避免将测试代码拆分为单独的CL，验证代码修改的测试也应该进入相同的CL</p>
<p>[^1]:    CL is ChangeList</p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>code review</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ftplib获取ftp指定日期间的文件</title>
    <url>/posts/e530/</url>
    <content><![CDATA[<h2 id="使用python-ftplib-库获取-某一天的文件列表，并下载到本地"><a href="#使用python-ftplib-库获取-某一天的文件列表，并下载到本地" class="headerlink" title="使用python ftplib 库获取 某一天的文件列表，并下载到本地"></a>使用python ftplib 库获取 某一天的文件列表，并下载到本地</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ftp 设置</span></span><br><span class="line">ftp_server = <span class="string">&quot;******&quot;</span></span><br><span class="line">ftp_user = <span class="string">&quot;*****&quot;</span></span><br><span class="line">ftp_password = <span class="string">&quot;******&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ftp = FTP(host=ftp_server, user=ftp_user, passwd=ftp_password)</span><br><span class="line"><span class="comment"># 通过nlst获取文件列表</span></span><br><span class="line">file_list = ftp.nlst()</span><br><span class="line"><span class="comment"># 通过voidcmd 获取文件更新（上传）时间</span></span><br><span class="line">date = ftp.voidcmd(<span class="string">f&quot;MDTM 202002190502.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(date)</span><br></pre></td></tr></table></figure>

<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 213 20200219170403</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取文件</span></span><br><span class="line">filter_date = <span class="string">&#x27;20200520&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有文件，生成一个迭代器</span></span><br><span class="line">items = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: ftp.voidcmd(<span class="string">f&quot;MDTM <span class="subst">&#123;x&#125;</span>&quot;</span>)[<span class="number">4</span>:<span class="number">12</span>] == filter_date, file_list)</span><br><span class="line"><span class="comment"># 遍历迭代器, 通过retrbinary下载文件</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;file name: <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;temp/<span class="subst">&#123;item&#125;</span>&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        ftp.retrbinary(<span class="string">f&#x27;RETR <span class="subst">&#123;item&#125;</span>&#x27;</span>, fp.write)</span><br><span class="line"><span class="comment"># 关闭ftp</span></span><br><span class="line">ftp.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200508.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200509.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200514.csv</span><br><span class="line"><span class="keyword">file</span> <span class="keyword">name</span>: HMI123456789_20200520.csv</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;221 Goodbye.&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当ftp 服务器关闭是，再遍历过滤后的迭代器将为空</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">print</span>(itme)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外还可以通过ftp.dir获取，具体实现参考文档：<a href="https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib">https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib</a></p>
<p>参考：</p>
<ol>
<li><a href="https://docs.python.org/3/library/ftplib.html" title="ftplib">https://docs.python.org/3/library/ftplib.html</a></li>
<li><a href="https://stackoverflow.com/questions/8990598/python-ftp-get-the-most-recent-file-by-date?answertab=votes#tab-top" title="Python FTP get the most recent file by date">https://stackoverflow.com/questions/8990598/python-ftp-get-the-most-recent-file-by-date?answertab=votes#tab-top</a></li>
<li><a href="https://stackoverflow.com/questions/29026709/how-to-get-ftp-files-modify-time-using-python-ftplib" title="How to get FTP file&#39;s modify time using Python ftplib">https://stackoverflow.com/questions/29026709/how-to-get-ftp-files-modify-time-using-python-ftplib</a></li>
<li><a href="https://tools.ietf.org/html/rfc3659#section-3" title="rfc3659">https://tools.ietf.org/html/rfc3659#section-3</a></li>
<li><a href="https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib"> https://www.semicolonworld.com/question/57790/how-to-get-ftp-file-39-s-modify-time-using-python-ftplib </a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ftplib</tag>
      </tags>
  </entry>
</search>
